// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for Language.
const (
	LanguageAa Language = "aa"
	LanguageAb Language = "ab"
	LanguageAe Language = "ae"
	LanguageAf Language = "af"
	LanguageAk Language = "ak"
	LanguageAm Language = "am"
	LanguageAn Language = "an"
	LanguageAr Language = "ar"
	LanguageAs Language = "as"
	LanguageAv Language = "av"
	LanguageAy Language = "ay"
	LanguageAz Language = "az"
	LanguageBa Language = "ba"
	LanguageBe Language = "be"
	LanguageBg Language = "bg"
	LanguageBh Language = "bh"
	LanguageBi Language = "bi"
	LanguageBm Language = "bm"
	LanguageBn Language = "bn"
	LanguageBo Language = "bo"
	LanguageBr Language = "br"
	LanguageBs Language = "bs"
	LanguageCa Language = "ca"
	LanguageCe Language = "ce"
	LanguageCh Language = "ch"
	LanguageCo Language = "co"
	LanguageCr Language = "cr"
	LanguageCs Language = "cs"
	LanguageCu Language = "cu"
	LanguageCv Language = "cv"
	LanguageCy Language = "cy"
	LanguageDa Language = "da"
	LanguageDe Language = "de"
	LanguageDv Language = "dv"
	LanguageDz Language = "dz"
	LanguageEe Language = "ee"
	LanguageEl Language = "el"
	LanguageEn Language = "en"
	LanguageEo Language = "eo"
	LanguageEs Language = "es"
	LanguageEt Language = "et"
	LanguageEu Language = "eu"
	LanguageFa Language = "fa"
	LanguageFf Language = "ff"
	LanguageFi Language = "fi"
	LanguageFj Language = "fj"
	LanguageFo Language = "fo"
	LanguageFr Language = "fr"
	LanguageFy Language = "fy"
	LanguageGa Language = "ga"
	LanguageGd Language = "gd"
	LanguageGl Language = "gl"
	LanguageGn Language = "gn"
	LanguageGu Language = "gu"
	LanguageGv Language = "gv"
	LanguageHa Language = "ha"
	LanguageHe Language = "he"
	LanguageHi Language = "hi"
	LanguageHo Language = "ho"
	LanguageHr Language = "hr"
	LanguageHt Language = "ht"
	LanguageHu Language = "hu"
	LanguageHy Language = "hy"
	LanguageHz Language = "hz"
	LanguageIa Language = "ia"
	LanguageId Language = "id"
	LanguageIe Language = "ie"
	LanguageIg Language = "ig"
	LanguageIi Language = "ii"
	LanguageIk Language = "ik"
	LanguageIo Language = "io"
	LanguageIs Language = "is"
	LanguageIt Language = "it"
	LanguageIu Language = "iu"
	LanguageJa Language = "ja"
	LanguageJv Language = "jv"
	LanguageKa Language = "ka"
	LanguageKg Language = "kg"
	LanguageKi Language = "ki"
	LanguageKj Language = "kj"
	LanguageKk Language = "kk"
	LanguageKl Language = "kl"
	LanguageKm Language = "km"
	LanguageKn Language = "kn"
	LanguageKo Language = "ko"
	LanguageKr Language = "kr"
	LanguageKs Language = "ks"
	LanguageKu Language = "ku"
	LanguageKv Language = "kv"
	LanguageKw Language = "kw"
	LanguageKy Language = "ky"
	LanguageLa Language = "la"
	LanguageLb Language = "lb"
	LanguageLg Language = "lg"
	LanguageLi Language = "li"
	LanguageLn Language = "ln"
	LanguageLo Language = "lo"
	LanguageLt Language = "lt"
	LanguageLu Language = "lu"
	LanguageLv Language = "lv"
	LanguageMg Language = "mg"
	LanguageMh Language = "mh"
	LanguageMi Language = "mi"
	LanguageMk Language = "mk"
	LanguageMl Language = "ml"
	LanguageMn Language = "mn"
	LanguageMr Language = "mr"
	LanguageMs Language = "ms"
	LanguageMt Language = "mt"
	LanguageMy Language = "my"
	LanguageNa Language = "na"
	LanguageNb Language = "nb"
	LanguageNd Language = "nd"
	LanguageNe Language = "ne"
	LanguageNg Language = "ng"
	LanguageNl Language = "nl"
	LanguageNn Language = "nn"
	LanguageNo Language = "no"
	LanguageNr Language = "nr"
	LanguageNv Language = "nv"
	LanguageNy Language = "ny"
	LanguageOc Language = "oc"
	LanguageOj Language = "oj"
	LanguageOm Language = "om"
	LanguageOr Language = "or"
	LanguageOs Language = "os"
	LanguagePa Language = "pa"
	LanguagePi Language = "pi"
	LanguagePl Language = "pl"
	LanguagePs Language = "ps"
	LanguagePt Language = "pt"
	LanguageQu Language = "qu"
	LanguageRm Language = "rm"
	LanguageRn Language = "rn"
	LanguageRo Language = "ro"
	LanguageRu Language = "ru"
	LanguageRw Language = "rw"
	LanguageSa Language = "sa"
	LanguageSc Language = "sc"
	LanguageSd Language = "sd"
	LanguageSe Language = "se"
	LanguageSg Language = "sg"
	LanguageSi Language = "si"
	LanguageSk Language = "sk"
	LanguageSl Language = "sl"
	LanguageSm Language = "sm"
	LanguageSn Language = "sn"
	LanguageSo Language = "so"
	LanguageSq Language = "sq"
	LanguageSr Language = "sr"
	LanguageSs Language = "ss"
	LanguageSt Language = "st"
	LanguageSu Language = "su"
	LanguageSv Language = "sv"
	LanguageSw Language = "sw"
	LanguageTa Language = "ta"
	LanguageTe Language = "te"
	LanguageTg Language = "tg"
	LanguageTh Language = "th"
	LanguageTi Language = "ti"
	LanguageTk Language = "tk"
	LanguageTl Language = "tl"
	LanguageTn Language = "tn"
	LanguageTo Language = "to"
	LanguageTr Language = "tr"
	LanguageTs Language = "ts"
	LanguageTt Language = "tt"
	LanguageTw Language = "tw"
	LanguageTy Language = "ty"
	LanguageUg Language = "ug"
	LanguageUk Language = "uk"
	LanguageUr Language = "ur"
	LanguageUz Language = "uz"
	LanguageVe Language = "ve"
	LanguageVi Language = "vi"
	LanguageVo Language = "vo"
	LanguageWa Language = "wa"
	LanguageWo Language = "wo"
	LanguageXh Language = "xh"
	LanguageYi Language = "yi"
	LanguageYo Language = "yo"
	LanguageZa Language = "za"
	LanguageZh Language = "zh"
	LanguageZu Language = "zu"
)

// Defines values for OrganizationStatus.
const (
	OrganizationStatusActive  OrganizationStatus = "active"
	OrganizationStatusDeleted OrganizationStatus = "deleted"
)

// Defines values for PermissionKind.
const (
	PermissionKindAsterisk PermissionKind = "*"
	PermissionKindCreate   PermissionKind = "create"
	PermissionKindDelete   PermissionKind = "delete"
	PermissionKindRead     PermissionKind = "read"
	PermissionKindWrite    PermissionKind = "write"
)

// Defines values for ResourceType.
const (
	ResourceTypeAssignment    ResourceType = "Assignment"
	ResourceTypeAttachment    ResourceType = "Attachment"
	ResourceTypeComment       ResourceType = "Comment"
	ResourceTypeDocument      ResourceType = "Document"
	ResourceTypeIssue         ResourceType = "Issue"
	ResourceTypeIssueRelation ResourceType = "IssueRelation"
	ResourceTypeLabel         ResourceType = "Label"
	ResourceTypeNamespace     ResourceType = "Namespace"
	ResourceTypeOrganization  ResourceType = "Organization"
	ResourceTypePermission    ResourceType = "Permission"
	ResourceTypeProject       ResourceType = "Project"
	ResourceTypeResourceType  ResourceType = "ResourceType"
	ResourceTypeRole          ResourceType = "Role"
	ResourceTypeTodo          ResourceType = "Todo"
	ResourceTypeUser          ResourceType = "User"
)

// Defines values for SystemHealthCacheDatabase.
const (
	SystemHealthCacheDatabaseHealthy   SystemHealthCacheDatabase = "healthy"
	SystemHealthCacheDatabaseUnhealthy SystemHealthCacheDatabase = "unhealthy"
	SystemHealthCacheDatabaseUnknown   SystemHealthCacheDatabase = "unknown"
)

// Defines values for SystemHealthGraphDatabase.
const (
	SystemHealthGraphDatabaseHealthy   SystemHealthGraphDatabase = "healthy"
	SystemHealthGraphDatabaseUnhealthy SystemHealthGraphDatabase = "unhealthy"
	SystemHealthGraphDatabaseUnknown   SystemHealthGraphDatabase = "unknown"
)

// Defines values for SystemHealthLicense.
const (
	SystemHealthLicenseHealthy   SystemHealthLicense = "healthy"
	SystemHealthLicenseUnhealthy SystemHealthLicense = "unhealthy"
	SystemHealthLicenseUnknown   SystemHealthLicense = "unknown"
)

// Defines values for SystemHealthMessageQueue.
const (
	SystemHealthMessageQueueHealthy   SystemHealthMessageQueue = "healthy"
	SystemHealthMessageQueueUnhealthy SystemHealthMessageQueue = "unhealthy"
	SystemHealthMessageQueueUnknown   SystemHealthMessageQueue = "unknown"
)

// Defines values for SystemHealthRelationalDatabase.
const (
	SystemHealthRelationalDatabaseHealthy   SystemHealthRelationalDatabase = "healthy"
	SystemHealthRelationalDatabaseUnhealthy SystemHealthRelationalDatabase = "unhealthy"
	SystemHealthRelationalDatabaseUnknown   SystemHealthRelationalDatabase = "unknown"
)

// Defines values for SystemLicenseFeatures.
const (
	SystemLicenseFeaturesComponents        SystemLicenseFeatures = "components"
	SystemLicenseFeaturesCustomFields      SystemLicenseFeatures = "custom_fields"
	SystemLicenseFeaturesCustomStatuses    SystemLicenseFeatures = "custom_statuses"
	SystemLicenseFeaturesMultipleAssignees SystemLicenseFeatures = "multiple_assignees"
	SystemLicenseFeaturesReleases          SystemLicenseFeatures = "releases"
)

// Defines values for TodoPriority.
const (
	TodoPriorityCritical  TodoPriority = "critical"
	TodoPriorityImportant TodoPriority = "important"
	TodoPriorityNormal    TodoPriority = "normal"
	TodoPriorityUrgent    TodoPriority = "urgent"
)

// Defines values for UserStatus.
const (
	UserStatusActive   UserStatus = "active"
	UserStatusDeleted  UserStatus = "deleted"
	UserStatusInactive UserStatus = "inactive"
	UserStatusPending  UserStatus = "pending"
)

// Defines values for V1PermissionHasSystemRoleParamsRoles.
const (
	V1PermissionHasSystemRoleParamsRolesAdmin   V1PermissionHasSystemRoleParamsRoles = "Admin"
	V1PermissionHasSystemRoleParamsRolesOwner   V1PermissionHasSystemRoleParamsRoles = "Owner"
	V1PermissionHasSystemRoleParamsRolesSupport V1PermissionHasSystemRoleParamsRoles = "Support"
)

// HTTPError HTTP error description.
type HTTPError struct {
	// Message Description of the error.
	Message string `json:"message"`
}

// Language Two-letter ISO language code.
type Language string

// Organization An organization in the system.
type Organization struct {
	// CreatedAt Date when the organization was created.
	CreatedAt time.Time `json:"created_at"`

	// Email Email address of the organization.
	Email openapi_types.Email `json:"email"`

	// Id Unique identifier of the organization.
	Id string `json:"id"`

	// Logo Logo of the organization.
	Logo *string `json:"logo"`

	// Members IDs of the users in the organization.
	Members []string `json:"members"`

	// Name Name of the organization.
	Name string `json:"name"`

	// Namespaces IDs of the namespaces in the organization.
	Namespaces []string `json:"namespaces"`

	// Status Status of the organization.
	Status OrganizationStatus `json:"status"`

	// Teams IDs of the teams in the organization.
	Teams []string `json:"teams"`

	// UpdatedAt Date when the organization was updated.
	UpdatedAt *time.Time `json:"updated_at"`

	// Website Work title of the user.
	Website *string `json:"website"`
}

// OrganizationStatus Status of the organization.
type OrganizationStatus string

// Permission A permission in the system.
type Permission struct {
	// CreatedAt Date when the user was created.
	CreatedAt time.Time `json:"created_at"`

	// Id Unique identifier of the user.
	Id string `json:"id"`

	// Kind Kind of a permission.
	Kind    PermissionKind `json:"kind"`
	Subject string         `json:"subject"`
	Target  string         `json:"target"`

	// UpdatedAt Date when the user was updated.
	UpdatedAt *time.Time `json:"updated_at"`
}

// PermissionKind Kind of a permission.
type PermissionKind string

// ResourceType defines model for ResourceType.
type ResourceType string

// Role A role in the system.
type Role struct {
	// CreatedAt Date when the organization was created.
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the role.
	Description *string `json:"description"`

	// Id Unique identifier of the role.
	Id string `json:"id"`

	// Members IDs of the users assigned to the role.
	Members []string `json:"members"`

	// Name Name of the role.
	Name string `json:"name"`

	// Permissions IDs of the permissions assigned to the role.
	Permissions []string `json:"permissions"`

	// UpdatedAt Date when the organization was updated.
	UpdatedAt *time.Time `json:"updated_at"`
}

// SystemHealth defines model for SystemHealth.
type SystemHealth struct {
	// CacheDatabase Health of the cache database.
	CacheDatabase SystemHealthCacheDatabase `json:"cache_database"`

	// GraphDatabase Health of the graph database.
	GraphDatabase SystemHealthGraphDatabase `json:"graph_database"`

	// License Health of the license.
	License SystemHealthLicense `json:"license"`

	// MessageQueue Health of the message queue.
	MessageQueue SystemHealthMessageQueue `json:"message_queue"`

	// RelationalDatabase Health of the relational database.
	RelationalDatabase SystemHealthRelationalDatabase `json:"relational_database"`
}

// SystemHealthCacheDatabase Health of the cache database.
type SystemHealthCacheDatabase string

// SystemHealthGraphDatabase Health of the graph database.
type SystemHealthGraphDatabase string

// SystemHealthLicense Health of the license.
type SystemHealthLicense string

// SystemHealthMessageQueue Health of the message queue.
type SystemHealthMessageQueue string

// SystemHealthRelationalDatabase Health of the relational database.
type SystemHealthRelationalDatabase string

// SystemLicense defines model for SystemLicense.
type SystemLicense struct {
	// Email Email address of the licensee.
	Email openapi_types.Email `json:"email"`

	// ExpiresAt Date and time when the license expires.
	ExpiresAt time.Time `json:"expires_at"`

	// Features Features enabled by the license.
	Features []SystemLicenseFeatures `json:"features"`

	// Id Unique ID identifying the license.
	Id string `json:"id"`

	// Organization Name of the organization the license belongs to.
	Organization string `json:"organization"`

	// Quotas Quotas available for the license.
	Quotas struct {
		// Documents Number of documents can exist in the system.
		Documents int `json:"documents"`

		// Namespaces Number of namespaces can exist in the system.
		Namespaces int `json:"namespaces"`

		// Organizations Number of organizations active can exist in the system.
		Organizations int `json:"organizations"`

		// Projects Number of projects can exist in the system.
		Projects int `json:"projects"`

		// Roles Number of roles can exist in the system.
		Roles int `json:"roles"`

		// Users Number of active or pending users can exist in the system.
		Users int `json:"users"`
	} `json:"quotas"`
}

// SystemLicenseFeatures defines model for SystemLicense.Features.
type SystemLicenseFeatures string

// SystemVersion defines model for SystemVersion.
type SystemVersion struct {
	// Commit Commit hash of the build.
	Commit string `json:"commit"`

	// Date Build date and time of the application.
	Date time.Time `json:"date"`

	// GoVersion Go version used to build the application.
	GoVersion string `json:"go_version"`

	// Version Version of the application.
	Version string `json:"version"`
}

// Todo A todo item belonging to a user.
type Todo struct {
	// Completed Status of the todo item.
	Completed bool `json:"completed"`

	// CreatedAt Date when the todo item was created.
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy ID of the user who created the todo item.
	CreatedBy string `json:"created_by"`

	// Description Description of the todo item.
	Description string `json:"description"`

	// DueDate Completion due date of the todo item.
	DueDate *time.Time `json:"due_date"`

	// Id Unique identifier of the todo.
	Id string `json:"id"`

	// OwnedBy ID of the user who owns the todo item.
	OwnedBy string `json:"owned_by"`

	// Priority Priority of the todo item.
	Priority TodoPriority `json:"priority"`

	// Title Title of the todo item.
	Title string `json:"title"`

	// UpdatedAt Date when the todo item was updated.
	UpdatedAt *time.Time `json:"updated_at"`
}

// TodoPriority Priority of the todo item.
type TodoPriority string

// User A user in the system.
type User struct {
	// Address Working address of the user.
	Address *string `json:"address"`

	// Bio Self description of the user.
	Bio *string `json:"bio"`

	// CreatedAt Date when the user was created.
	CreatedAt time.Time `json:"created_at"`

	// Email Email address of the user.
	Email openapi_types.Email `json:"email"`

	// FirstName First name of the user.
	FirstName *string `json:"first_name"`

	// Id Unique identifier of the user.
	Id string `json:"id"`

	// Languages Languages of the user.
	Languages []Language `json:"languages"`

	// LastName Last name of the user.
	LastName *string `json:"last_name"`

	// Links Links to show on profile page.
	Links *[]string `json:"links"`

	// Phone Phone number of the user.
	Phone *string `json:"phone"`

	// Picture Profile picture of the user.
	Picture *string `json:"picture"`

	// Status Status of the user.
	Status UserStatus `json:"status"`

	// Title Work title of the user.
	Title *string `json:"title"`

	// UpdatedAt Date when the user was updated.
	UpdatedAt *time.Time `json:"updated_at"`

	// Username The unique username of the user.
	Username string `json:"username"`
}

// UserStatus Status of the user.
type UserStatus string

// Force defines model for force.
type Force = bool

// Id defines model for id.
type Id = string

// Limit defines model for limit.
type Limit = int

// Offset defines model for offset.
type Offset = int

// ResourceId defines model for resourceId.
type ResourceId = string

// Roles defines model for roles.
type Roles = []string

// N201 defines model for 201.
type N201 struct {
	// Id ID of the newly created resource.
	Id string `json:"id"`
}

// N400 HTTP error description.
type N400 = HTTPError

// N401 HTTP error description.
type N401 = HTTPError

// N403 HTTP error description.
type N403 = HTTPError

// N404 HTTP error description.
type N404 = HTTPError

// N500 HTTP error description.
type N500 = HTTPError

// OrganizationCreate defines model for OrganizationCreate.
type OrganizationCreate struct {
	// Email Email address of the organization.
	Email openapi_types.Email `json:"email"`

	// Logo Logo of the organization.
	Logo *string `json:"logo,omitempty"`

	// Name Name of the organization.
	Name string `json:"name"`

	// Website Work title of the user.
	Website *string `json:"website,omitempty"`
}

// OrganizationPatch defines model for OrganizationPatch.
type OrganizationPatch struct {
	// Email Email address of the organization.
	Email *openapi_types.Email `json:"email,omitempty"`

	// Logo Logo of the organization.
	Logo *string `json:"logo,omitempty"`

	// Name Name of the organization.
	Name *string `json:"name,omitempty"`

	// Status Status of the organization.
	Status *OrganizationStatus `json:"status,omitempty"`

	// Website Work title of the user.
	Website *string `json:"website,omitempty"`
}

// PermissionCreate defines model for PermissionCreate.
type PermissionCreate struct {
	// Kind Kind of a permission.
	Kind    PermissionKind `json:"kind"`
	Subject struct {
		Id           string       `json:"id"`
		ResourceType ResourceType `json:"resourceType"`
	} `json:"subject"`
	Target struct {
		Id           string       `json:"id"`
		ResourceType ResourceType `json:"resourceType"`
	} `json:"target"`
}

// PermissionPatch defines model for PermissionPatch.
type PermissionPatch struct {
	// Kind Kind of a permission.
	Kind PermissionKind `json:"kind"`
}

// RoleCreate defines model for RoleCreate.
type RoleCreate struct {
	// Description Description of the role.
	Description *string `json:"description,omitempty"`

	// Name Name of the role.
	Name string `json:"name"`
}

// RolePatch defines model for RolePatch.
type RolePatch struct {
	// Description Description of the role.
	Description *string `json:"description,omitempty"`

	// Name Name of the role.
	Name *string `json:"name,omitempty"`
}

// TodoCreate defines model for TodoCreate.
type TodoCreate struct {
	// Description Description of the todo item.
	Description Optional[string] `json:"description"`

	// DueDate Completion due date of the todo item.
	DueDate Optional[*time.Time] `json:"due_date"`

	// OwnedBy ID of the user who owns the todo item.
	OwnedBy string `json:"owned_by"`

	// Priority Priority of the todo item.
	Priority TodoPriority `json:"priority"`

	// Title Title of the todo item.
	Title string `json:"title"`
}

// TodoPatch defines model for TodoPatch.
type TodoPatch struct {
	// Completed Completion status of the todo item.
	Completed *bool `json:"completed,omitempty"`

	// Description Description of the todo item.
	Description Optional[string] `json:"description"`

	// DueDate Completion due date of the todo item.
	DueDate Optional[*time.Time] `json:"due_date"`

	// OwnedBy ID of the user who owns the todo item.
	OwnedBy *string `json:"owned_by,omitempty"`

	// Priority Priority of the todo item.
	Priority *TodoPriority `json:"priority,omitempty"`

	// Title Title of the todo item.
	Title *string `json:"title,omitempty"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	// Address Working address of the user.
	Address *string `json:"address"`

	// Bio Self description of the user.
	Bio *string `json:"bio"`

	// Email Email address of the user.
	Email openapi_types.Email `json:"email"`

	// FirstName First name of the user.
	FirstName *string `json:"first_name"`

	// Languages Languages of the user.
	Languages *[]Language `json:"languages"`

	// LastName Last name of the user.
	LastName *string `json:"last_name"`

	// Links Links to show on profile page.
	Links *[]string `json:"links"`

	// Password Password of the user.
	Password string `json:"password"`

	// Phone Phone number of the user.
	Phone *string `json:"phone"`

	// Picture Profile picture of the user.
	Picture *string `json:"picture"`

	// Title Work title of the user.
	Title *string `json:"title"`

	// Username The unique username of the user.
	Username string `json:"username"`
}

// UserPatch defines model for UserPatch.
type UserPatch struct {
	// Address Working address of the user.
	Address Optional[string] `json:"address"`

	// Bio Self description of the user.
	Bio Optional[string] `json:"bio"`

	// Email Email address of the user.
	Email *openapi_types.Email `json:"email,omitempty"`

	// FirstName First name of the user.
	FirstName Optional[string] `json:"first_name"`

	// Languages Languages of the user.
	Languages *[]Language `json:"languages,omitempty"`

	// LastName Last name of the user.
	LastName Optional[string] `json:"last_name"`

	// Links Links to show on profile page.
	Links *[]string `json:"links,omitempty"`

	// NewPassword New password of the user.
	NewPassword *string `json:"new_password,omitempty"`

	// Password Password of the user. Required together with the new_password field.
	Password *string `json:"password,omitempty"`

	// Phone Phone number of the user.
	Phone Optional[string] `json:"phone"`

	// Picture Profile picture of the user.
	Picture Optional[string] `json:"picture"`

	// Status Status of the user.
	Status *UserStatus `json:"status,omitempty"`

	// Title Work title of the user.
	Title Optional[string] `json:"title"`

	// Username The unique username of the user.
	Username *string `json:"username,omitempty"`
}

// V1OrganizationsGetParams defines parameters for V1OrganizationsGet.
type V1OrganizationsGetParams struct {
	// Offset Number of resources to skip.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of resources to return.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// V1OrganizationsCreateJSONBody defines parameters for V1OrganizationsCreate.
type V1OrganizationsCreateJSONBody struct {
	// Email Email address of the organization.
	Email openapi_types.Email `json:"email"`

	// Logo Logo of the organization.
	Logo *string `json:"logo,omitempty"`

	// Name Name of the organization.
	Name string `json:"name"`

	// Website Work title of the user.
	Website *string `json:"website,omitempty"`
}

// V1OrganizationRolesGetParams defines parameters for V1OrganizationRolesGet.
type V1OrganizationRolesGetParams struct {
	// Offset Number of resources to skip.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of resources to return.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// V1OrganizationRolesCreateJSONBody defines parameters for V1OrganizationRolesCreate.
type V1OrganizationRolesCreateJSONBody struct {
	// Description Description of the role.
	Description *string `json:"description,omitempty"`

	// Name Name of the role.
	Name string `json:"name"`
}

// V1OrganizationRoleUpdateJSONBody defines parameters for V1OrganizationRoleUpdate.
type V1OrganizationRoleUpdateJSONBody struct {
	// Description Description of the role.
	Description *string `json:"description,omitempty"`

	// Name Name of the role.
	Name *string `json:"name,omitempty"`
}

// V1OrganizationDeleteParams defines parameters for V1OrganizationDelete.
type V1OrganizationDeleteParams struct {
	// Force Irreversibly delete the user.
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// V1OrganizationUpdateJSONBody defines parameters for V1OrganizationUpdate.
type V1OrganizationUpdateJSONBody struct {
	// Email Email address of the organization.
	Email *openapi_types.Email `json:"email,omitempty"`

	// Logo Logo of the organization.
	Logo *string `json:"logo,omitempty"`

	// Name Name of the organization.
	Name *string `json:"name,omitempty"`

	// Status Status of the organization.
	Status *OrganizationStatus `json:"status,omitempty"`

	// Website Work title of the user.
	Website *string `json:"website,omitempty"`
}

// V1OrganizationMembersAddJSONBody defines parameters for V1OrganizationMembersAdd.
type V1OrganizationMembersAddJSONBody struct {
	// UserId ID of the user to add.
	UserId string `json:"user_id"`
}

// V1OrganizationRoleMembersAddJSONBody defines parameters for V1OrganizationRoleMembersAdd.
type V1OrganizationRoleMembersAddJSONBody struct {
	// UserId ID of the user to add.
	UserId string `json:"user_id"`
}

// V1PermissionsCreateJSONBody defines parameters for V1PermissionsCreate.
type V1PermissionsCreateJSONBody struct {
	// Kind Kind of a permission.
	Kind    PermissionKind `json:"kind"`
	Subject struct {
		Id           string       `json:"id"`
		ResourceType ResourceType `json:"resourceType"`
	} `json:"subject"`
	Target struct {
		Id           string       `json:"id"`
		ResourceType ResourceType `json:"resourceType"`
	} `json:"target"`
}

// V1PermissionHasSystemRoleParams defines parameters for V1PermissionHasSystemRole.
type V1PermissionHasSystemRoleParams struct {
	// Roles ID of a role.
	Roles Roles `form:"roles" json:"roles"`
}

// V1PermissionHasSystemRoleParamsRoles defines parameters for V1PermissionHasSystemRole.
type V1PermissionHasSystemRoleParamsRoles string

// V1PermissionUpdateJSONBody defines parameters for V1PermissionUpdate.
type V1PermissionUpdateJSONBody struct {
	// Kind Kind of a permission.
	Kind PermissionKind `json:"kind"`
}

// V1TodosGetParams defines parameters for V1TodosGet.
type V1TodosGetParams struct {
	// Offset Number of resources to skip.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of resources to return.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Completed Completion status of the items.
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty"`
}

// V1TodosCreateJSONBody defines parameters for V1TodosCreate.
type V1TodosCreateJSONBody struct {
	// Description Description of the todo item.
	Description Optional[string] `json:"description"`

	// DueDate Completion due date of the todo item.
	DueDate Optional[*time.Time] `json:"due_date"`

	// OwnedBy ID of the user who owns the todo item.
	OwnedBy string `json:"owned_by"`

	// Priority Priority of the todo item.
	Priority TodoPriority `json:"priority"`

	// Title Title of the todo item.
	Title string `json:"title"`
}

// V1TodoUpdateJSONBody defines parameters for V1TodoUpdate.
type V1TodoUpdateJSONBody struct {
	// Completed Completion status of the todo item.
	Completed *bool `json:"completed,omitempty"`

	// Description Description of the todo item.
	Description Optional[string] `json:"description"`

	// DueDate Completion due date of the todo item.
	DueDate Optional[*time.Time] `json:"due_date"`

	// OwnedBy ID of the user who owns the todo item.
	OwnedBy *string `json:"owned_by,omitempty"`

	// Priority Priority of the todo item.
	Priority *TodoPriority `json:"priority,omitempty"`

	// Title Title of the todo item.
	Title *string `json:"title,omitempty"`
}

// V1UsersGetParams defines parameters for V1UsersGet.
type V1UsersGetParams struct {
	// Offset Number of resources to skip.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of resources to return.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// V1UsersCreateJSONBody defines parameters for V1UsersCreate.
type V1UsersCreateJSONBody struct {
	// Address Working address of the user.
	Address *string `json:"address"`

	// Bio Self description of the user.
	Bio *string `json:"bio"`

	// Email Email address of the user.
	Email openapi_types.Email `json:"email"`

	// FirstName First name of the user.
	FirstName *string `json:"first_name"`

	// Languages Languages of the user.
	Languages *[]Language `json:"languages"`

	// LastName Last name of the user.
	LastName *string `json:"last_name"`

	// Links Links to show on profile page.
	Links *[]string `json:"links"`

	// Password Password of the user.
	Password string `json:"password"`

	// Phone Phone number of the user.
	Phone *string `json:"phone"`

	// Picture Profile picture of the user.
	Picture *string `json:"picture"`

	// Title Work title of the user.
	Title *string `json:"title"`

	// Username The unique username of the user.
	Username string `json:"username"`
}

// V1UserDeleteParams defines parameters for V1UserDelete.
type V1UserDeleteParams struct {
	// Force Irreversibly delete the user.
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// V1UserUpdateJSONBody defines parameters for V1UserUpdate.
type V1UserUpdateJSONBody struct {
	// Address Working address of the user.
	Address Optional[string] `json:"address"`

	// Bio Self description of the user.
	Bio Optional[string] `json:"bio"`

	// Email Email address of the user.
	Email *openapi_types.Email `json:"email,omitempty"`

	// FirstName First name of the user.
	FirstName Optional[string] `json:"first_name"`

	// Languages Languages of the user.
	Languages *[]Language `json:"languages,omitempty"`

	// LastName Last name of the user.
	LastName Optional[string] `json:"last_name"`

	// Links Links to show on profile page.
	Links *[]string `json:"links,omitempty"`

	// NewPassword New password of the user.
	NewPassword *string `json:"new_password,omitempty"`

	// Password Password of the user. Required together with the new_password field.
	Password *string `json:"password,omitempty"`

	// Phone Phone number of the user.
	Phone Optional[string] `json:"phone"`

	// Picture Profile picture of the user.
	Picture Optional[string] `json:"picture"`

	// Status Status of the user.
	Status *UserStatus `json:"status,omitempty"`

	// Title Work title of the user.
	Title Optional[string] `json:"title"`

	// Username The unique username of the user.
	Username *string `json:"username,omitempty"`
}

// V1OrganizationsCreateJSONRequestBody defines body for V1OrganizationsCreate for application/json ContentType.
type V1OrganizationsCreateJSONRequestBody V1OrganizationsCreateJSONBody

// V1OrganizationRolesCreateJSONRequestBody defines body for V1OrganizationRolesCreate for application/json ContentType.
type V1OrganizationRolesCreateJSONRequestBody V1OrganizationRolesCreateJSONBody

// V1OrganizationRoleUpdateJSONRequestBody defines body for V1OrganizationRoleUpdate for application/json ContentType.
type V1OrganizationRoleUpdateJSONRequestBody V1OrganizationRoleUpdateJSONBody

// V1OrganizationUpdateJSONRequestBody defines body for V1OrganizationUpdate for application/json ContentType.
type V1OrganizationUpdateJSONRequestBody V1OrganizationUpdateJSONBody

// V1OrganizationMembersAddJSONRequestBody defines body for V1OrganizationMembersAdd for application/json ContentType.
type V1OrganizationMembersAddJSONRequestBody V1OrganizationMembersAddJSONBody

// V1OrganizationRoleMembersAddJSONRequestBody defines body for V1OrganizationRoleMembersAdd for application/json ContentType.
type V1OrganizationRoleMembersAddJSONRequestBody V1OrganizationRoleMembersAddJSONBody

// V1PermissionsCreateJSONRequestBody defines body for V1PermissionsCreate for application/json ContentType.
type V1PermissionsCreateJSONRequestBody V1PermissionsCreateJSONBody

// V1PermissionUpdateJSONRequestBody defines body for V1PermissionUpdate for application/json ContentType.
type V1PermissionUpdateJSONRequestBody V1PermissionUpdateJSONBody

// V1TodosCreateJSONRequestBody defines body for V1TodosCreate for application/json ContentType.
type V1TodosCreateJSONRequestBody V1TodosCreateJSONBody

// V1TodoUpdateJSONRequestBody defines body for V1TodoUpdate for application/json ContentType.
type V1TodoUpdateJSONRequestBody V1TodoUpdateJSONBody

// V1UsersCreateJSONRequestBody defines body for V1UsersCreate for application/json ContentType.
type V1UsersCreateJSONRequestBody V1UsersCreateJSONBody

// V1UserUpdateJSONRequestBody defines body for V1UserUpdate for application/json ContentType.
type V1UserUpdateJSONRequestBody V1UserUpdateJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get organizations
	// (GET /v1/organizations)
	V1OrganizationsGet(w http.ResponseWriter, r *http.Request, params V1OrganizationsGetParams)
	// Create organization
	// (POST /v1/organizations)
	V1OrganizationsCreate(w http.ResponseWriter, r *http.Request)
	// Get organization roles
	// (GET /v1/organizations/${id}/roles)
	V1OrganizationRolesGet(w http.ResponseWriter, r *http.Request, id Id, params V1OrganizationRolesGetParams)
	// Create a new role in the organization
	// (POST /v1/organizations/${id}/roles)
	V1OrganizationRolesCreate(w http.ResponseWriter, r *http.Request, id Id)
	// Delete organization role
	// (DELETE /v1/organizations/${id}/roles/{role_id})
	V1OrganizationRoleDelete(w http.ResponseWriter, r *http.Request, id Id, roleId string)
	// Get organization role
	// (GET /v1/organizations/${id}/roles/{role_id})
	V1OrganizationRoleGet(w http.ResponseWriter, r *http.Request, id Id, roleId string)
	// Update organization role
	// (PATCH /v1/organizations/${id}/roles/{role_id})
	V1OrganizationRoleUpdate(w http.ResponseWriter, r *http.Request, id Id, roleId string)
	// Delete organization
	// (DELETE /v1/organizations/{id})
	V1OrganizationDelete(w http.ResponseWriter, r *http.Request, id Id, params V1OrganizationDeleteParams)
	// Get organization
	// (GET /v1/organizations/{id})
	V1OrganizationGet(w http.ResponseWriter, r *http.Request, id Id)
	// Update organization
	// (PATCH /v1/organizations/{id})
	V1OrganizationUpdate(w http.ResponseWriter, r *http.Request, id Id)
	// Get organization members
	// (GET /v1/organizations/{id}/members)
	V1OrganizationMembersGet(w http.ResponseWriter, r *http.Request, id Id)
	// Add organization member
	// (POST /v1/organizations/{id}/members)
	V1OrganizationMembersAdd(w http.ResponseWriter, r *http.Request, id Id)
	// Remove organization member
	// (DELETE /v1/organizations/{id}/members/{user_id})
	V1OrganizationMemberRemove(w http.ResponseWriter, r *http.Request, id Id, userId string)
	// Get organization role members
	// (GET /v1/organizations/{id}/roles/{role_id}/members)
	V1OrganizationRoleMembersGet(w http.ResponseWriter, r *http.Request, id Id, roleId string)
	// Add organization role member
	// (POST /v1/organizations/{id}/roles/{role_id}/members)
	V1OrganizationRoleMembersAdd(w http.ResponseWriter, r *http.Request, id Id, roleId string)
	// Remove organization role member
	// (DELETE /v1/organizations/{id}/roles/{role_id}/members/{user_id})
	V1OrganizationRoleMemberRemove(w http.ResponseWriter, r *http.Request, id Id, roleId string, userId string)
	// Create permission
	// (POST /v1/permissions)
	V1PermissionsCreate(w http.ResponseWriter, r *http.Request)
	// Check relations to resource
	// (GET /v1/permissions/has-relations/{resourceId})
	V1PermissionHasRelations(w http.ResponseWriter, r *http.Request, resourceId ResourceId)
	// Check system role assignment
	// (GET /v1/permissions/has-system-role)
	V1PermissionHasSystemRole(w http.ResponseWriter, r *http.Request, params V1PermissionHasSystemRoleParams)
	// Get permissions for a resource
	// (GET /v1/permissions/resources/{resourceId})
	V1PermissionResourceGet(w http.ResponseWriter, r *http.Request, resourceId ResourceId)
	// Delete permission
	// (DELETE /v1/permissions/{id})
	V1PermissionDelete(w http.ResponseWriter, r *http.Request, id Id)
	// Get permission
	// (GET /v1/permissions/{id})
	V1PermissionGet(w http.ResponseWriter, r *http.Request, id Id)
	// Update permission
	// (PATCH /v1/permissions/{id})
	V1PermissionUpdate(w http.ResponseWriter, r *http.Request, id Id)
	// Get system health
	// (GET /v1/system/health)
	V1SystemHealth(w http.ResponseWriter, r *http.Request)
	// Get heartbeat
	// (GET /v1/system/heartbeat)
	V1SystemHeartbeat(w http.ResponseWriter, r *http.Request)
	// Get license info
	// (GET /v1/system/license)
	V1SystemLicense(w http.ResponseWriter, r *http.Request)
	// Get system version
	// (GET /v1/system/version)
	V1SystemVersion(w http.ResponseWriter, r *http.Request)
	// Get todo item
	// (GET /v1/todos)
	V1TodosGet(w http.ResponseWriter, r *http.Request, params V1TodosGetParams)
	// Create todo item
	// (POST /v1/todos)
	V1TodosCreate(w http.ResponseWriter, r *http.Request)
	// Delete todo item
	// (DELETE /v1/todos/{id})
	V1TodoDelete(w http.ResponseWriter, r *http.Request, id Id)
	// Get todo item
	// (GET /v1/todos/{id})
	V1TodoGet(w http.ResponseWriter, r *http.Request, id Id)
	// Update todo
	// (PATCH /v1/todos/{id})
	V1TodoUpdate(w http.ResponseWriter, r *http.Request, id Id)
	// Get all users
	// (GET /v1/users)
	V1UsersGet(w http.ResponseWriter, r *http.Request, params V1UsersGetParams)
	// Create new user
	// (POST /v1/users)
	V1UsersCreate(w http.ResponseWriter, r *http.Request)
	// Delete the user with the given ID.
	// (DELETE /v1/users/{id})
	V1UserDelete(w http.ResponseWriter, r *http.Request, id Id, params V1UserDeleteParams)
	// Get user
	// (GET /v1/users/{id})
	V1UserGet(w http.ResponseWriter, r *http.Request, id Id)
	// Update user
	// (PATCH /v1/users/{id})
	V1UserUpdate(w http.ResponseWriter, r *http.Request, id Id)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get organizations
// (GET /v1/organizations)
func (_ Unimplemented) V1OrganizationsGet(w http.ResponseWriter, r *http.Request, params V1OrganizationsGetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create organization
// (POST /v1/organizations)
func (_ Unimplemented) V1OrganizationsCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get organization roles
// (GET /v1/organizations/${id}/roles)
func (_ Unimplemented) V1OrganizationRolesGet(w http.ResponseWriter, r *http.Request, id Id, params V1OrganizationRolesGetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new role in the organization
// (POST /v1/organizations/${id}/roles)
func (_ Unimplemented) V1OrganizationRolesCreate(w http.ResponseWriter, r *http.Request, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete organization role
// (DELETE /v1/organizations/${id}/roles/{role_id})
func (_ Unimplemented) V1OrganizationRoleDelete(w http.ResponseWriter, r *http.Request, id Id, roleId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get organization role
// (GET /v1/organizations/${id}/roles/{role_id})
func (_ Unimplemented) V1OrganizationRoleGet(w http.ResponseWriter, r *http.Request, id Id, roleId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update organization role
// (PATCH /v1/organizations/${id}/roles/{role_id})
func (_ Unimplemented) V1OrganizationRoleUpdate(w http.ResponseWriter, r *http.Request, id Id, roleId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete organization
// (DELETE /v1/organizations/{id})
func (_ Unimplemented) V1OrganizationDelete(w http.ResponseWriter, r *http.Request, id Id, params V1OrganizationDeleteParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get organization
// (GET /v1/organizations/{id})
func (_ Unimplemented) V1OrganizationGet(w http.ResponseWriter, r *http.Request, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update organization
// (PATCH /v1/organizations/{id})
func (_ Unimplemented) V1OrganizationUpdate(w http.ResponseWriter, r *http.Request, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get organization members
// (GET /v1/organizations/{id}/members)
func (_ Unimplemented) V1OrganizationMembersGet(w http.ResponseWriter, r *http.Request, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add organization member
// (POST /v1/organizations/{id}/members)
func (_ Unimplemented) V1OrganizationMembersAdd(w http.ResponseWriter, r *http.Request, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove organization member
// (DELETE /v1/organizations/{id}/members/{user_id})
func (_ Unimplemented) V1OrganizationMemberRemove(w http.ResponseWriter, r *http.Request, id Id, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get organization role members
// (GET /v1/organizations/{id}/roles/{role_id}/members)
func (_ Unimplemented) V1OrganizationRoleMembersGet(w http.ResponseWriter, r *http.Request, id Id, roleId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add organization role member
// (POST /v1/organizations/{id}/roles/{role_id}/members)
func (_ Unimplemented) V1OrganizationRoleMembersAdd(w http.ResponseWriter, r *http.Request, id Id, roleId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove organization role member
// (DELETE /v1/organizations/{id}/roles/{role_id}/members/{user_id})
func (_ Unimplemented) V1OrganizationRoleMemberRemove(w http.ResponseWriter, r *http.Request, id Id, roleId string, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create permission
// (POST /v1/permissions)
func (_ Unimplemented) V1PermissionsCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Check relations to resource
// (GET /v1/permissions/has-relations/{resourceId})
func (_ Unimplemented) V1PermissionHasRelations(w http.ResponseWriter, r *http.Request, resourceId ResourceId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Check system role assignment
// (GET /v1/permissions/has-system-role)
func (_ Unimplemented) V1PermissionHasSystemRole(w http.ResponseWriter, r *http.Request, params V1PermissionHasSystemRoleParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get permissions for a resource
// (GET /v1/permissions/resources/{resourceId})
func (_ Unimplemented) V1PermissionResourceGet(w http.ResponseWriter, r *http.Request, resourceId ResourceId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete permission
// (DELETE /v1/permissions/{id})
func (_ Unimplemented) V1PermissionDelete(w http.ResponseWriter, r *http.Request, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get permission
// (GET /v1/permissions/{id})
func (_ Unimplemented) V1PermissionGet(w http.ResponseWriter, r *http.Request, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update permission
// (PATCH /v1/permissions/{id})
func (_ Unimplemented) V1PermissionUpdate(w http.ResponseWriter, r *http.Request, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get system health
// (GET /v1/system/health)
func (_ Unimplemented) V1SystemHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get heartbeat
// (GET /v1/system/heartbeat)
func (_ Unimplemented) V1SystemHeartbeat(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get license info
// (GET /v1/system/license)
func (_ Unimplemented) V1SystemLicense(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get system version
// (GET /v1/system/version)
func (_ Unimplemented) V1SystemVersion(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get todo item
// (GET /v1/todos)
func (_ Unimplemented) V1TodosGet(w http.ResponseWriter, r *http.Request, params V1TodosGetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create todo item
// (POST /v1/todos)
func (_ Unimplemented) V1TodosCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete todo item
// (DELETE /v1/todos/{id})
func (_ Unimplemented) V1TodoDelete(w http.ResponseWriter, r *http.Request, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get todo item
// (GET /v1/todos/{id})
func (_ Unimplemented) V1TodoGet(w http.ResponseWriter, r *http.Request, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update todo
// (PATCH /v1/todos/{id})
func (_ Unimplemented) V1TodoUpdate(w http.ResponseWriter, r *http.Request, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all users
// (GET /v1/users)
func (_ Unimplemented) V1UsersGet(w http.ResponseWriter, r *http.Request, params V1UsersGetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create new user
// (POST /v1/users)
func (_ Unimplemented) V1UsersCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete the user with the given ID.
// (DELETE /v1/users/{id})
func (_ Unimplemented) V1UserDelete(w http.ResponseWriter, r *http.Request, id Id, params V1UserDeleteParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user
// (GET /v1/users/{id})
func (_ Unimplemented) V1UserGet(w http.ResponseWriter, r *http.Request, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user
// (PATCH /v1/users/{id})
func (_ Unimplemented) V1UserUpdate(w http.ResponseWriter, r *http.Request, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// V1OrganizationsGet operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationsGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1OrganizationsGetParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationsGet(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationsCreate operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationsCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationsCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationRolesGet operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationRolesGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization.read", "role.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1OrganizationRolesGetParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationRolesGet(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationRolesCreate operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationRolesCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization", "role"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationRolesCreate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationRoleDelete operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationRoleDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "role_id" -------------
	var roleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "role_id", runtime.ParamLocationPath, chi.URLParam(r, "role_id"), &roleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization", "role"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationRoleDelete(w, r, id, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationRoleGet operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationRoleGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "role_id" -------------
	var roleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "role_id", runtime.ParamLocationPath, chi.URLParam(r, "role_id"), &roleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization.read", "role.read"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationRoleGet(w, r, id, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationRoleUpdate operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationRoleUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "role_id" -------------
	var roleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "role_id", runtime.ParamLocationPath, chi.URLParam(r, "role_id"), &roleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization", "role"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationRoleUpdate(w, r, id, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationDelete operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization"})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1OrganizationDeleteParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationDelete(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationGet operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization.read"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationGet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationUpdate operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationMembersGet operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationMembersGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization.read", "user.read"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationMembersGet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationMembersAdd operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationMembersAdd(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationMembersAdd(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationMemberRemove operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationMemberRemove(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationMemberRemove(w, r, id, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationRoleMembersGet operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationRoleMembersGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "role_id" -------------
	var roleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "role_id", runtime.ParamLocationPath, chi.URLParam(r, "role_id"), &roleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization.read", "role.read", "user.read"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationRoleMembersGet(w, r, id, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationRoleMembersAdd operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationRoleMembersAdd(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "role_id" -------------
	var roleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "role_id", runtime.ParamLocationPath, chi.URLParam(r, "role_id"), &roleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization", "role"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationRoleMembersAdd(w, r, id, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationRoleMemberRemove operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationRoleMemberRemove(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "role_id" -------------
	var roleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "role_id", runtime.ParamLocationPath, chi.URLParam(r, "role_id"), &roleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization", "role"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationRoleMemberRemove(w, r, id, roleId, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1PermissionsCreate operation middleware
func (siw *ServerInterfaceWrapper) V1PermissionsCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1PermissionsCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1PermissionHasRelations operation middleware
func (siw *ServerInterfaceWrapper) V1PermissionHasRelations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "resourceId" -------------
	var resourceId ResourceId

	err = runtime.BindStyledParameterWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, chi.URLParam(r, "resourceId"), &resourceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1PermissionHasRelations(w, r, resourceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1PermissionHasSystemRole operation middleware
func (siw *ServerInterfaceWrapper) V1PermissionHasSystemRole(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1PermissionHasSystemRoleParams

	// ------------- Required query parameter "roles" -------------

	if paramValue := r.URL.Query().Get("roles"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "roles"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "roles", r.URL.Query(), &params.Roles)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "roles", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1PermissionHasSystemRole(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1PermissionResourceGet operation middleware
func (siw *ServerInterfaceWrapper) V1PermissionResourceGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "resourceId" -------------
	var resourceId ResourceId

	err = runtime.BindStyledParameterWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, chi.URLParam(r, "resourceId"), &resourceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1PermissionResourceGet(w, r, resourceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1PermissionDelete operation middleware
func (siw *ServerInterfaceWrapper) V1PermissionDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1PermissionDelete(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1PermissionGet operation middleware
func (siw *ServerInterfaceWrapper) V1PermissionGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1PermissionGet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1PermissionUpdate operation middleware
func (siw *ServerInterfaceWrapper) V1PermissionUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1PermissionUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1SystemHealth operation middleware
func (siw *ServerInterfaceWrapper) V1SystemHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1SystemHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1SystemHeartbeat operation middleware
func (siw *ServerInterfaceWrapper) V1SystemHeartbeat(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1SystemHeartbeat(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1SystemLicense operation middleware
func (siw *ServerInterfaceWrapper) V1SystemLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1SystemLicense(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1SystemVersion operation middleware
func (siw *ServerInterfaceWrapper) V1SystemVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1SystemVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1TodosGet operation middleware
func (siw *ServerInterfaceWrapper) V1TodosGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"todo.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1TodosGetParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "completed" -------------

	err = runtime.BindQueryParameter("form", true, false, "completed", r.URL.Query(), &params.Completed)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "completed", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1TodosGet(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1TodosCreate operation middleware
func (siw *ServerInterfaceWrapper) V1TodosCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"todo"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1TodosCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1TodoDelete operation middleware
func (siw *ServerInterfaceWrapper) V1TodoDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"todo"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1TodoDelete(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1TodoGet operation middleware
func (siw *ServerInterfaceWrapper) V1TodoGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"todo.read"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1TodoGet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1TodoUpdate operation middleware
func (siw *ServerInterfaceWrapper) V1TodoUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"todo"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1TodoUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1UsersGet operation middleware
func (siw *ServerInterfaceWrapper) V1UsersGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"user.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1UsersGetParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1UsersGet(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1UsersCreate operation middleware
func (siw *ServerInterfaceWrapper) V1UsersCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"user"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1UsersCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1UserDelete operation middleware
func (siw *ServerInterfaceWrapper) V1UserDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"user"})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1UserDeleteParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1UserDelete(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1UserGet operation middleware
func (siw *ServerInterfaceWrapper) V1UserGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"user.read"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1UserGet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1UserUpdate operation middleware
func (siw *ServerInterfaceWrapper) V1UserUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"user"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1UserUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/organizations", wrapper.V1OrganizationsGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/organizations", wrapper.V1OrganizationsCreate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/organizations/${id}/roles", wrapper.V1OrganizationRolesGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/organizations/${id}/roles", wrapper.V1OrganizationRolesCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/organizations/${id}/roles/{role_id}", wrapper.V1OrganizationRoleDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/organizations/${id}/roles/{role_id}", wrapper.V1OrganizationRoleGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v1/organizations/${id}/roles/{role_id}", wrapper.V1OrganizationRoleUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/organizations/{id}", wrapper.V1OrganizationDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/organizations/{id}", wrapper.V1OrganizationGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v1/organizations/{id}", wrapper.V1OrganizationUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/organizations/{id}/members", wrapper.V1OrganizationMembersGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/organizations/{id}/members", wrapper.V1OrganizationMembersAdd)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/organizations/{id}/members/{user_id}", wrapper.V1OrganizationMemberRemove)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/organizations/{id}/roles/{role_id}/members", wrapper.V1OrganizationRoleMembersGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/organizations/{id}/roles/{role_id}/members", wrapper.V1OrganizationRoleMembersAdd)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/organizations/{id}/roles/{role_id}/members/{user_id}", wrapper.V1OrganizationRoleMemberRemove)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/permissions", wrapper.V1PermissionsCreate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/permissions/has-relations/{resourceId}", wrapper.V1PermissionHasRelations)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/permissions/has-system-role", wrapper.V1PermissionHasSystemRole)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/permissions/resources/{resourceId}", wrapper.V1PermissionResourceGet)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/permissions/{id}", wrapper.V1PermissionDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/permissions/{id}", wrapper.V1PermissionGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v1/permissions/{id}", wrapper.V1PermissionUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/system/health", wrapper.V1SystemHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/system/heartbeat", wrapper.V1SystemHeartbeat)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/system/license", wrapper.V1SystemLicense)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/system/version", wrapper.V1SystemVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/todos", wrapper.V1TodosGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/todos", wrapper.V1TodosCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/todos/{id}", wrapper.V1TodoDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/todos/{id}", wrapper.V1TodoGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v1/todos/{id}", wrapper.V1TodoUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/users", wrapper.V1UsersGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/users", wrapper.V1UsersCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/users/{id}", wrapper.V1UserDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/users/{id}", wrapper.V1UserGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v1/users/{id}", wrapper.V1UserUpdate)
	})

	return r
}

type N201JSONResponse struct {
	// Id ID of the newly created resource.
	Id string `json:"id"`
}

type N400JSONResponse HTTPError

type N401JSONResponse HTTPError

type N403JSONResponse HTTPError

type N404JSONResponse HTTPError

type N500JSONResponse HTTPError

type V1OrganizationsGetRequestObject struct {
	Params V1OrganizationsGetParams
}

type V1OrganizationsGetResponseObject interface {
	VisitV1OrganizationsGetResponse(w http.ResponseWriter) error
}

type V1OrganizationsGet200JSONResponse []Organization

func (response V1OrganizationsGet200JSONResponse) VisitV1OrganizationsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsGet401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationsGet401JSONResponse) VisitV1OrganizationsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsGet403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationsGet403JSONResponse) VisitV1OrganizationsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsGet500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationsGet500JSONResponse) VisitV1OrganizationsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsCreateRequestObject struct {
	Body *V1OrganizationsCreateJSONRequestBody
}

type V1OrganizationsCreateResponseObject interface {
	VisitV1OrganizationsCreateResponse(w http.ResponseWriter) error
}

type V1OrganizationsCreate201JSONResponse struct{ N201JSONResponse }

func (response V1OrganizationsCreate201JSONResponse) VisitV1OrganizationsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsCreate400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationsCreate400JSONResponse) VisitV1OrganizationsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsCreate401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationsCreate401JSONResponse) VisitV1OrganizationsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsCreate403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationsCreate403JSONResponse) VisitV1OrganizationsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsCreate500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationsCreate500JSONResponse) VisitV1OrganizationsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRolesGetRequestObject struct {
	Id     Id `json:"id"`
	Params V1OrganizationRolesGetParams
}

type V1OrganizationRolesGetResponseObject interface {
	VisitV1OrganizationRolesGetResponse(w http.ResponseWriter) error
}

type V1OrganizationRolesGet200JSONResponse []Role

func (response V1OrganizationRolesGet200JSONResponse) VisitV1OrganizationRolesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRolesGet400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationRolesGet400JSONResponse) VisitV1OrganizationRolesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRolesGet401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationRolesGet401JSONResponse) VisitV1OrganizationRolesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRolesGet403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationRolesGet403JSONResponse) VisitV1OrganizationRolesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRolesGet404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationRolesGet404JSONResponse) VisitV1OrganizationRolesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRolesGet500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationRolesGet500JSONResponse) VisitV1OrganizationRolesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRolesCreateRequestObject struct {
	Id   Id `json:"id"`
	Body *V1OrganizationRolesCreateJSONRequestBody
}

type V1OrganizationRolesCreateResponseObject interface {
	VisitV1OrganizationRolesCreateResponse(w http.ResponseWriter) error
}

type V1OrganizationRolesCreate201JSONResponse struct{ N201JSONResponse }

func (response V1OrganizationRolesCreate201JSONResponse) VisitV1OrganizationRolesCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRolesCreate400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationRolesCreate400JSONResponse) VisitV1OrganizationRolesCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRolesCreate401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationRolesCreate401JSONResponse) VisitV1OrganizationRolesCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRolesCreate403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationRolesCreate403JSONResponse) VisitV1OrganizationRolesCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRolesCreate404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationRolesCreate404JSONResponse) VisitV1OrganizationRolesCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRolesCreate500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationRolesCreate500JSONResponse) VisitV1OrganizationRolesCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleDeleteRequestObject struct {
	Id     Id     `json:"id"`
	RoleId string `json:"role_id"`
}

type V1OrganizationRoleDeleteResponseObject interface {
	VisitV1OrganizationRoleDeleteResponse(w http.ResponseWriter) error
}

type V1OrganizationRoleDelete204Response struct {
}

func (response V1OrganizationRoleDelete204Response) VisitV1OrganizationRoleDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type V1OrganizationRoleDelete400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationRoleDelete400JSONResponse) VisitV1OrganizationRoleDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleDelete401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationRoleDelete401JSONResponse) VisitV1OrganizationRoleDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleDelete403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationRoleDelete403JSONResponse) VisitV1OrganizationRoleDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleDelete404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationRoleDelete404JSONResponse) VisitV1OrganizationRoleDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleDelete500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationRoleDelete500JSONResponse) VisitV1OrganizationRoleDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleGetRequestObject struct {
	Id     Id     `json:"id"`
	RoleId string `json:"role_id"`
}

type V1OrganizationRoleGetResponseObject interface {
	VisitV1OrganizationRoleGetResponse(w http.ResponseWriter) error
}

type V1OrganizationRoleGet200JSONResponse Role

func (response V1OrganizationRoleGet200JSONResponse) VisitV1OrganizationRoleGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleGet400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationRoleGet400JSONResponse) VisitV1OrganizationRoleGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleGet401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationRoleGet401JSONResponse) VisitV1OrganizationRoleGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleGet403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationRoleGet403JSONResponse) VisitV1OrganizationRoleGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleGet404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationRoleGet404JSONResponse) VisitV1OrganizationRoleGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleGet500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationRoleGet500JSONResponse) VisitV1OrganizationRoleGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleUpdateRequestObject struct {
	Id     Id     `json:"id"`
	RoleId string `json:"role_id"`
	Body   *V1OrganizationRoleUpdateJSONRequestBody
}

type V1OrganizationRoleUpdateResponseObject interface {
	VisitV1OrganizationRoleUpdateResponse(w http.ResponseWriter) error
}

type V1OrganizationRoleUpdate200JSONResponse Role

func (response V1OrganizationRoleUpdate200JSONResponse) VisitV1OrganizationRoleUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleUpdate400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationRoleUpdate400JSONResponse) VisitV1OrganizationRoleUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleUpdate401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationRoleUpdate401JSONResponse) VisitV1OrganizationRoleUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleUpdate403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationRoleUpdate403JSONResponse) VisitV1OrganizationRoleUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleUpdate404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationRoleUpdate404JSONResponse) VisitV1OrganizationRoleUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleUpdate500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationRoleUpdate500JSONResponse) VisitV1OrganizationRoleUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationDeleteRequestObject struct {
	Id     Id `json:"id"`
	Params V1OrganizationDeleteParams
}

type V1OrganizationDeleteResponseObject interface {
	VisitV1OrganizationDeleteResponse(w http.ResponseWriter) error
}

type V1OrganizationDelete204Response struct {
}

func (response V1OrganizationDelete204Response) VisitV1OrganizationDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type V1OrganizationDelete400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationDelete400JSONResponse) VisitV1OrganizationDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationDelete401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationDelete401JSONResponse) VisitV1OrganizationDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationDelete403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationDelete403JSONResponse) VisitV1OrganizationDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationDelete404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationDelete404JSONResponse) VisitV1OrganizationDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationDelete500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationDelete500JSONResponse) VisitV1OrganizationDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationGetRequestObject struct {
	Id Id `json:"id"`
}

type V1OrganizationGetResponseObject interface {
	VisitV1OrganizationGetResponse(w http.ResponseWriter) error
}

type V1OrganizationGet200JSONResponse Organization

func (response V1OrganizationGet200JSONResponse) VisitV1OrganizationGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationGet400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationGet400JSONResponse) VisitV1OrganizationGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationGet401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationGet401JSONResponse) VisitV1OrganizationGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationGet403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationGet403JSONResponse) VisitV1OrganizationGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationGet404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationGet404JSONResponse) VisitV1OrganizationGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationGet500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationGet500JSONResponse) VisitV1OrganizationGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationUpdateRequestObject struct {
	Id   Id `json:"id"`
	Body *V1OrganizationUpdateJSONRequestBody
}

type V1OrganizationUpdateResponseObject interface {
	VisitV1OrganizationUpdateResponse(w http.ResponseWriter) error
}

type V1OrganizationUpdate200JSONResponse Organization

func (response V1OrganizationUpdate200JSONResponse) VisitV1OrganizationUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationUpdate400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationUpdate400JSONResponse) VisitV1OrganizationUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationUpdate401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationUpdate401JSONResponse) VisitV1OrganizationUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationUpdate403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationUpdate403JSONResponse) VisitV1OrganizationUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationUpdate404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationUpdate404JSONResponse) VisitV1OrganizationUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationUpdate500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationUpdate500JSONResponse) VisitV1OrganizationUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersGetRequestObject struct {
	Id Id `json:"id"`
}

type V1OrganizationMembersGetResponseObject interface {
	VisitV1OrganizationMembersGetResponse(w http.ResponseWriter) error
}

type V1OrganizationMembersGet200JSONResponse []User

func (response V1OrganizationMembersGet200JSONResponse) VisitV1OrganizationMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersGet400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationMembersGet400JSONResponse) VisitV1OrganizationMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersGet401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationMembersGet401JSONResponse) VisitV1OrganizationMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersGet403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationMembersGet403JSONResponse) VisitV1OrganizationMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersGet404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationMembersGet404JSONResponse) VisitV1OrganizationMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersGet500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationMembersGet500JSONResponse) VisitV1OrganizationMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersAddRequestObject struct {
	Id   Id `json:"id"`
	Body *V1OrganizationMembersAddJSONRequestBody
}

type V1OrganizationMembersAddResponseObject interface {
	VisitV1OrganizationMembersAddResponse(w http.ResponseWriter) error
}

type V1OrganizationMembersAdd201JSONResponse struct{ N201JSONResponse }

func (response V1OrganizationMembersAdd201JSONResponse) VisitV1OrganizationMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersAdd400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationMembersAdd400JSONResponse) VisitV1OrganizationMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersAdd401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationMembersAdd401JSONResponse) VisitV1OrganizationMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersAdd403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationMembersAdd403JSONResponse) VisitV1OrganizationMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersAdd404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationMembersAdd404JSONResponse) VisitV1OrganizationMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersAdd500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationMembersAdd500JSONResponse) VisitV1OrganizationMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMemberRemoveRequestObject struct {
	Id     Id     `json:"id"`
	UserId string `json:"user_id"`
}

type V1OrganizationMemberRemoveResponseObject interface {
	VisitV1OrganizationMemberRemoveResponse(w http.ResponseWriter) error
}

type V1OrganizationMemberRemove204Response struct {
}

func (response V1OrganizationMemberRemove204Response) VisitV1OrganizationMemberRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type V1OrganizationMemberRemove400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationMemberRemove400JSONResponse) VisitV1OrganizationMemberRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMemberRemove401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationMemberRemove401JSONResponse) VisitV1OrganizationMemberRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMemberRemove403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationMemberRemove403JSONResponse) VisitV1OrganizationMemberRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMemberRemove404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationMemberRemove404JSONResponse) VisitV1OrganizationMemberRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMemberRemove500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationMemberRemove500JSONResponse) VisitV1OrganizationMemberRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMembersGetRequestObject struct {
	Id     Id     `json:"id"`
	RoleId string `json:"role_id"`
}

type V1OrganizationRoleMembersGetResponseObject interface {
	VisitV1OrganizationRoleMembersGetResponse(w http.ResponseWriter) error
}

type V1OrganizationRoleMembersGet200JSONResponse []User

func (response V1OrganizationRoleMembersGet200JSONResponse) VisitV1OrganizationRoleMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMembersGet400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationRoleMembersGet400JSONResponse) VisitV1OrganizationRoleMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMembersGet401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationRoleMembersGet401JSONResponse) VisitV1OrganizationRoleMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMembersGet403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationRoleMembersGet403JSONResponse) VisitV1OrganizationRoleMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMembersGet404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationRoleMembersGet404JSONResponse) VisitV1OrganizationRoleMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMembersGet500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationRoleMembersGet500JSONResponse) VisitV1OrganizationRoleMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMembersAddRequestObject struct {
	Id     Id     `json:"id"`
	RoleId string `json:"role_id"`
	Body   *V1OrganizationRoleMembersAddJSONRequestBody
}

type V1OrganizationRoleMembersAddResponseObject interface {
	VisitV1OrganizationRoleMembersAddResponse(w http.ResponseWriter) error
}

type V1OrganizationRoleMembersAdd201JSONResponse struct{ N201JSONResponse }

func (response V1OrganizationRoleMembersAdd201JSONResponse) VisitV1OrganizationRoleMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMembersAdd400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationRoleMembersAdd400JSONResponse) VisitV1OrganizationRoleMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMembersAdd401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationRoleMembersAdd401JSONResponse) VisitV1OrganizationRoleMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMembersAdd403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationRoleMembersAdd403JSONResponse) VisitV1OrganizationRoleMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMembersAdd404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationRoleMembersAdd404JSONResponse) VisitV1OrganizationRoleMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMembersAdd500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationRoleMembersAdd500JSONResponse) VisitV1OrganizationRoleMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMemberRemoveRequestObject struct {
	Id     Id     `json:"id"`
	RoleId string `json:"role_id"`
	UserId string `json:"user_id"`
}

type V1OrganizationRoleMemberRemoveResponseObject interface {
	VisitV1OrganizationRoleMemberRemoveResponse(w http.ResponseWriter) error
}

type V1OrganizationRoleMemberRemove204Response struct {
}

func (response V1OrganizationRoleMemberRemove204Response) VisitV1OrganizationRoleMemberRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type V1OrganizationRoleMemberRemove400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationRoleMemberRemove400JSONResponse) VisitV1OrganizationRoleMemberRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMemberRemove401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationRoleMemberRemove401JSONResponse) VisitV1OrganizationRoleMemberRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMemberRemove403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationRoleMemberRemove403JSONResponse) VisitV1OrganizationRoleMemberRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMemberRemove404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationRoleMemberRemove404JSONResponse) VisitV1OrganizationRoleMemberRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationRoleMemberRemove500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationRoleMemberRemove500JSONResponse) VisitV1OrganizationRoleMemberRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionsCreateRequestObject struct {
	Body *V1PermissionsCreateJSONRequestBody
}

type V1PermissionsCreateResponseObject interface {
	VisitV1PermissionsCreateResponse(w http.ResponseWriter) error
}

type V1PermissionsCreate201JSONResponse struct{ N201JSONResponse }

func (response V1PermissionsCreate201JSONResponse) VisitV1PermissionsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionsCreate400JSONResponse struct{ N400JSONResponse }

func (response V1PermissionsCreate400JSONResponse) VisitV1PermissionsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionsCreate401JSONResponse struct{ N401JSONResponse }

func (response V1PermissionsCreate401JSONResponse) VisitV1PermissionsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionsCreate403JSONResponse struct{ N403JSONResponse }

func (response V1PermissionsCreate403JSONResponse) VisitV1PermissionsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionsCreate500JSONResponse struct{ N500JSONResponse }

func (response V1PermissionsCreate500JSONResponse) VisitV1PermissionsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionHasRelationsRequestObject struct {
	ResourceId ResourceId `json:"resourceId"`
}

type V1PermissionHasRelationsResponseObject interface {
	VisitV1PermissionHasRelationsResponse(w http.ResponseWriter) error
}

type V1PermissionHasRelations200JSONResponse bool

func (response V1PermissionHasRelations200JSONResponse) VisitV1PermissionHasRelationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionHasRelations400JSONResponse struct{ N400JSONResponse }

func (response V1PermissionHasRelations400JSONResponse) VisitV1PermissionHasRelationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionHasRelations401JSONResponse struct{ N401JSONResponse }

func (response V1PermissionHasRelations401JSONResponse) VisitV1PermissionHasRelationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionHasRelations404JSONResponse struct{ N404JSONResponse }

func (response V1PermissionHasRelations404JSONResponse) VisitV1PermissionHasRelationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionHasRelations500JSONResponse struct{ N500JSONResponse }

func (response V1PermissionHasRelations500JSONResponse) VisitV1PermissionHasRelationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionHasSystemRoleRequestObject struct {
	Params V1PermissionHasSystemRoleParams
}

type V1PermissionHasSystemRoleResponseObject interface {
	VisitV1PermissionHasSystemRoleResponse(w http.ResponseWriter) error
}

type V1PermissionHasSystemRole200JSONResponse bool

func (response V1PermissionHasSystemRole200JSONResponse) VisitV1PermissionHasSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionHasSystemRole400JSONResponse struct{ N400JSONResponse }

func (response V1PermissionHasSystemRole400JSONResponse) VisitV1PermissionHasSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionHasSystemRole401JSONResponse struct{ N401JSONResponse }

func (response V1PermissionHasSystemRole401JSONResponse) VisitV1PermissionHasSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionHasSystemRole500JSONResponse struct{ N500JSONResponse }

func (response V1PermissionHasSystemRole500JSONResponse) VisitV1PermissionHasSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionResourceGetRequestObject struct {
	ResourceId ResourceId `json:"resourceId"`
}

type V1PermissionResourceGetResponseObject interface {
	VisitV1PermissionResourceGetResponse(w http.ResponseWriter) error
}

type V1PermissionResourceGet200JSONResponse []Permission

func (response V1PermissionResourceGet200JSONResponse) VisitV1PermissionResourceGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionResourceGet400JSONResponse struct{ N400JSONResponse }

func (response V1PermissionResourceGet400JSONResponse) VisitV1PermissionResourceGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionResourceGet401JSONResponse struct{ N401JSONResponse }

func (response V1PermissionResourceGet401JSONResponse) VisitV1PermissionResourceGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionResourceGet403JSONResponse struct{ N403JSONResponse }

func (response V1PermissionResourceGet403JSONResponse) VisitV1PermissionResourceGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionResourceGet404JSONResponse struct{ N404JSONResponse }

func (response V1PermissionResourceGet404JSONResponse) VisitV1PermissionResourceGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionResourceGet500JSONResponse struct{ N500JSONResponse }

func (response V1PermissionResourceGet500JSONResponse) VisitV1PermissionResourceGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionDeleteRequestObject struct {
	Id Id `json:"id"`
}

type V1PermissionDeleteResponseObject interface {
	VisitV1PermissionDeleteResponse(w http.ResponseWriter) error
}

type V1PermissionDelete204Response struct {
}

func (response V1PermissionDelete204Response) VisitV1PermissionDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type V1PermissionDelete400JSONResponse struct{ N400JSONResponse }

func (response V1PermissionDelete400JSONResponse) VisitV1PermissionDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionDelete401JSONResponse struct{ N401JSONResponse }

func (response V1PermissionDelete401JSONResponse) VisitV1PermissionDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionDelete403JSONResponse struct{ N403JSONResponse }

func (response V1PermissionDelete403JSONResponse) VisitV1PermissionDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionDelete404JSONResponse struct{ N404JSONResponse }

func (response V1PermissionDelete404JSONResponse) VisitV1PermissionDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionDelete500JSONResponse struct{ N500JSONResponse }

func (response V1PermissionDelete500JSONResponse) VisitV1PermissionDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionGetRequestObject struct {
	Id Id `json:"id"`
}

type V1PermissionGetResponseObject interface {
	VisitV1PermissionGetResponse(w http.ResponseWriter) error
}

type V1PermissionGet200JSONResponse Permission

func (response V1PermissionGet200JSONResponse) VisitV1PermissionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionGet400JSONResponse struct{ N400JSONResponse }

func (response V1PermissionGet400JSONResponse) VisitV1PermissionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionGet401JSONResponse struct{ N401JSONResponse }

func (response V1PermissionGet401JSONResponse) VisitV1PermissionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionGet404JSONResponse struct{ N404JSONResponse }

func (response V1PermissionGet404JSONResponse) VisitV1PermissionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionGet500JSONResponse struct{ N500JSONResponse }

func (response V1PermissionGet500JSONResponse) VisitV1PermissionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionUpdateRequestObject struct {
	Id   Id `json:"id"`
	Body *V1PermissionUpdateJSONRequestBody
}

type V1PermissionUpdateResponseObject interface {
	VisitV1PermissionUpdateResponse(w http.ResponseWriter) error
}

type V1PermissionUpdate200JSONResponse Permission

func (response V1PermissionUpdate200JSONResponse) VisitV1PermissionUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionUpdate400JSONResponse struct{ N400JSONResponse }

func (response V1PermissionUpdate400JSONResponse) VisitV1PermissionUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionUpdate401JSONResponse struct{ N401JSONResponse }

func (response V1PermissionUpdate401JSONResponse) VisitV1PermissionUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionUpdate403JSONResponse struct{ N403JSONResponse }

func (response V1PermissionUpdate403JSONResponse) VisitV1PermissionUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionUpdate404JSONResponse struct{ N404JSONResponse }

func (response V1PermissionUpdate404JSONResponse) VisitV1PermissionUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1PermissionUpdate500JSONResponse struct{ N500JSONResponse }

func (response V1PermissionUpdate500JSONResponse) VisitV1PermissionUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemHealthRequestObject struct {
}

type V1SystemHealthResponseObject interface {
	VisitV1SystemHealthResponse(w http.ResponseWriter) error
}

type V1SystemHealth200JSONResponse SystemHealth

func (response V1SystemHealth200JSONResponse) VisitV1SystemHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemHealth500JSONResponse struct{ N500JSONResponse }

func (response V1SystemHealth500JSONResponse) VisitV1SystemHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemHeartbeatRequestObject struct {
}

type V1SystemHeartbeatResponseObject interface {
	VisitV1SystemHeartbeatResponse(w http.ResponseWriter) error
}

type V1SystemHeartbeat200TextResponse string

func (response V1SystemHeartbeat200TextResponse) VisitV1SystemHeartbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type V1SystemHeartbeat500JSONResponse struct{ N500JSONResponse }

func (response V1SystemHeartbeat500JSONResponse) VisitV1SystemHeartbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemLicenseRequestObject struct {
}

type V1SystemLicenseResponseObject interface {
	VisitV1SystemLicenseResponse(w http.ResponseWriter) error
}

type V1SystemLicense200JSONResponse SystemLicense

func (response V1SystemLicense200JSONResponse) VisitV1SystemLicenseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemLicense403JSONResponse struct{ N403JSONResponse }

func (response V1SystemLicense403JSONResponse) VisitV1SystemLicenseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemLicense500JSONResponse struct{ N500JSONResponse }

func (response V1SystemLicense500JSONResponse) VisitV1SystemLicenseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemVersionRequestObject struct {
}

type V1SystemVersionResponseObject interface {
	VisitV1SystemVersionResponse(w http.ResponseWriter) error
}

type V1SystemVersion200JSONResponse SystemVersion

func (response V1SystemVersion200JSONResponse) VisitV1SystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemVersion500JSONResponse struct{ N500JSONResponse }

func (response V1SystemVersion500JSONResponse) VisitV1SystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosGetRequestObject struct {
	Params V1TodosGetParams
}

type V1TodosGetResponseObject interface {
	VisitV1TodosGetResponse(w http.ResponseWriter) error
}

type V1TodosGet200JSONResponse []Todo

func (response V1TodosGet200JSONResponse) VisitV1TodosGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosGet401JSONResponse struct{ N401JSONResponse }

func (response V1TodosGet401JSONResponse) VisitV1TodosGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosGet403JSONResponse struct{ N403JSONResponse }

func (response V1TodosGet403JSONResponse) VisitV1TodosGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosGet404JSONResponse struct{ N404JSONResponse }

func (response V1TodosGet404JSONResponse) VisitV1TodosGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosGet500JSONResponse struct{ N500JSONResponse }

func (response V1TodosGet500JSONResponse) VisitV1TodosGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosCreateRequestObject struct {
	Body *V1TodosCreateJSONRequestBody
}

type V1TodosCreateResponseObject interface {
	VisitV1TodosCreateResponse(w http.ResponseWriter) error
}

type V1TodosCreate201JSONResponse struct{ N201JSONResponse }

func (response V1TodosCreate201JSONResponse) VisitV1TodosCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosCreate400JSONResponse struct{ N400JSONResponse }

func (response V1TodosCreate400JSONResponse) VisitV1TodosCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosCreate401JSONResponse struct{ N401JSONResponse }

func (response V1TodosCreate401JSONResponse) VisitV1TodosCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosCreate403JSONResponse struct{ N403JSONResponse }

func (response V1TodosCreate403JSONResponse) VisitV1TodosCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosCreate500JSONResponse struct{ N500JSONResponse }

func (response V1TodosCreate500JSONResponse) VisitV1TodosCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoDeleteRequestObject struct {
	Id Id `json:"id"`
}

type V1TodoDeleteResponseObject interface {
	VisitV1TodoDeleteResponse(w http.ResponseWriter) error
}

type V1TodoDelete204Response struct {
}

func (response V1TodoDelete204Response) VisitV1TodoDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type V1TodoDelete400JSONResponse struct{ N400JSONResponse }

func (response V1TodoDelete400JSONResponse) VisitV1TodoDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoDelete401JSONResponse struct{ N401JSONResponse }

func (response V1TodoDelete401JSONResponse) VisitV1TodoDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoDelete403JSONResponse struct{ N403JSONResponse }

func (response V1TodoDelete403JSONResponse) VisitV1TodoDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoDelete404JSONResponse struct{ N404JSONResponse }

func (response V1TodoDelete404JSONResponse) VisitV1TodoDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoDelete500JSONResponse struct{ N500JSONResponse }

func (response V1TodoDelete500JSONResponse) VisitV1TodoDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoGetRequestObject struct {
	Id Id `json:"id"`
}

type V1TodoGetResponseObject interface {
	VisitV1TodoGetResponse(w http.ResponseWriter) error
}

type V1TodoGet200JSONResponse Todo

func (response V1TodoGet200JSONResponse) VisitV1TodoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoGet400JSONResponse struct{ N400JSONResponse }

func (response V1TodoGet400JSONResponse) VisitV1TodoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoGet401JSONResponse struct{ N401JSONResponse }

func (response V1TodoGet401JSONResponse) VisitV1TodoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoGet403JSONResponse struct{ N403JSONResponse }

func (response V1TodoGet403JSONResponse) VisitV1TodoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoGet404JSONResponse struct{ N404JSONResponse }

func (response V1TodoGet404JSONResponse) VisitV1TodoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoGet500JSONResponse struct{ N500JSONResponse }

func (response V1TodoGet500JSONResponse) VisitV1TodoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoUpdateRequestObject struct {
	Id   Id `json:"id"`
	Body *V1TodoUpdateJSONRequestBody
}

type V1TodoUpdateResponseObject interface {
	VisitV1TodoUpdateResponse(w http.ResponseWriter) error
}

type V1TodoUpdate200JSONResponse Todo

func (response V1TodoUpdate200JSONResponse) VisitV1TodoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoUpdate400JSONResponse struct{ N400JSONResponse }

func (response V1TodoUpdate400JSONResponse) VisitV1TodoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoUpdate401JSONResponse struct{ N401JSONResponse }

func (response V1TodoUpdate401JSONResponse) VisitV1TodoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoUpdate403JSONResponse struct{ N403JSONResponse }

func (response V1TodoUpdate403JSONResponse) VisitV1TodoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoUpdate404JSONResponse struct{ N404JSONResponse }

func (response V1TodoUpdate404JSONResponse) VisitV1TodoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoUpdate500JSONResponse struct{ N500JSONResponse }

func (response V1TodoUpdate500JSONResponse) VisitV1TodoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersGetRequestObject struct {
	Params V1UsersGetParams
}

type V1UsersGetResponseObject interface {
	VisitV1UsersGetResponse(w http.ResponseWriter) error
}

type V1UsersGet200JSONResponse []User

func (response V1UsersGet200JSONResponse) VisitV1UsersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersGet401JSONResponse struct{ N401JSONResponse }

func (response V1UsersGet401JSONResponse) VisitV1UsersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersGet403JSONResponse struct{ N403JSONResponse }

func (response V1UsersGet403JSONResponse) VisitV1UsersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersGet500JSONResponse struct{ N500JSONResponse }

func (response V1UsersGet500JSONResponse) VisitV1UsersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersCreateRequestObject struct {
	Body *V1UsersCreateJSONRequestBody
}

type V1UsersCreateResponseObject interface {
	VisitV1UsersCreateResponse(w http.ResponseWriter) error
}

type V1UsersCreate201JSONResponse struct{ N201JSONResponse }

func (response V1UsersCreate201JSONResponse) VisitV1UsersCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersCreate400JSONResponse struct{ N400JSONResponse }

func (response V1UsersCreate400JSONResponse) VisitV1UsersCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersCreate401JSONResponse struct{ N401JSONResponse }

func (response V1UsersCreate401JSONResponse) VisitV1UsersCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersCreate403JSONResponse struct{ N403JSONResponse }

func (response V1UsersCreate403JSONResponse) VisitV1UsersCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersCreate500JSONResponse struct{ N500JSONResponse }

func (response V1UsersCreate500JSONResponse) VisitV1UsersCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1UserDeleteRequestObject struct {
	Id     Id `json:"id"`
	Params V1UserDeleteParams
}

type V1UserDeleteResponseObject interface {
	VisitV1UserDeleteResponse(w http.ResponseWriter) error
}

type V1UserDelete204Response struct {
}

func (response V1UserDelete204Response) VisitV1UserDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type V1UserDelete400JSONResponse struct{ N400JSONResponse }

func (response V1UserDelete400JSONResponse) VisitV1UserDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1UserDelete401JSONResponse struct{ N401JSONResponse }

func (response V1UserDelete401JSONResponse) VisitV1UserDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1UserDelete403JSONResponse struct{ N403JSONResponse }

func (response V1UserDelete403JSONResponse) VisitV1UserDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1UserDelete404JSONResponse struct{ N404JSONResponse }

func (response V1UserDelete404JSONResponse) VisitV1UserDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1UserDelete500JSONResponse struct{ N500JSONResponse }

func (response V1UserDelete500JSONResponse) VisitV1UserDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1UserGetRequestObject struct {
	Id Id `json:"id"`
}

type V1UserGetResponseObject interface {
	VisitV1UserGetResponse(w http.ResponseWriter) error
}

type V1UserGet200JSONResponse User

func (response V1UserGet200JSONResponse) VisitV1UserGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1UserGet400JSONResponse struct{ N400JSONResponse }

func (response V1UserGet400JSONResponse) VisitV1UserGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1UserGet401JSONResponse struct{ N401JSONResponse }

func (response V1UserGet401JSONResponse) VisitV1UserGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1UserGet403JSONResponse struct{ N403JSONResponse }

func (response V1UserGet403JSONResponse) VisitV1UserGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1UserGet404JSONResponse struct{ N404JSONResponse }

func (response V1UserGet404JSONResponse) VisitV1UserGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1UserGet500JSONResponse struct{ N500JSONResponse }

func (response V1UserGet500JSONResponse) VisitV1UserGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1UserUpdateRequestObject struct {
	Id   Id `json:"id"`
	Body *V1UserUpdateJSONRequestBody
}

type V1UserUpdateResponseObject interface {
	VisitV1UserUpdateResponse(w http.ResponseWriter) error
}

type V1UserUpdate200JSONResponse User

func (response V1UserUpdate200JSONResponse) VisitV1UserUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1UserUpdate400JSONResponse struct{ N400JSONResponse }

func (response V1UserUpdate400JSONResponse) VisitV1UserUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1UserUpdate401JSONResponse struct{ N401JSONResponse }

func (response V1UserUpdate401JSONResponse) VisitV1UserUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1UserUpdate403JSONResponse struct{ N403JSONResponse }

func (response V1UserUpdate403JSONResponse) VisitV1UserUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1UserUpdate404JSONResponse struct{ N404JSONResponse }

func (response V1UserUpdate404JSONResponse) VisitV1UserUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1UserUpdate500JSONResponse struct{ N500JSONResponse }

func (response V1UserUpdate500JSONResponse) VisitV1UserUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get organizations
	// (GET /v1/organizations)
	V1OrganizationsGet(ctx context.Context, request V1OrganizationsGetRequestObject) (V1OrganizationsGetResponseObject, error)
	// Create organization
	// (POST /v1/organizations)
	V1OrganizationsCreate(ctx context.Context, request V1OrganizationsCreateRequestObject) (V1OrganizationsCreateResponseObject, error)
	// Get organization roles
	// (GET /v1/organizations/${id}/roles)
	V1OrganizationRolesGet(ctx context.Context, request V1OrganizationRolesGetRequestObject) (V1OrganizationRolesGetResponseObject, error)
	// Create a new role in the organization
	// (POST /v1/organizations/${id}/roles)
	V1OrganizationRolesCreate(ctx context.Context, request V1OrganizationRolesCreateRequestObject) (V1OrganizationRolesCreateResponseObject, error)
	// Delete organization role
	// (DELETE /v1/organizations/${id}/roles/{role_id})
	V1OrganizationRoleDelete(ctx context.Context, request V1OrganizationRoleDeleteRequestObject) (V1OrganizationRoleDeleteResponseObject, error)
	// Get organization role
	// (GET /v1/organizations/${id}/roles/{role_id})
	V1OrganizationRoleGet(ctx context.Context, request V1OrganizationRoleGetRequestObject) (V1OrganizationRoleGetResponseObject, error)
	// Update organization role
	// (PATCH /v1/organizations/${id}/roles/{role_id})
	V1OrganizationRoleUpdate(ctx context.Context, request V1OrganizationRoleUpdateRequestObject) (V1OrganizationRoleUpdateResponseObject, error)
	// Delete organization
	// (DELETE /v1/organizations/{id})
	V1OrganizationDelete(ctx context.Context, request V1OrganizationDeleteRequestObject) (V1OrganizationDeleteResponseObject, error)
	// Get organization
	// (GET /v1/organizations/{id})
	V1OrganizationGet(ctx context.Context, request V1OrganizationGetRequestObject) (V1OrganizationGetResponseObject, error)
	// Update organization
	// (PATCH /v1/organizations/{id})
	V1OrganizationUpdate(ctx context.Context, request V1OrganizationUpdateRequestObject) (V1OrganizationUpdateResponseObject, error)
	// Get organization members
	// (GET /v1/organizations/{id}/members)
	V1OrganizationMembersGet(ctx context.Context, request V1OrganizationMembersGetRequestObject) (V1OrganizationMembersGetResponseObject, error)
	// Add organization member
	// (POST /v1/organizations/{id}/members)
	V1OrganizationMembersAdd(ctx context.Context, request V1OrganizationMembersAddRequestObject) (V1OrganizationMembersAddResponseObject, error)
	// Remove organization member
	// (DELETE /v1/organizations/{id}/members/{user_id})
	V1OrganizationMemberRemove(ctx context.Context, request V1OrganizationMemberRemoveRequestObject) (V1OrganizationMemberRemoveResponseObject, error)
	// Get organization role members
	// (GET /v1/organizations/{id}/roles/{role_id}/members)
	V1OrganizationRoleMembersGet(ctx context.Context, request V1OrganizationRoleMembersGetRequestObject) (V1OrganizationRoleMembersGetResponseObject, error)
	// Add organization role member
	// (POST /v1/organizations/{id}/roles/{role_id}/members)
	V1OrganizationRoleMembersAdd(ctx context.Context, request V1OrganizationRoleMembersAddRequestObject) (V1OrganizationRoleMembersAddResponseObject, error)
	// Remove organization role member
	// (DELETE /v1/organizations/{id}/roles/{role_id}/members/{user_id})
	V1OrganizationRoleMemberRemove(ctx context.Context, request V1OrganizationRoleMemberRemoveRequestObject) (V1OrganizationRoleMemberRemoveResponseObject, error)
	// Create permission
	// (POST /v1/permissions)
	V1PermissionsCreate(ctx context.Context, request V1PermissionsCreateRequestObject) (V1PermissionsCreateResponseObject, error)
	// Check relations to resource
	// (GET /v1/permissions/has-relations/{resourceId})
	V1PermissionHasRelations(ctx context.Context, request V1PermissionHasRelationsRequestObject) (V1PermissionHasRelationsResponseObject, error)
	// Check system role assignment
	// (GET /v1/permissions/has-system-role)
	V1PermissionHasSystemRole(ctx context.Context, request V1PermissionHasSystemRoleRequestObject) (V1PermissionHasSystemRoleResponseObject, error)
	// Get permissions for a resource
	// (GET /v1/permissions/resources/{resourceId})
	V1PermissionResourceGet(ctx context.Context, request V1PermissionResourceGetRequestObject) (V1PermissionResourceGetResponseObject, error)
	// Delete permission
	// (DELETE /v1/permissions/{id})
	V1PermissionDelete(ctx context.Context, request V1PermissionDeleteRequestObject) (V1PermissionDeleteResponseObject, error)
	// Get permission
	// (GET /v1/permissions/{id})
	V1PermissionGet(ctx context.Context, request V1PermissionGetRequestObject) (V1PermissionGetResponseObject, error)
	// Update permission
	// (PATCH /v1/permissions/{id})
	V1PermissionUpdate(ctx context.Context, request V1PermissionUpdateRequestObject) (V1PermissionUpdateResponseObject, error)
	// Get system health
	// (GET /v1/system/health)
	V1SystemHealth(ctx context.Context, request V1SystemHealthRequestObject) (V1SystemHealthResponseObject, error)
	// Get heartbeat
	// (GET /v1/system/heartbeat)
	V1SystemHeartbeat(ctx context.Context, request V1SystemHeartbeatRequestObject) (V1SystemHeartbeatResponseObject, error)
	// Get license info
	// (GET /v1/system/license)
	V1SystemLicense(ctx context.Context, request V1SystemLicenseRequestObject) (V1SystemLicenseResponseObject, error)
	// Get system version
	// (GET /v1/system/version)
	V1SystemVersion(ctx context.Context, request V1SystemVersionRequestObject) (V1SystemVersionResponseObject, error)
	// Get todo item
	// (GET /v1/todos)
	V1TodosGet(ctx context.Context, request V1TodosGetRequestObject) (V1TodosGetResponseObject, error)
	// Create todo item
	// (POST /v1/todos)
	V1TodosCreate(ctx context.Context, request V1TodosCreateRequestObject) (V1TodosCreateResponseObject, error)
	// Delete todo item
	// (DELETE /v1/todos/{id})
	V1TodoDelete(ctx context.Context, request V1TodoDeleteRequestObject) (V1TodoDeleteResponseObject, error)
	// Get todo item
	// (GET /v1/todos/{id})
	V1TodoGet(ctx context.Context, request V1TodoGetRequestObject) (V1TodoGetResponseObject, error)
	// Update todo
	// (PATCH /v1/todos/{id})
	V1TodoUpdate(ctx context.Context, request V1TodoUpdateRequestObject) (V1TodoUpdateResponseObject, error)
	// Get all users
	// (GET /v1/users)
	V1UsersGet(ctx context.Context, request V1UsersGetRequestObject) (V1UsersGetResponseObject, error)
	// Create new user
	// (POST /v1/users)
	V1UsersCreate(ctx context.Context, request V1UsersCreateRequestObject) (V1UsersCreateResponseObject, error)
	// Delete the user with the given ID.
	// (DELETE /v1/users/{id})
	V1UserDelete(ctx context.Context, request V1UserDeleteRequestObject) (V1UserDeleteResponseObject, error)
	// Get user
	// (GET /v1/users/{id})
	V1UserGet(ctx context.Context, request V1UserGetRequestObject) (V1UserGetResponseObject, error)
	// Update user
	// (PATCH /v1/users/{id})
	V1UserUpdate(ctx context.Context, request V1UserUpdateRequestObject) (V1UserUpdateResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// V1OrganizationsGet operation middleware
func (sh *strictHandler) V1OrganizationsGet(w http.ResponseWriter, r *http.Request, params V1OrganizationsGetParams) {
	var request V1OrganizationsGetRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationsGet(ctx, request.(V1OrganizationsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationsGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationsGetResponseObject); ok {
		if err := validResponse.VisitV1OrganizationsGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationsCreate operation middleware
func (sh *strictHandler) V1OrganizationsCreate(w http.ResponseWriter, r *http.Request) {
	var request V1OrganizationsCreateRequestObject

	var body V1OrganizationsCreateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationsCreate(ctx, request.(V1OrganizationsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationsCreate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationsCreateResponseObject); ok {
		if err := validResponse.VisitV1OrganizationsCreateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationRolesGet operation middleware
func (sh *strictHandler) V1OrganizationRolesGet(w http.ResponseWriter, r *http.Request, id Id, params V1OrganizationRolesGetParams) {
	var request V1OrganizationRolesGetRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationRolesGet(ctx, request.(V1OrganizationRolesGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationRolesGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationRolesGetResponseObject); ok {
		if err := validResponse.VisitV1OrganizationRolesGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationRolesCreate operation middleware
func (sh *strictHandler) V1OrganizationRolesCreate(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1OrganizationRolesCreateRequestObject

	request.Id = id

	var body V1OrganizationRolesCreateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationRolesCreate(ctx, request.(V1OrganizationRolesCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationRolesCreate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationRolesCreateResponseObject); ok {
		if err := validResponse.VisitV1OrganizationRolesCreateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationRoleDelete operation middleware
func (sh *strictHandler) V1OrganizationRoleDelete(w http.ResponseWriter, r *http.Request, id Id, roleId string) {
	var request V1OrganizationRoleDeleteRequestObject

	request.Id = id
	request.RoleId = roleId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationRoleDelete(ctx, request.(V1OrganizationRoleDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationRoleDelete")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationRoleDeleteResponseObject); ok {
		if err := validResponse.VisitV1OrganizationRoleDeleteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationRoleGet operation middleware
func (sh *strictHandler) V1OrganizationRoleGet(w http.ResponseWriter, r *http.Request, id Id, roleId string) {
	var request V1OrganizationRoleGetRequestObject

	request.Id = id
	request.RoleId = roleId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationRoleGet(ctx, request.(V1OrganizationRoleGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationRoleGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationRoleGetResponseObject); ok {
		if err := validResponse.VisitV1OrganizationRoleGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationRoleUpdate operation middleware
func (sh *strictHandler) V1OrganizationRoleUpdate(w http.ResponseWriter, r *http.Request, id Id, roleId string) {
	var request V1OrganizationRoleUpdateRequestObject

	request.Id = id
	request.RoleId = roleId

	var body V1OrganizationRoleUpdateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationRoleUpdate(ctx, request.(V1OrganizationRoleUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationRoleUpdate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationRoleUpdateResponseObject); ok {
		if err := validResponse.VisitV1OrganizationRoleUpdateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationDelete operation middleware
func (sh *strictHandler) V1OrganizationDelete(w http.ResponseWriter, r *http.Request, id Id, params V1OrganizationDeleteParams) {
	var request V1OrganizationDeleteRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationDelete(ctx, request.(V1OrganizationDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationDelete")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationDeleteResponseObject); ok {
		if err := validResponse.VisitV1OrganizationDeleteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationGet operation middleware
func (sh *strictHandler) V1OrganizationGet(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1OrganizationGetRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationGet(ctx, request.(V1OrganizationGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationGetResponseObject); ok {
		if err := validResponse.VisitV1OrganizationGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationUpdate operation middleware
func (sh *strictHandler) V1OrganizationUpdate(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1OrganizationUpdateRequestObject

	request.Id = id

	var body V1OrganizationUpdateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationUpdate(ctx, request.(V1OrganizationUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationUpdate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationUpdateResponseObject); ok {
		if err := validResponse.VisitV1OrganizationUpdateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationMembersGet operation middleware
func (sh *strictHandler) V1OrganizationMembersGet(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1OrganizationMembersGetRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationMembersGet(ctx, request.(V1OrganizationMembersGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationMembersGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationMembersGetResponseObject); ok {
		if err := validResponse.VisitV1OrganizationMembersGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationMembersAdd operation middleware
func (sh *strictHandler) V1OrganizationMembersAdd(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1OrganizationMembersAddRequestObject

	request.Id = id

	var body V1OrganizationMembersAddJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationMembersAdd(ctx, request.(V1OrganizationMembersAddRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationMembersAdd")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationMembersAddResponseObject); ok {
		if err := validResponse.VisitV1OrganizationMembersAddResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationMemberRemove operation middleware
func (sh *strictHandler) V1OrganizationMemberRemove(w http.ResponseWriter, r *http.Request, id Id, userId string) {
	var request V1OrganizationMemberRemoveRequestObject

	request.Id = id
	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationMemberRemove(ctx, request.(V1OrganizationMemberRemoveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationMemberRemove")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationMemberRemoveResponseObject); ok {
		if err := validResponse.VisitV1OrganizationMemberRemoveResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationRoleMembersGet operation middleware
func (sh *strictHandler) V1OrganizationRoleMembersGet(w http.ResponseWriter, r *http.Request, id Id, roleId string) {
	var request V1OrganizationRoleMembersGetRequestObject

	request.Id = id
	request.RoleId = roleId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationRoleMembersGet(ctx, request.(V1OrganizationRoleMembersGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationRoleMembersGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationRoleMembersGetResponseObject); ok {
		if err := validResponse.VisitV1OrganizationRoleMembersGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationRoleMembersAdd operation middleware
func (sh *strictHandler) V1OrganizationRoleMembersAdd(w http.ResponseWriter, r *http.Request, id Id, roleId string) {
	var request V1OrganizationRoleMembersAddRequestObject

	request.Id = id
	request.RoleId = roleId

	var body V1OrganizationRoleMembersAddJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationRoleMembersAdd(ctx, request.(V1OrganizationRoleMembersAddRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationRoleMembersAdd")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationRoleMembersAddResponseObject); ok {
		if err := validResponse.VisitV1OrganizationRoleMembersAddResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1OrganizationRoleMemberRemove operation middleware
func (sh *strictHandler) V1OrganizationRoleMemberRemove(w http.ResponseWriter, r *http.Request, id Id, roleId string, userId string) {
	var request V1OrganizationRoleMemberRemoveRequestObject

	request.Id = id
	request.RoleId = roleId
	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationRoleMemberRemove(ctx, request.(V1OrganizationRoleMemberRemoveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationRoleMemberRemove")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationRoleMemberRemoveResponseObject); ok {
		if err := validResponse.VisitV1OrganizationRoleMemberRemoveResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1PermissionsCreate operation middleware
func (sh *strictHandler) V1PermissionsCreate(w http.ResponseWriter, r *http.Request) {
	var request V1PermissionsCreateRequestObject

	var body V1PermissionsCreateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1PermissionsCreate(ctx, request.(V1PermissionsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1PermissionsCreate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1PermissionsCreateResponseObject); ok {
		if err := validResponse.VisitV1PermissionsCreateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1PermissionHasRelations operation middleware
func (sh *strictHandler) V1PermissionHasRelations(w http.ResponseWriter, r *http.Request, resourceId ResourceId) {
	var request V1PermissionHasRelationsRequestObject

	request.ResourceId = resourceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1PermissionHasRelations(ctx, request.(V1PermissionHasRelationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1PermissionHasRelations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1PermissionHasRelationsResponseObject); ok {
		if err := validResponse.VisitV1PermissionHasRelationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1PermissionHasSystemRole operation middleware
func (sh *strictHandler) V1PermissionHasSystemRole(w http.ResponseWriter, r *http.Request, params V1PermissionHasSystemRoleParams) {
	var request V1PermissionHasSystemRoleRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1PermissionHasSystemRole(ctx, request.(V1PermissionHasSystemRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1PermissionHasSystemRole")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1PermissionHasSystemRoleResponseObject); ok {
		if err := validResponse.VisitV1PermissionHasSystemRoleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1PermissionResourceGet operation middleware
func (sh *strictHandler) V1PermissionResourceGet(w http.ResponseWriter, r *http.Request, resourceId ResourceId) {
	var request V1PermissionResourceGetRequestObject

	request.ResourceId = resourceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1PermissionResourceGet(ctx, request.(V1PermissionResourceGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1PermissionResourceGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1PermissionResourceGetResponseObject); ok {
		if err := validResponse.VisitV1PermissionResourceGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1PermissionDelete operation middleware
func (sh *strictHandler) V1PermissionDelete(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1PermissionDeleteRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1PermissionDelete(ctx, request.(V1PermissionDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1PermissionDelete")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1PermissionDeleteResponseObject); ok {
		if err := validResponse.VisitV1PermissionDeleteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1PermissionGet operation middleware
func (sh *strictHandler) V1PermissionGet(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1PermissionGetRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1PermissionGet(ctx, request.(V1PermissionGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1PermissionGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1PermissionGetResponseObject); ok {
		if err := validResponse.VisitV1PermissionGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1PermissionUpdate operation middleware
func (sh *strictHandler) V1PermissionUpdate(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1PermissionUpdateRequestObject

	request.Id = id

	var body V1PermissionUpdateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1PermissionUpdate(ctx, request.(V1PermissionUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1PermissionUpdate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1PermissionUpdateResponseObject); ok {
		if err := validResponse.VisitV1PermissionUpdateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1SystemHealth operation middleware
func (sh *strictHandler) V1SystemHealth(w http.ResponseWriter, r *http.Request) {
	var request V1SystemHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1SystemHealth(ctx, request.(V1SystemHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1SystemHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1SystemHealthResponseObject); ok {
		if err := validResponse.VisitV1SystemHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1SystemHeartbeat operation middleware
func (sh *strictHandler) V1SystemHeartbeat(w http.ResponseWriter, r *http.Request) {
	var request V1SystemHeartbeatRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1SystemHeartbeat(ctx, request.(V1SystemHeartbeatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1SystemHeartbeat")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1SystemHeartbeatResponseObject); ok {
		if err := validResponse.VisitV1SystemHeartbeatResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1SystemLicense operation middleware
func (sh *strictHandler) V1SystemLicense(w http.ResponseWriter, r *http.Request) {
	var request V1SystemLicenseRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1SystemLicense(ctx, request.(V1SystemLicenseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1SystemLicense")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1SystemLicenseResponseObject); ok {
		if err := validResponse.VisitV1SystemLicenseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1SystemVersion operation middleware
func (sh *strictHandler) V1SystemVersion(w http.ResponseWriter, r *http.Request) {
	var request V1SystemVersionRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1SystemVersion(ctx, request.(V1SystemVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1SystemVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1SystemVersionResponseObject); ok {
		if err := validResponse.VisitV1SystemVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1TodosGet operation middleware
func (sh *strictHandler) V1TodosGet(w http.ResponseWriter, r *http.Request, params V1TodosGetParams) {
	var request V1TodosGetRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1TodosGet(ctx, request.(V1TodosGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TodosGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1TodosGetResponseObject); ok {
		if err := validResponse.VisitV1TodosGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1TodosCreate operation middleware
func (sh *strictHandler) V1TodosCreate(w http.ResponseWriter, r *http.Request) {
	var request V1TodosCreateRequestObject

	var body V1TodosCreateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1TodosCreate(ctx, request.(V1TodosCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TodosCreate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1TodosCreateResponseObject); ok {
		if err := validResponse.VisitV1TodosCreateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1TodoDelete operation middleware
func (sh *strictHandler) V1TodoDelete(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1TodoDeleteRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1TodoDelete(ctx, request.(V1TodoDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TodoDelete")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1TodoDeleteResponseObject); ok {
		if err := validResponse.VisitV1TodoDeleteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1TodoGet operation middleware
func (sh *strictHandler) V1TodoGet(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1TodoGetRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1TodoGet(ctx, request.(V1TodoGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TodoGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1TodoGetResponseObject); ok {
		if err := validResponse.VisitV1TodoGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1TodoUpdate operation middleware
func (sh *strictHandler) V1TodoUpdate(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1TodoUpdateRequestObject

	request.Id = id

	var body V1TodoUpdateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1TodoUpdate(ctx, request.(V1TodoUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TodoUpdate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1TodoUpdateResponseObject); ok {
		if err := validResponse.VisitV1TodoUpdateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1UsersGet operation middleware
func (sh *strictHandler) V1UsersGet(w http.ResponseWriter, r *http.Request, params V1UsersGetParams) {
	var request V1UsersGetRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1UsersGet(ctx, request.(V1UsersGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UsersGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1UsersGetResponseObject); ok {
		if err := validResponse.VisitV1UsersGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1UsersCreate operation middleware
func (sh *strictHandler) V1UsersCreate(w http.ResponseWriter, r *http.Request) {
	var request V1UsersCreateRequestObject

	var body V1UsersCreateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1UsersCreate(ctx, request.(V1UsersCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UsersCreate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1UsersCreateResponseObject); ok {
		if err := validResponse.VisitV1UsersCreateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1UserDelete operation middleware
func (sh *strictHandler) V1UserDelete(w http.ResponseWriter, r *http.Request, id Id, params V1UserDeleteParams) {
	var request V1UserDeleteRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1UserDelete(ctx, request.(V1UserDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UserDelete")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1UserDeleteResponseObject); ok {
		if err := validResponse.VisitV1UserDeleteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1UserGet operation middleware
func (sh *strictHandler) V1UserGet(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1UserGetRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1UserGet(ctx, request.(V1UserGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UserGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1UserGetResponseObject); ok {
		if err := validResponse.VisitV1UserGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1UserUpdate operation middleware
func (sh *strictHandler) V1UserUpdate(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1UserUpdateRequestObject

	request.Id = id

	var body V1UserUpdateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1UserUpdate(ctx, request.(V1UserUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UserUpdate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1UserUpdateResponseObject); ok {
		if err := validResponse.VisitV1UserUpdateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
