// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for Language.
const (
	LanguageAa Language = "aa"
	LanguageAb Language = "ab"
	LanguageAe Language = "ae"
	LanguageAf Language = "af"
	LanguageAk Language = "ak"
	LanguageAm Language = "am"
	LanguageAn Language = "an"
	LanguageAr Language = "ar"
	LanguageAs Language = "as"
	LanguageAv Language = "av"
	LanguageAy Language = "ay"
	LanguageAz Language = "az"
	LanguageBa Language = "ba"
	LanguageBe Language = "be"
	LanguageBg Language = "bg"
	LanguageBh Language = "bh"
	LanguageBi Language = "bi"
	LanguageBm Language = "bm"
	LanguageBn Language = "bn"
	LanguageBo Language = "bo"
	LanguageBr Language = "br"
	LanguageBs Language = "bs"
	LanguageCa Language = "ca"
	LanguageCe Language = "ce"
	LanguageCh Language = "ch"
	LanguageCo Language = "co"
	LanguageCr Language = "cr"
	LanguageCs Language = "cs"
	LanguageCu Language = "cu"
	LanguageCv Language = "cv"
	LanguageCy Language = "cy"
	LanguageDa Language = "da"
	LanguageDe Language = "de"
	LanguageDv Language = "dv"
	LanguageDz Language = "dz"
	LanguageEe Language = "ee"
	LanguageEl Language = "el"
	LanguageEn Language = "en"
	LanguageEo Language = "eo"
	LanguageEs Language = "es"
	LanguageEt Language = "et"
	LanguageEu Language = "eu"
	LanguageFa Language = "fa"
	LanguageFf Language = "ff"
	LanguageFi Language = "fi"
	LanguageFj Language = "fj"
	LanguageFo Language = "fo"
	LanguageFr Language = "fr"
	LanguageFy Language = "fy"
	LanguageGa Language = "ga"
	LanguageGd Language = "gd"
	LanguageGl Language = "gl"
	LanguageGn Language = "gn"
	LanguageGu Language = "gu"
	LanguageGv Language = "gv"
	LanguageHa Language = "ha"
	LanguageHe Language = "he"
	LanguageHi Language = "hi"
	LanguageHo Language = "ho"
	LanguageHr Language = "hr"
	LanguageHt Language = "ht"
	LanguageHu Language = "hu"
	LanguageHy Language = "hy"
	LanguageHz Language = "hz"
	LanguageIa Language = "ia"
	LanguageId Language = "id"
	LanguageIe Language = "ie"
	LanguageIg Language = "ig"
	LanguageIi Language = "ii"
	LanguageIk Language = "ik"
	LanguageIo Language = "io"
	LanguageIs Language = "is"
	LanguageIt Language = "it"
	LanguageIu Language = "iu"
	LanguageJa Language = "ja"
	LanguageJv Language = "jv"
	LanguageKa Language = "ka"
	LanguageKg Language = "kg"
	LanguageKi Language = "ki"
	LanguageKj Language = "kj"
	LanguageKk Language = "kk"
	LanguageKl Language = "kl"
	LanguageKm Language = "km"
	LanguageKn Language = "kn"
	LanguageKo Language = "ko"
	LanguageKr Language = "kr"
	LanguageKs Language = "ks"
	LanguageKu Language = "ku"
	LanguageKv Language = "kv"
	LanguageKw Language = "kw"
	LanguageKy Language = "ky"
	LanguageLa Language = "la"
	LanguageLb Language = "lb"
	LanguageLg Language = "lg"
	LanguageLi Language = "li"
	LanguageLn Language = "ln"
	LanguageLo Language = "lo"
	LanguageLt Language = "lt"
	LanguageLu Language = "lu"
	LanguageLv Language = "lv"
	LanguageMg Language = "mg"
	LanguageMh Language = "mh"
	LanguageMi Language = "mi"
	LanguageMk Language = "mk"
	LanguageMl Language = "ml"
	LanguageMn Language = "mn"
	LanguageMr Language = "mr"
	LanguageMs Language = "ms"
	LanguageMt Language = "mt"
	LanguageMy Language = "my"
	LanguageNa Language = "na"
	LanguageNb Language = "nb"
	LanguageNd Language = "nd"
	LanguageNe Language = "ne"
	LanguageNg Language = "ng"
	LanguageNl Language = "nl"
	LanguageNn Language = "nn"
	LanguageNo Language = "no"
	LanguageNr Language = "nr"
	LanguageNv Language = "nv"
	LanguageNy Language = "ny"
	LanguageOc Language = "oc"
	LanguageOj Language = "oj"
	LanguageOm Language = "om"
	LanguageOr Language = "or"
	LanguageOs Language = "os"
	LanguagePa Language = "pa"
	LanguagePi Language = "pi"
	LanguagePl Language = "pl"
	LanguagePs Language = "ps"
	LanguagePt Language = "pt"
	LanguageQu Language = "qu"
	LanguageRm Language = "rm"
	LanguageRn Language = "rn"
	LanguageRo Language = "ro"
	LanguageRu Language = "ru"
	LanguageRw Language = "rw"
	LanguageSa Language = "sa"
	LanguageSc Language = "sc"
	LanguageSd Language = "sd"
	LanguageSe Language = "se"
	LanguageSg Language = "sg"
	LanguageSi Language = "si"
	LanguageSk Language = "sk"
	LanguageSl Language = "sl"
	LanguageSm Language = "sm"
	LanguageSn Language = "sn"
	LanguageSo Language = "so"
	LanguageSq Language = "sq"
	LanguageSr Language = "sr"
	LanguageSs Language = "ss"
	LanguageSt Language = "st"
	LanguageSu Language = "su"
	LanguageSv Language = "sv"
	LanguageSw Language = "sw"
	LanguageTa Language = "ta"
	LanguageTe Language = "te"
	LanguageTg Language = "tg"
	LanguageTh Language = "th"
	LanguageTi Language = "ti"
	LanguageTk Language = "tk"
	LanguageTl Language = "tl"
	LanguageTn Language = "tn"
	LanguageTo Language = "to"
	LanguageTr Language = "tr"
	LanguageTs Language = "ts"
	LanguageTt Language = "tt"
	LanguageTw Language = "tw"
	LanguageTy Language = "ty"
	LanguageUg Language = "ug"
	LanguageUk Language = "uk"
	LanguageUr Language = "ur"
	LanguageUz Language = "uz"
	LanguageVe Language = "ve"
	LanguageVi Language = "vi"
	LanguageVo Language = "vo"
	LanguageWa Language = "wa"
	LanguageWo Language = "wo"
	LanguageXh Language = "xh"
	LanguageYi Language = "yi"
	LanguageYo Language = "yo"
	LanguageZa Language = "za"
	LanguageZh Language = "zh"
	LanguageZu Language = "zu"
)

// Defines values for OrganizationStatus.
const (
	OrganizationStatusActive  OrganizationStatus = "active"
	OrganizationStatusDeleted OrganizationStatus = "deleted"
)

// Defines values for SystemHealthCacheDatabase.
const (
	SystemHealthCacheDatabaseHealthy   SystemHealthCacheDatabase = "healthy"
	SystemHealthCacheDatabaseUnhealthy SystemHealthCacheDatabase = "unhealthy"
	SystemHealthCacheDatabaseUnknown   SystemHealthCacheDatabase = "unknown"
)

// Defines values for SystemHealthGraphDatabase.
const (
	SystemHealthGraphDatabaseHealthy   SystemHealthGraphDatabase = "healthy"
	SystemHealthGraphDatabaseUnhealthy SystemHealthGraphDatabase = "unhealthy"
	SystemHealthGraphDatabaseUnknown   SystemHealthGraphDatabase = "unknown"
)

// Defines values for SystemHealthLicense.
const (
	SystemHealthLicenseHealthy   SystemHealthLicense = "healthy"
	SystemHealthLicenseUnhealthy SystemHealthLicense = "unhealthy"
	SystemHealthLicenseUnknown   SystemHealthLicense = "unknown"
)

// Defines values for SystemHealthMessageQueue.
const (
	SystemHealthMessageQueueHealthy   SystemHealthMessageQueue = "healthy"
	SystemHealthMessageQueueUnhealthy SystemHealthMessageQueue = "unhealthy"
	SystemHealthMessageQueueUnknown   SystemHealthMessageQueue = "unknown"
)

// Defines values for SystemHealthRelationalDatabase.
const (
	SystemHealthRelationalDatabaseHealthy   SystemHealthRelationalDatabase = "healthy"
	SystemHealthRelationalDatabaseUnhealthy SystemHealthRelationalDatabase = "unhealthy"
	SystemHealthRelationalDatabaseUnknown   SystemHealthRelationalDatabase = "unknown"
)

// Defines values for SystemLicenseFeatures.
const (
	SystemLicenseFeaturesComponents        SystemLicenseFeatures = "components"
	SystemLicenseFeaturesCustomFields      SystemLicenseFeatures = "custom_fields"
	SystemLicenseFeaturesCustomStatuses    SystemLicenseFeatures = "custom_statuses"
	SystemLicenseFeaturesMultipleAssignees SystemLicenseFeatures = "multiple_assignees"
	SystemLicenseFeaturesReleases          SystemLicenseFeatures = "releases"
)

// Defines values for TodoPriority.
const (
	TodoPriorityCritical  TodoPriority = "critical"
	TodoPriorityImportant TodoPriority = "important"
	TodoPriorityNormal    TodoPriority = "normal"
	TodoPriorityUrgent    TodoPriority = "urgent"
)

// Defines values for UserStatus.
const (
	UserStatusActive   UserStatus = "active"
	UserStatusDeleted  UserStatus = "deleted"
	UserStatusInactive UserStatus = "inactive"
	UserStatusPending  UserStatus = "pending"
)

// HTTPError HTTP error description.
type HTTPError struct {
	// Message Description of the error.
	Message string `json:"message"`
}

// Language Two-letter ISO language code.
type Language string

// Organization An organization in the system.
type Organization struct {
	// CreatedAt Date when the organization was created.
	CreatedAt time.Time `json:"created_at"`

	// Email Email address of the organization.
	Email openapi_types.Email `json:"email"`

	// Id Unique identifier of the organization.
	Id string `json:"id"`

	// Logo Logo of the organization.
	Logo *string `json:"logo"`

	// Members IDs of the users in the organization.
	Members []string `json:"members"`

	// Name Name of the organization.
	Name string `json:"name"`

	// Namespaces IDs of the namespaces in the organization.
	Namespaces []string `json:"namespaces"`

	// Status Status of the organization.
	Status OrganizationStatus `json:"status"`

	// Teams IDs of the teams in the organization.
	Teams []string `json:"teams"`

	// UpdatedAt Date when the organization was updated.
	UpdatedAt *time.Time `json:"updated_at"`

	// Website Work title of the user.
	Website *string `json:"website"`
}

// OrganizationStatus Status of the organization.
type OrganizationStatus string

// SystemHealth defines model for SystemHealth.
type SystemHealth struct {
	// CacheDatabase Health of the cache database.
	CacheDatabase SystemHealthCacheDatabase `json:"cache_database"`

	// GraphDatabase Health of the graph database.
	GraphDatabase SystemHealthGraphDatabase `json:"graph_database"`

	// License Health of the license.
	License SystemHealthLicense `json:"license"`

	// MessageQueue Health of the message queue.
	MessageQueue SystemHealthMessageQueue `json:"message_queue"`

	// RelationalDatabase Health of the relational database.
	RelationalDatabase SystemHealthRelationalDatabase `json:"relational_database"`
}

// SystemHealthCacheDatabase Health of the cache database.
type SystemHealthCacheDatabase string

// SystemHealthGraphDatabase Health of the graph database.
type SystemHealthGraphDatabase string

// SystemHealthLicense Health of the license.
type SystemHealthLicense string

// SystemHealthMessageQueue Health of the message queue.
type SystemHealthMessageQueue string

// SystemHealthRelationalDatabase Health of the relational database.
type SystemHealthRelationalDatabase string

// SystemLicense defines model for SystemLicense.
type SystemLicense struct {
	// Email Email address of the licensee.
	Email openapi_types.Email `json:"email"`

	// ExpiresAt Date and time when the license expires.
	ExpiresAt time.Time `json:"expires_at"`

	// Features Features enabled by the license.
	Features []SystemLicenseFeatures `json:"features"`

	// Id Unique ID identifying the license.
	Id string `json:"id"`

	// Organization Name of the organization the license belongs to.
	Organization string `json:"organization"`

	// Quotas Quotas available for the license.
	Quotas struct {
		// Documents Number of documents can exist in the system.
		Documents int `json:"documents"`

		// Namespaces Number of namespaces can exist in the system.
		Namespaces int `json:"namespaces"`

		// Organizations Number of organizations active can exist in the system.
		Organizations int `json:"organizations"`

		// Projects Number of projects can exist in the system.
		Projects int `json:"projects"`

		// Roles Number of roles can exist in the system.
		Roles int `json:"roles"`

		// Users Number of active or pending users can exist in the system.
		Users int `json:"users"`
	} `json:"quotas"`
}

// SystemLicenseFeatures defines model for SystemLicense.Features.
type SystemLicenseFeatures string

// SystemVersion defines model for SystemVersion.
type SystemVersion struct {
	// Commit Commit hash of the build.
	Commit string `json:"commit"`

	// Date Build date and time of the application.
	Date time.Time `json:"date"`

	// GoVersion Go version used to build the application.
	GoVersion string `json:"go_version"`

	// Version Version of the application.
	Version string `json:"version"`
}

// Todo A todo item belonging to a user.
type Todo struct {
	// Completed Status of the todo item.
	Completed bool `json:"completed"`

	// CreatedAt Date when the todo item was created.
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy ID of the user who created the todo item.
	CreatedBy string `json:"created_by"`

	// Description Description of the todo item.
	Description string `json:"description"`

	// DueDate Completion due date of the todo item.
	DueDate *time.Time `json:"due_date"`

	// Id Unique identifier of the todo .
	Id string `json:"id"`

	// OwnedBy ID of the user who owns the todo item.
	OwnedBy string `json:"owned_by"`

	// Priority Priority of the todo item.
	Priority TodoPriority `json:"priority"`

	// Title Title of the todo item.
	Title string `json:"title"`

	// UpdatedAt Date when the todo item was updated.
	UpdatedAt *time.Time `json:"updated_at"`
}

// TodoPriority Priority of the todo item.
type TodoPriority string

// User A user in the system.
type User struct {
	// Address Working address of the user.
	Address *string `json:"address"`

	// Bio Self description of the user.
	Bio *string `json:"bio"`

	// CreatedAt Date when the user was created.
	CreatedAt time.Time `json:"created_at"`

	// Email Email address of the user.
	Email openapi_types.Email `json:"email"`

	// FirstName First name of the user.
	FirstName *string `json:"first_name"`

	// Id Unique identifier of the user.
	Id string `json:"id"`

	// Languages Languages of the user.
	Languages []Language `json:"languages"`

	// LastName Last name of the user.
	LastName *string `json:"last_name"`

	// Links Links to show on profile page.
	Links *[]string `json:"links"`

	// Phone Phone number of the user.
	Phone *string `json:"phone"`

	// Picture Profile picture of the user.
	Picture *string `json:"picture"`

	// Status Status of the user.
	Status UserStatus `json:"status"`

	// Title Work title of the user.
	Title *string `json:"title"`

	// UpdatedAt Date when the user was updated.
	UpdatedAt *time.Time `json:"updated_at"`

	// Username The unique username of the user.
	Username string `json:"username"`
}

// UserStatus Status of the user.
type UserStatus string

// Force defines model for force.
type Force = bool

// Id defines model for id.
type Id = string

// Limit defines model for limit.
type Limit = int

// Offset defines model for offset.
type Offset = int

// N201 defines model for 201.
type N201 struct {
	// Id ID of the newly created resource.
	Id string `json:"id"`
}

// N400 HTTP error description.
type N400 = HTTPError

// N401 HTTP error description.
type N401 = HTTPError

// N403 HTTP error description.
type N403 = HTTPError

// N404 HTTP error description.
type N404 = HTTPError

// N500 HTTP error description.
type N500 = HTTPError

// OrganizationCreate defines model for OrganizationCreate.
type OrganizationCreate struct {
	// Email Email address of the organization.
	Email openapi_types.Email `json:"email"`

	// Logo Logo of the organization.
	Logo *string `json:"logo,omitempty"`

	// Name Name of the organization.
	Name string `json:"name"`

	// Website Work title of the user.
	Website *string `json:"website,omitempty"`
}

// OrganizationPatch defines model for OrganizationPatch.
type OrganizationPatch struct {
	// Email Email address of the organization.
	Email *openapi_types.Email `json:"email,omitempty"`

	// Logo Logo of the organization.
	Logo *string `json:"logo,omitempty"`

	// Name Name of the organization.
	Name *string `json:"name,omitempty"`

	// Status Status of the organization.
	Status *OrganizationStatus `json:"status,omitempty"`

	// Website Work title of the user.
	Website *string `json:"website,omitempty"`
}

// TodoCreate defines model for TodoCreate.
type TodoCreate struct {
	// Description Description of the todo item.
	Description *string `json:"description,omitempty"`

	// DueDate Completion due date of the todo item.
	DueDate *string `json:"due_date,omitempty"`

	// OwnedBy ID of the user who owns the todo item.
	OwnedBy string `json:"owned_by"`

	// Priority Priority of the todo item.
	Priority TodoPriority `json:"priority"`

	// Title Title of the todo item.
	Title string `json:"title"`
}

// TodoPatch defines model for TodoPatch.
type TodoPatch struct {
	// Completed Completion status of the todo item.
	Completed *bool `json:"completed,omitempty"`

	// Description Description of the todo item.
	Description *string `json:"description,omitempty"`

	// DueDate Completion due date of the todo item.
	DueDate *string `json:"due_date,omitempty"`

	// OwnedBy ID of the user who owns the todo item.
	OwnedBy *string `json:"owned_by,omitempty"`

	// Priority Priority of the todo item.
	Priority *TodoPriority `json:"priority,omitempty"`

	// Title Title of the todo item.
	Title *string `json:"title,omitempty"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	// Address Working address of the user.
	Address *string `json:"address"`

	// Bio Self description of the user.
	Bio *string `json:"bio"`

	// Email Email address of the user.
	Email openapi_types.Email `json:"email"`

	// FirstName First name of the user.
	FirstName *string `json:"first_name"`

	// Languages Languages of the user.
	Languages *[]Language `json:"languages"`

	// LastName Last name of the user.
	LastName *string `json:"last_name"`

	// Links Links to show on profile page.
	Links *[]string `json:"links"`

	// Password Password of the user.
	Password string `json:"password"`

	// Phone Phone number of the user.
	Phone *string `json:"phone"`

	// Picture Profile picture of the user.
	Picture *string `json:"picture"`

	// Title Work title of the user.
	Title *string `json:"title"`

	// Username The unique username of the user.
	Username string `json:"username"`
}

// UserPatch defines model for UserPatch.
type UserPatch struct {
	// Address Working address of the user.
	Address *string `json:"address,omitempty"`

	// Bio Self description of the user.
	Bio *string `json:"bio,omitempty"`

	// Email Email address of the user.
	Email *openapi_types.Email `json:"email,omitempty"`

	// FirstName First name of the user.
	FirstName *string `json:"first_name,omitempty"`

	// Languages Languages of the user.
	Languages *[]Language `json:"languages,omitempty"`

	// LastName Last name of the user.
	LastName *string `json:"last_name,omitempty"`

	// Links Links to show on profile page.
	Links *[]string `json:"links,omitempty"`

	// Password Password of the user.
	Password *string `json:"password,omitempty"`

	// Phone Phone number of the user.
	Phone *string `json:"phone,omitempty"`

	// Picture Profile picture of the user.
	Picture *string `json:"picture,omitempty"`

	// Status Status of the user.
	Status *UserStatus `json:"status,omitempty"`

	// Title Work title of the user.
	Title *string `json:"title,omitempty"`

	// Username The unique username of the user.
	Username *string `json:"username,omitempty"`
}

// V1OrganizationsGetParams defines parameters for V1OrganizationsGet.
type V1OrganizationsGetParams struct {
	// Offset Number of resources to skip.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of resources to return.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// V1OrganizationsCreateJSONBody defines parameters for V1OrganizationsCreate.
type V1OrganizationsCreateJSONBody struct {
	// Email Email address of the organization.
	Email openapi_types.Email `json:"email"`

	// Logo Logo of the organization.
	Logo *string `json:"logo,omitempty"`

	// Name Name of the organization.
	Name string `json:"name"`

	// Website Work title of the user.
	Website *string `json:"website,omitempty"`
}

// V1OrganizationDeleteParams defines parameters for V1OrganizationDelete.
type V1OrganizationDeleteParams struct {
	// Force Irreversibly delete the user.
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// V1OrganizationUpdateJSONBody defines parameters for V1OrganizationUpdate.
type V1OrganizationUpdateJSONBody struct {
	// Email Email address of the organization.
	Email *openapi_types.Email `json:"email,omitempty"`

	// Logo Logo of the organization.
	Logo *string `json:"logo,omitempty"`

	// Name Name of the organization.
	Name *string `json:"name,omitempty"`

	// Status Status of the organization.
	Status *OrganizationStatus `json:"status,omitempty"`

	// Website Work title of the user.
	Website *string `json:"website,omitempty"`
}

// V1OrganizationMembersAddJSONBody defines parameters for V1OrganizationMembersAdd.
type V1OrganizationMembersAddJSONBody struct {
	// UserId ID of the user to add.
	UserId string `json:"user_id"`
}

// V1TodosGetParams defines parameters for V1TodosGet.
type V1TodosGetParams struct {
	// Offset Number of resources to skip.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of resources to return.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Completed Completion status of the items.
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty"`
}

// V1TodosCreateJSONBody defines parameters for V1TodosCreate.
type V1TodosCreateJSONBody struct {
	// Description Description of the todo item.
	Description *string `json:"description,omitempty"`

	// DueDate Completion due date of the todo item.
	DueDate *string `json:"due_date,omitempty"`

	// OwnedBy ID of the user who owns the todo item.
	OwnedBy string `json:"owned_by"`

	// Priority Priority of the todo item.
	Priority TodoPriority `json:"priority"`

	// Title Title of the todo item.
	Title string `json:"title"`
}

// V1TodoUpdateJSONBody defines parameters for V1TodoUpdate.
type V1TodoUpdateJSONBody struct {
	// Completed Completion status of the todo item.
	Completed *bool `json:"completed,omitempty"`

	// Description Description of the todo item.
	Description *string `json:"description,omitempty"`

	// DueDate Completion due date of the todo item.
	DueDate *string `json:"due_date,omitempty"`

	// OwnedBy ID of the user who owns the todo item.
	OwnedBy *string `json:"owned_by,omitempty"`

	// Priority Priority of the todo item.
	Priority *TodoPriority `json:"priority,omitempty"`

	// Title Title of the todo item.
	Title *string `json:"title,omitempty"`
}

// V1UsersGetParams defines parameters for V1UsersGet.
type V1UsersGetParams struct {
	// Offset Number of resources to skip.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of resources to return.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// V1UsersCreateJSONBody defines parameters for V1UsersCreate.
type V1UsersCreateJSONBody struct {
	// Address Working address of the user.
	Address *string `json:"address"`

	// Bio Self description of the user.
	Bio *string `json:"bio"`

	// Email Email address of the user.
	Email openapi_types.Email `json:"email"`

	// FirstName First name of the user.
	FirstName *string `json:"first_name"`

	// Languages Languages of the user.
	Languages *[]Language `json:"languages"`

	// LastName Last name of the user.
	LastName *string `json:"last_name"`

	// Links Links to show on profile page.
	Links *[]string `json:"links"`

	// Password Password of the user.
	Password string `json:"password"`

	// Phone Phone number of the user.
	Phone *string `json:"phone"`

	// Picture Profile picture of the user.
	Picture *string `json:"picture"`

	// Title Work title of the user.
	Title *string `json:"title"`

	// Username The unique username of the user.
	Username string `json:"username"`
}

// V1UserDeleteParams defines parameters for V1UserDelete.
type V1UserDeleteParams struct {
	// Force Irreversibly delete the user.
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// V1UserUpdateJSONBody defines parameters for V1UserUpdate.
type V1UserUpdateJSONBody struct {
	// Address Working address of the user.
	Address *string `json:"address,omitempty"`

	// Bio Self description of the user.
	Bio *string `json:"bio,omitempty"`

	// Email Email address of the user.
	Email *openapi_types.Email `json:"email,omitempty"`

	// FirstName First name of the user.
	FirstName *string `json:"first_name,omitempty"`

	// Languages Languages of the user.
	Languages *[]Language `json:"languages,omitempty"`

	// LastName Last name of the user.
	LastName *string `json:"last_name,omitempty"`

	// Links Links to show on profile page.
	Links *[]string `json:"links,omitempty"`

	// Password Password of the user.
	Password *string `json:"password,omitempty"`

	// Phone Phone number of the user.
	Phone *string `json:"phone,omitempty"`

	// Picture Profile picture of the user.
	Picture *string `json:"picture,omitempty"`

	// Status Status of the user.
	Status *UserStatus `json:"status,omitempty"`

	// Title Work title of the user.
	Title *string `json:"title,omitempty"`

	// Username The unique username of the user.
	Username *string `json:"username,omitempty"`
}

// V1OrganizationsCreateJSONRequestBody defines body for V1OrganizationsCreate for application/json ContentType.
type V1OrganizationsCreateJSONRequestBody V1OrganizationsCreateJSONBody

// V1OrganizationUpdateJSONRequestBody defines body for V1OrganizationUpdate for application/json ContentType.
type V1OrganizationUpdateJSONRequestBody V1OrganizationUpdateJSONBody

// V1OrganizationMembersAddJSONRequestBody defines body for V1OrganizationMembersAdd for application/json ContentType.
type V1OrganizationMembersAddJSONRequestBody V1OrganizationMembersAddJSONBody

// V1TodosCreateJSONRequestBody defines body for V1TodosCreate for application/json ContentType.
type V1TodosCreateJSONRequestBody V1TodosCreateJSONBody

// V1TodoUpdateJSONRequestBody defines body for V1TodoUpdate for application/json ContentType.
type V1TodoUpdateJSONRequestBody V1TodoUpdateJSONBody

// V1UsersCreateJSONRequestBody defines body for V1UsersCreate for application/json ContentType.
type V1UsersCreateJSONRequestBody V1UsersCreateJSONBody

// V1UserUpdateJSONRequestBody defines body for V1UserUpdate for application/json ContentType.
type V1UserUpdateJSONRequestBody V1UserUpdateJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get organizations
	// (GET /v1/organizations)
	V1OrganizationsGet(w http.ResponseWriter, r *http.Request, params V1OrganizationsGetParams)
	// Create organization
	// (POST /v1/organizations)
	V1OrganizationsCreate(w http.ResponseWriter, r *http.Request)
	// Delete organization
	// (DELETE /v1/organizations/{id})
	V1OrganizationDelete(w http.ResponseWriter, r *http.Request, id Id, params V1OrganizationDeleteParams)
	// Get organization
	// (GET /v1/organizations/{id})
	V1OrganizationGet(w http.ResponseWriter, r *http.Request, id Id)
	// Update organization
	// (PATCH /v1/organizations/{id})
	V1OrganizationUpdate(w http.ResponseWriter, r *http.Request, id Id)
	// Get organization members
	// (GET /v1/organizations/{id}/members)
	V1OrganizationMembersGet(w http.ResponseWriter, r *http.Request, id Id)
	// Add organization member
	// (POST /v1/organizations/{id}/members)
	V1OrganizationMembersAdd(w http.ResponseWriter, r *http.Request, id Id)
	// Remove organization member
	// (DELETE /v1/organizations/{id}/members/{user_id})
	V1OrganizationMembersRemove(w http.ResponseWriter, r *http.Request, id Id, userId string)
	// Get system health
	// (GET /v1/system/health)
	V1SystemHealth(w http.ResponseWriter, r *http.Request)
	// Get heartbeat
	// (GET /v1/system/heartbeat)
	V1SystemHeartbeat(w http.ResponseWriter, r *http.Request)
	// Get license info
	// (GET /v1/system/license)
	V1SystemLicense(w http.ResponseWriter, r *http.Request)
	// Get system version
	// (GET /v1/system/version)
	V1SystemVersion(w http.ResponseWriter, r *http.Request)
	// Get todo item
	// (GET /v1/todos)
	V1TodosGet(w http.ResponseWriter, r *http.Request, params V1TodosGetParams)
	// Create todo item
	// (POST /v1/todos)
	V1TodosCreate(w http.ResponseWriter, r *http.Request)
	// Delete todo item
	// (DELETE /v1/todos/{id})
	V1TodoDelete(w http.ResponseWriter, r *http.Request, id Id)
	// Get todo item
	// (GET /v1/todos/{id})
	V1TodoGet(w http.ResponseWriter, r *http.Request, id Id)
	// Update todo
	// (PATCH /v1/todos/{id})
	V1TodoUpdate(w http.ResponseWriter, r *http.Request, id Id)
	// Get all users
	// (GET /v1/users)
	V1UsersGet(w http.ResponseWriter, r *http.Request, params V1UsersGetParams)
	// Create new user
	// (POST /v1/users)
	V1UsersCreate(w http.ResponseWriter, r *http.Request)
	// Delete the user with the given ID.
	// (DELETE /v1/users/{id})
	V1UserDelete(w http.ResponseWriter, r *http.Request, id Id, params V1UserDeleteParams)
	// Get user
	// (GET /v1/users/{id})
	V1UserGet(w http.ResponseWriter, r *http.Request, id Id)
	// Update user
	// (PATCH /v1/users/{id})
	V1UserUpdate(w http.ResponseWriter, r *http.Request, id Id)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// V1OrganizationsGet operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationsGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1OrganizationsGetParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationsGet(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationsCreate operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationsCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationsCreate(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationDelete operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization"})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1OrganizationDeleteParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationDelete(w, r, id, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationGet operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization.read"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationGet(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationUpdate operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationUpdate(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationMembersGet operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationMembersGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization.read", "user.read"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationMembersGet(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationMembersAdd operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationMembersAdd(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationMembersAdd(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1OrganizationMembersRemove operation middleware
func (siw *ServerInterfaceWrapper) V1OrganizationMembersRemove(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"organization"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1OrganizationMembersRemove(w, r, id, userId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1SystemHealth operation middleware
func (siw *ServerInterfaceWrapper) V1SystemHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1SystemHealth(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1SystemHeartbeat operation middleware
func (siw *ServerInterfaceWrapper) V1SystemHeartbeat(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1SystemHeartbeat(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1SystemLicense operation middleware
func (siw *ServerInterfaceWrapper) V1SystemLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1SystemLicense(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1SystemVersion operation middleware
func (siw *ServerInterfaceWrapper) V1SystemVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1SystemVersion(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1TodosGet operation middleware
func (siw *ServerInterfaceWrapper) V1TodosGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"todo.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1TodosGetParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "completed" -------------

	err = runtime.BindQueryParameter("form", true, false, "completed", r.URL.Query(), &params.Completed)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "completed", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1TodosGet(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1TodosCreate operation middleware
func (siw *ServerInterfaceWrapper) V1TodosCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"todo"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1TodosCreate(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1TodoDelete operation middleware
func (siw *ServerInterfaceWrapper) V1TodoDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"todo"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1TodoDelete(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1TodoGet operation middleware
func (siw *ServerInterfaceWrapper) V1TodoGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"todo.read"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1TodoGet(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1TodoUpdate operation middleware
func (siw *ServerInterfaceWrapper) V1TodoUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"todo"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1TodoUpdate(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1UsersGet operation middleware
func (siw *ServerInterfaceWrapper) V1UsersGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"user.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1UsersGetParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1UsersGet(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1UsersCreate operation middleware
func (siw *ServerInterfaceWrapper) V1UsersCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"user"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1UsersCreate(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1UserDelete operation middleware
func (siw *ServerInterfaceWrapper) V1UserDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"user"})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1UserDeleteParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1UserDelete(w, r, id, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1UserGet operation middleware
func (siw *ServerInterfaceWrapper) V1UserGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"user.read"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1UserGet(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1UserUpdate operation middleware
func (siw *ServerInterfaceWrapper) V1UserUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"user"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1UserUpdate(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/organizations", wrapper.V1OrganizationsGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/organizations", wrapper.V1OrganizationsCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/organizations/{id}", wrapper.V1OrganizationDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/organizations/{id}", wrapper.V1OrganizationGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v1/organizations/{id}", wrapper.V1OrganizationUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/organizations/{id}/members", wrapper.V1OrganizationMembersGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/organizations/{id}/members", wrapper.V1OrganizationMembersAdd)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/organizations/{id}/members/{user_id}", wrapper.V1OrganizationMembersRemove)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/system/health", wrapper.V1SystemHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/system/heartbeat", wrapper.V1SystemHeartbeat)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/system/license", wrapper.V1SystemLicense)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/system/version", wrapper.V1SystemVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/todos", wrapper.V1TodosGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/todos", wrapper.V1TodosCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/todos/{id}", wrapper.V1TodoDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/todos/{id}", wrapper.V1TodoGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v1/todos/{id}", wrapper.V1TodoUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/users", wrapper.V1UsersGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/users", wrapper.V1UsersCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/users/{id}", wrapper.V1UserDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/users/{id}", wrapper.V1UserGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v1/users/{id}", wrapper.V1UserUpdate)
	})

	return r
}

type N201JSONResponse struct {
	// Id ID of the newly created resource.
	Id string `json:"id"`
}

type N400JSONResponse HTTPError

type N401JSONResponse HTTPError

type N403JSONResponse HTTPError

type N404JSONResponse HTTPError

type N500JSONResponse HTTPError

type V1OrganizationsGetRequestObject struct {
	Params V1OrganizationsGetParams
}

type V1OrganizationsGetResponseObject interface {
	VisitV1OrganizationsGetResponse(w http.ResponseWriter) error
}

type V1OrganizationsGet200JSONResponse []Organization

func (response V1OrganizationsGet200JSONResponse) VisitV1OrganizationsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsGet401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationsGet401JSONResponse) VisitV1OrganizationsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsGet403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationsGet403JSONResponse) VisitV1OrganizationsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsGet500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationsGet500JSONResponse) VisitV1OrganizationsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsCreateRequestObject struct {
	Body *V1OrganizationsCreateJSONRequestBody
}

type V1OrganizationsCreateResponseObject interface {
	VisitV1OrganizationsCreateResponse(w http.ResponseWriter) error
}

type V1OrganizationsCreate201JSONResponse struct{ N201JSONResponse }

func (response V1OrganizationsCreate201JSONResponse) VisitV1OrganizationsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsCreate400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationsCreate400JSONResponse) VisitV1OrganizationsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsCreate401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationsCreate401JSONResponse) VisitV1OrganizationsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsCreate403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationsCreate403JSONResponse) VisitV1OrganizationsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationsCreate500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationsCreate500JSONResponse) VisitV1OrganizationsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationDeleteRequestObject struct {
	Id     Id `json:"id"`
	Params V1OrganizationDeleteParams
}

type V1OrganizationDeleteResponseObject interface {
	VisitV1OrganizationDeleteResponse(w http.ResponseWriter) error
}

type V1OrganizationDelete204Response struct {
}

func (response V1OrganizationDelete204Response) VisitV1OrganizationDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type V1OrganizationDelete400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationDelete400JSONResponse) VisitV1OrganizationDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationDelete401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationDelete401JSONResponse) VisitV1OrganizationDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationDelete403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationDelete403JSONResponse) VisitV1OrganizationDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationDelete404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationDelete404JSONResponse) VisitV1OrganizationDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationDelete500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationDelete500JSONResponse) VisitV1OrganizationDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationGetRequestObject struct {
	Id Id `json:"id"`
}

type V1OrganizationGetResponseObject interface {
	VisitV1OrganizationGetResponse(w http.ResponseWriter) error
}

type V1OrganizationGet200JSONResponse Organization

func (response V1OrganizationGet200JSONResponse) VisitV1OrganizationGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationGet400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationGet400JSONResponse) VisitV1OrganizationGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationGet401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationGet401JSONResponse) VisitV1OrganizationGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationGet403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationGet403JSONResponse) VisitV1OrganizationGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationGet404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationGet404JSONResponse) VisitV1OrganizationGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationGet500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationGet500JSONResponse) VisitV1OrganizationGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationUpdateRequestObject struct {
	Id   Id `json:"id"`
	Body *V1OrganizationUpdateJSONRequestBody
}

type V1OrganizationUpdateResponseObject interface {
	VisitV1OrganizationUpdateResponse(w http.ResponseWriter) error
}

type V1OrganizationUpdate200JSONResponse Organization

func (response V1OrganizationUpdate200JSONResponse) VisitV1OrganizationUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationUpdate400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationUpdate400JSONResponse) VisitV1OrganizationUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationUpdate401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationUpdate401JSONResponse) VisitV1OrganizationUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationUpdate403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationUpdate403JSONResponse) VisitV1OrganizationUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationUpdate404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationUpdate404JSONResponse) VisitV1OrganizationUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationUpdate500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationUpdate500JSONResponse) VisitV1OrganizationUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersGetRequestObject struct {
	Id Id `json:"id"`
}

type V1OrganizationMembersGetResponseObject interface {
	VisitV1OrganizationMembersGetResponse(w http.ResponseWriter) error
}

type V1OrganizationMembersGet200JSONResponse []User

func (response V1OrganizationMembersGet200JSONResponse) VisitV1OrganizationMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersGet400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationMembersGet400JSONResponse) VisitV1OrganizationMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersGet401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationMembersGet401JSONResponse) VisitV1OrganizationMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersGet403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationMembersGet403JSONResponse) VisitV1OrganizationMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersGet404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationMembersGet404JSONResponse) VisitV1OrganizationMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersGet500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationMembersGet500JSONResponse) VisitV1OrganizationMembersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersAddRequestObject struct {
	Id   Id `json:"id"`
	Body *V1OrganizationMembersAddJSONRequestBody
}

type V1OrganizationMembersAddResponseObject interface {
	VisitV1OrganizationMembersAddResponse(w http.ResponseWriter) error
}

type V1OrganizationMembersAdd201JSONResponse struct{ N201JSONResponse }

func (response V1OrganizationMembersAdd201JSONResponse) VisitV1OrganizationMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersAdd400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationMembersAdd400JSONResponse) VisitV1OrganizationMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersAdd401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationMembersAdd401JSONResponse) VisitV1OrganizationMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersAdd403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationMembersAdd403JSONResponse) VisitV1OrganizationMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersAdd404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationMembersAdd404JSONResponse) VisitV1OrganizationMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersAdd500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationMembersAdd500JSONResponse) VisitV1OrganizationMembersAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersRemoveRequestObject struct {
	Id     Id     `json:"id"`
	UserId string `json:"user_id"`
}

type V1OrganizationMembersRemoveResponseObject interface {
	VisitV1OrganizationMembersRemoveResponse(w http.ResponseWriter) error
}

type V1OrganizationMembersRemove204Response struct {
}

func (response V1OrganizationMembersRemove204Response) VisitV1OrganizationMembersRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type V1OrganizationMembersRemove400JSONResponse struct{ N400JSONResponse }

func (response V1OrganizationMembersRemove400JSONResponse) VisitV1OrganizationMembersRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersRemove401JSONResponse struct{ N401JSONResponse }

func (response V1OrganizationMembersRemove401JSONResponse) VisitV1OrganizationMembersRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersRemove403JSONResponse struct{ N403JSONResponse }

func (response V1OrganizationMembersRemove403JSONResponse) VisitV1OrganizationMembersRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersRemove404JSONResponse struct{ N404JSONResponse }

func (response V1OrganizationMembersRemove404JSONResponse) VisitV1OrganizationMembersRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1OrganizationMembersRemove500JSONResponse struct{ N500JSONResponse }

func (response V1OrganizationMembersRemove500JSONResponse) VisitV1OrganizationMembersRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemHealthRequestObject struct {
}

type V1SystemHealthResponseObject interface {
	VisitV1SystemHealthResponse(w http.ResponseWriter) error
}

type V1SystemHealth200JSONResponse SystemHealth

func (response V1SystemHealth200JSONResponse) VisitV1SystemHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemHealth500JSONResponse struct{ N500JSONResponse }

func (response V1SystemHealth500JSONResponse) VisitV1SystemHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemHeartbeatRequestObject struct {
}

type V1SystemHeartbeatResponseObject interface {
	VisitV1SystemHeartbeatResponse(w http.ResponseWriter) error
}

type V1SystemHeartbeat200TextResponse string

func (response V1SystemHeartbeat200TextResponse) VisitV1SystemHeartbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type V1SystemHeartbeat500JSONResponse struct{ N500JSONResponse }

func (response V1SystemHeartbeat500JSONResponse) VisitV1SystemHeartbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemLicenseRequestObject struct {
}

type V1SystemLicenseResponseObject interface {
	VisitV1SystemLicenseResponse(w http.ResponseWriter) error
}

type V1SystemLicense200JSONResponse SystemLicense

func (response V1SystemLicense200JSONResponse) VisitV1SystemLicenseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemLicense403JSONResponse struct{ N403JSONResponse }

func (response V1SystemLicense403JSONResponse) VisitV1SystemLicenseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemLicense500JSONResponse struct{ N500JSONResponse }

func (response V1SystemLicense500JSONResponse) VisitV1SystemLicenseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemVersionRequestObject struct {
}

type V1SystemVersionResponseObject interface {
	VisitV1SystemVersionResponse(w http.ResponseWriter) error
}

type V1SystemVersion200JSONResponse SystemVersion

func (response V1SystemVersion200JSONResponse) VisitV1SystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1SystemVersion500JSONResponse struct{ N500JSONResponse }

func (response V1SystemVersion500JSONResponse) VisitV1SystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosGetRequestObject struct {
	Params V1TodosGetParams
}

type V1TodosGetResponseObject interface {
	VisitV1TodosGetResponse(w http.ResponseWriter) error
}

type V1TodosGet200JSONResponse []Todo

func (response V1TodosGet200JSONResponse) VisitV1TodosGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosGet401JSONResponse struct{ N401JSONResponse }

func (response V1TodosGet401JSONResponse) VisitV1TodosGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosGet403JSONResponse struct{ N403JSONResponse }

func (response V1TodosGet403JSONResponse) VisitV1TodosGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosGet404JSONResponse struct{ N404JSONResponse }

func (response V1TodosGet404JSONResponse) VisitV1TodosGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosGet500JSONResponse struct{ N500JSONResponse }

func (response V1TodosGet500JSONResponse) VisitV1TodosGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosCreateRequestObject struct {
	Body *V1TodosCreateJSONRequestBody
}

type V1TodosCreateResponseObject interface {
	VisitV1TodosCreateResponse(w http.ResponseWriter) error
}

type V1TodosCreate201JSONResponse struct{ N201JSONResponse }

func (response V1TodosCreate201JSONResponse) VisitV1TodosCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosCreate400JSONResponse struct{ N400JSONResponse }

func (response V1TodosCreate400JSONResponse) VisitV1TodosCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosCreate401JSONResponse struct{ N401JSONResponse }

func (response V1TodosCreate401JSONResponse) VisitV1TodosCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosCreate403JSONResponse struct{ N403JSONResponse }

func (response V1TodosCreate403JSONResponse) VisitV1TodosCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TodosCreate500JSONResponse struct{ N500JSONResponse }

func (response V1TodosCreate500JSONResponse) VisitV1TodosCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoDeleteRequestObject struct {
	Id Id `json:"id"`
}

type V1TodoDeleteResponseObject interface {
	VisitV1TodoDeleteResponse(w http.ResponseWriter) error
}

type V1TodoDelete204Response struct {
}

func (response V1TodoDelete204Response) VisitV1TodoDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type V1TodoDelete400JSONResponse struct{ N400JSONResponse }

func (response V1TodoDelete400JSONResponse) VisitV1TodoDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoDelete401JSONResponse struct{ N401JSONResponse }

func (response V1TodoDelete401JSONResponse) VisitV1TodoDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoDelete403JSONResponse struct{ N403JSONResponse }

func (response V1TodoDelete403JSONResponse) VisitV1TodoDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoDelete404JSONResponse struct{ N404JSONResponse }

func (response V1TodoDelete404JSONResponse) VisitV1TodoDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoDelete500JSONResponse struct{ N500JSONResponse }

func (response V1TodoDelete500JSONResponse) VisitV1TodoDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoGetRequestObject struct {
	Id Id `json:"id"`
}

type V1TodoGetResponseObject interface {
	VisitV1TodoGetResponse(w http.ResponseWriter) error
}

type V1TodoGet200JSONResponse Todo

func (response V1TodoGet200JSONResponse) VisitV1TodoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoGet400JSONResponse struct{ N400JSONResponse }

func (response V1TodoGet400JSONResponse) VisitV1TodoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoGet401JSONResponse struct{ N401JSONResponse }

func (response V1TodoGet401JSONResponse) VisitV1TodoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoGet403JSONResponse struct{ N403JSONResponse }

func (response V1TodoGet403JSONResponse) VisitV1TodoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoGet404JSONResponse struct{ N404JSONResponse }

func (response V1TodoGet404JSONResponse) VisitV1TodoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoGet500JSONResponse struct{ N500JSONResponse }

func (response V1TodoGet500JSONResponse) VisitV1TodoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoUpdateRequestObject struct {
	Id   Id `json:"id"`
	Body *V1TodoUpdateJSONRequestBody
}

type V1TodoUpdateResponseObject interface {
	VisitV1TodoUpdateResponse(w http.ResponseWriter) error
}

type V1TodoUpdate200JSONResponse Todo

func (response V1TodoUpdate200JSONResponse) VisitV1TodoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoUpdate400JSONResponse struct{ N400JSONResponse }

func (response V1TodoUpdate400JSONResponse) VisitV1TodoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoUpdate401JSONResponse struct{ N401JSONResponse }

func (response V1TodoUpdate401JSONResponse) VisitV1TodoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoUpdate403JSONResponse struct{ N403JSONResponse }

func (response V1TodoUpdate403JSONResponse) VisitV1TodoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoUpdate404JSONResponse struct{ N404JSONResponse }

func (response V1TodoUpdate404JSONResponse) VisitV1TodoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1TodoUpdate500JSONResponse struct{ N500JSONResponse }

func (response V1TodoUpdate500JSONResponse) VisitV1TodoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersGetRequestObject struct {
	Params V1UsersGetParams
}

type V1UsersGetResponseObject interface {
	VisitV1UsersGetResponse(w http.ResponseWriter) error
}

type V1UsersGet200JSONResponse []User

func (response V1UsersGet200JSONResponse) VisitV1UsersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersGet401JSONResponse struct{ N401JSONResponse }

func (response V1UsersGet401JSONResponse) VisitV1UsersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersGet403JSONResponse struct{ N403JSONResponse }

func (response V1UsersGet403JSONResponse) VisitV1UsersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersGet500JSONResponse struct{ N500JSONResponse }

func (response V1UsersGet500JSONResponse) VisitV1UsersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersCreateRequestObject struct {
	Body *V1UsersCreateJSONRequestBody
}

type V1UsersCreateResponseObject interface {
	VisitV1UsersCreateResponse(w http.ResponseWriter) error
}

type V1UsersCreate201JSONResponse struct{ N201JSONResponse }

func (response V1UsersCreate201JSONResponse) VisitV1UsersCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersCreate400JSONResponse struct{ N400JSONResponse }

func (response V1UsersCreate400JSONResponse) VisitV1UsersCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersCreate401JSONResponse struct{ N401JSONResponse }

func (response V1UsersCreate401JSONResponse) VisitV1UsersCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersCreate403JSONResponse struct{ N403JSONResponse }

func (response V1UsersCreate403JSONResponse) VisitV1UsersCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1UsersCreate500JSONResponse struct{ N500JSONResponse }

func (response V1UsersCreate500JSONResponse) VisitV1UsersCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1UserDeleteRequestObject struct {
	Id     Id `json:"id"`
	Params V1UserDeleteParams
}

type V1UserDeleteResponseObject interface {
	VisitV1UserDeleteResponse(w http.ResponseWriter) error
}

type V1UserDelete204Response struct {
}

func (response V1UserDelete204Response) VisitV1UserDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type V1UserDelete400JSONResponse struct{ N400JSONResponse }

func (response V1UserDelete400JSONResponse) VisitV1UserDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1UserDelete401JSONResponse struct{ N401JSONResponse }

func (response V1UserDelete401JSONResponse) VisitV1UserDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1UserDelete403JSONResponse struct{ N403JSONResponse }

func (response V1UserDelete403JSONResponse) VisitV1UserDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1UserDelete404JSONResponse struct{ N404JSONResponse }

func (response V1UserDelete404JSONResponse) VisitV1UserDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1UserDelete500JSONResponse struct{ N500JSONResponse }

func (response V1UserDelete500JSONResponse) VisitV1UserDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1UserGetRequestObject struct {
	Id Id `json:"id"`
}

type V1UserGetResponseObject interface {
	VisitV1UserGetResponse(w http.ResponseWriter) error
}

type V1UserGet200JSONResponse User

func (response V1UserGet200JSONResponse) VisitV1UserGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1UserGet400JSONResponse struct{ N400JSONResponse }

func (response V1UserGet400JSONResponse) VisitV1UserGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1UserGet401JSONResponse struct{ N401JSONResponse }

func (response V1UserGet401JSONResponse) VisitV1UserGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1UserGet403JSONResponse struct{ N403JSONResponse }

func (response V1UserGet403JSONResponse) VisitV1UserGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1UserGet404JSONResponse struct{ N404JSONResponse }

func (response V1UserGet404JSONResponse) VisitV1UserGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1UserGet500JSONResponse struct{ N500JSONResponse }

func (response V1UserGet500JSONResponse) VisitV1UserGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1UserUpdateRequestObject struct {
	Id   Id `json:"id"`
	Body *V1UserUpdateJSONRequestBody
}

type V1UserUpdateResponseObject interface {
	VisitV1UserUpdateResponse(w http.ResponseWriter) error
}

type V1UserUpdate200JSONResponse User

func (response V1UserUpdate200JSONResponse) VisitV1UserUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1UserUpdate400JSONResponse struct{ N400JSONResponse }

func (response V1UserUpdate400JSONResponse) VisitV1UserUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1UserUpdate401JSONResponse struct{ N401JSONResponse }

func (response V1UserUpdate401JSONResponse) VisitV1UserUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V1UserUpdate403JSONResponse struct{ N403JSONResponse }

func (response V1UserUpdate403JSONResponse) VisitV1UserUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type V1UserUpdate404JSONResponse struct{ N404JSONResponse }

func (response V1UserUpdate404JSONResponse) VisitV1UserUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1UserUpdate500JSONResponse struct{ N500JSONResponse }

func (response V1UserUpdate500JSONResponse) VisitV1UserUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get organizations
	// (GET /v1/organizations)
	V1OrganizationsGet(ctx context.Context, request V1OrganizationsGetRequestObject) (V1OrganizationsGetResponseObject, error)
	// Create organization
	// (POST /v1/organizations)
	V1OrganizationsCreate(ctx context.Context, request V1OrganizationsCreateRequestObject) (V1OrganizationsCreateResponseObject, error)
	// Delete organization
	// (DELETE /v1/organizations/{id})
	V1OrganizationDelete(ctx context.Context, request V1OrganizationDeleteRequestObject) (V1OrganizationDeleteResponseObject, error)
	// Get organization
	// (GET /v1/organizations/{id})
	V1OrganizationGet(ctx context.Context, request V1OrganizationGetRequestObject) (V1OrganizationGetResponseObject, error)
	// Update organization
	// (PATCH /v1/organizations/{id})
	V1OrganizationUpdate(ctx context.Context, request V1OrganizationUpdateRequestObject) (V1OrganizationUpdateResponseObject, error)
	// Get organization members
	// (GET /v1/organizations/{id}/members)
	V1OrganizationMembersGet(ctx context.Context, request V1OrganizationMembersGetRequestObject) (V1OrganizationMembersGetResponseObject, error)
	// Add organization member
	// (POST /v1/organizations/{id}/members)
	V1OrganizationMembersAdd(ctx context.Context, request V1OrganizationMembersAddRequestObject) (V1OrganizationMembersAddResponseObject, error)
	// Remove organization member
	// (DELETE /v1/organizations/{id}/members/{user_id})
	V1OrganizationMembersRemove(ctx context.Context, request V1OrganizationMembersRemoveRequestObject) (V1OrganizationMembersRemoveResponseObject, error)
	// Get system health
	// (GET /v1/system/health)
	V1SystemHealth(ctx context.Context, request V1SystemHealthRequestObject) (V1SystemHealthResponseObject, error)
	// Get heartbeat
	// (GET /v1/system/heartbeat)
	V1SystemHeartbeat(ctx context.Context, request V1SystemHeartbeatRequestObject) (V1SystemHeartbeatResponseObject, error)
	// Get license info
	// (GET /v1/system/license)
	V1SystemLicense(ctx context.Context, request V1SystemLicenseRequestObject) (V1SystemLicenseResponseObject, error)
	// Get system version
	// (GET /v1/system/version)
	V1SystemVersion(ctx context.Context, request V1SystemVersionRequestObject) (V1SystemVersionResponseObject, error)
	// Get todo item
	// (GET /v1/todos)
	V1TodosGet(ctx context.Context, request V1TodosGetRequestObject) (V1TodosGetResponseObject, error)
	// Create todo item
	// (POST /v1/todos)
	V1TodosCreate(ctx context.Context, request V1TodosCreateRequestObject) (V1TodosCreateResponseObject, error)
	// Delete todo item
	// (DELETE /v1/todos/{id})
	V1TodoDelete(ctx context.Context, request V1TodoDeleteRequestObject) (V1TodoDeleteResponseObject, error)
	// Get todo item
	// (GET /v1/todos/{id})
	V1TodoGet(ctx context.Context, request V1TodoGetRequestObject) (V1TodoGetResponseObject, error)
	// Update todo
	// (PATCH /v1/todos/{id})
	V1TodoUpdate(ctx context.Context, request V1TodoUpdateRequestObject) (V1TodoUpdateResponseObject, error)
	// Get all users
	// (GET /v1/users)
	V1UsersGet(ctx context.Context, request V1UsersGetRequestObject) (V1UsersGetResponseObject, error)
	// Create new user
	// (POST /v1/users)
	V1UsersCreate(ctx context.Context, request V1UsersCreateRequestObject) (V1UsersCreateResponseObject, error)
	// Delete the user with the given ID.
	// (DELETE /v1/users/{id})
	V1UserDelete(ctx context.Context, request V1UserDeleteRequestObject) (V1UserDeleteResponseObject, error)
	// Get user
	// (GET /v1/users/{id})
	V1UserGet(ctx context.Context, request V1UserGetRequestObject) (V1UserGetResponseObject, error)
	// Update user
	// (PATCH /v1/users/{id})
	V1UserUpdate(ctx context.Context, request V1UserUpdateRequestObject) (V1UserUpdateResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// V1OrganizationsGet operation middleware
func (sh *strictHandler) V1OrganizationsGet(w http.ResponseWriter, r *http.Request, params V1OrganizationsGetParams) {
	var request V1OrganizationsGetRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationsGet(ctx, request.(V1OrganizationsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationsGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationsGetResponseObject); ok {
		if err := validResponse.VisitV1OrganizationsGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1OrganizationsCreate operation middleware
func (sh *strictHandler) V1OrganizationsCreate(w http.ResponseWriter, r *http.Request) {
	var request V1OrganizationsCreateRequestObject

	var body V1OrganizationsCreateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationsCreate(ctx, request.(V1OrganizationsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationsCreate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationsCreateResponseObject); ok {
		if err := validResponse.VisitV1OrganizationsCreateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1OrganizationDelete operation middleware
func (sh *strictHandler) V1OrganizationDelete(w http.ResponseWriter, r *http.Request, id Id, params V1OrganizationDeleteParams) {
	var request V1OrganizationDeleteRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationDelete(ctx, request.(V1OrganizationDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationDelete")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationDeleteResponseObject); ok {
		if err := validResponse.VisitV1OrganizationDeleteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1OrganizationGet operation middleware
func (sh *strictHandler) V1OrganizationGet(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1OrganizationGetRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationGet(ctx, request.(V1OrganizationGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationGetResponseObject); ok {
		if err := validResponse.VisitV1OrganizationGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1OrganizationUpdate operation middleware
func (sh *strictHandler) V1OrganizationUpdate(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1OrganizationUpdateRequestObject

	request.Id = id

	var body V1OrganizationUpdateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationUpdate(ctx, request.(V1OrganizationUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationUpdate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationUpdateResponseObject); ok {
		if err := validResponse.VisitV1OrganizationUpdateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1OrganizationMembersGet operation middleware
func (sh *strictHandler) V1OrganizationMembersGet(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1OrganizationMembersGetRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationMembersGet(ctx, request.(V1OrganizationMembersGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationMembersGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationMembersGetResponseObject); ok {
		if err := validResponse.VisitV1OrganizationMembersGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1OrganizationMembersAdd operation middleware
func (sh *strictHandler) V1OrganizationMembersAdd(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1OrganizationMembersAddRequestObject

	request.Id = id

	var body V1OrganizationMembersAddJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationMembersAdd(ctx, request.(V1OrganizationMembersAddRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationMembersAdd")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationMembersAddResponseObject); ok {
		if err := validResponse.VisitV1OrganizationMembersAddResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1OrganizationMembersRemove operation middleware
func (sh *strictHandler) V1OrganizationMembersRemove(w http.ResponseWriter, r *http.Request, id Id, userId string) {
	var request V1OrganizationMembersRemoveRequestObject

	request.Id = id
	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1OrganizationMembersRemove(ctx, request.(V1OrganizationMembersRemoveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OrganizationMembersRemove")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1OrganizationMembersRemoveResponseObject); ok {
		if err := validResponse.VisitV1OrganizationMembersRemoveResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1SystemHealth operation middleware
func (sh *strictHandler) V1SystemHealth(w http.ResponseWriter, r *http.Request) {
	var request V1SystemHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1SystemHealth(ctx, request.(V1SystemHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1SystemHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1SystemHealthResponseObject); ok {
		if err := validResponse.VisitV1SystemHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1SystemHeartbeat operation middleware
func (sh *strictHandler) V1SystemHeartbeat(w http.ResponseWriter, r *http.Request) {
	var request V1SystemHeartbeatRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1SystemHeartbeat(ctx, request.(V1SystemHeartbeatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1SystemHeartbeat")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1SystemHeartbeatResponseObject); ok {
		if err := validResponse.VisitV1SystemHeartbeatResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1SystemLicense operation middleware
func (sh *strictHandler) V1SystemLicense(w http.ResponseWriter, r *http.Request) {
	var request V1SystemLicenseRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1SystemLicense(ctx, request.(V1SystemLicenseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1SystemLicense")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1SystemLicenseResponseObject); ok {
		if err := validResponse.VisitV1SystemLicenseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1SystemVersion operation middleware
func (sh *strictHandler) V1SystemVersion(w http.ResponseWriter, r *http.Request) {
	var request V1SystemVersionRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1SystemVersion(ctx, request.(V1SystemVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1SystemVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1SystemVersionResponseObject); ok {
		if err := validResponse.VisitV1SystemVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1TodosGet operation middleware
func (sh *strictHandler) V1TodosGet(w http.ResponseWriter, r *http.Request, params V1TodosGetParams) {
	var request V1TodosGetRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1TodosGet(ctx, request.(V1TodosGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TodosGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1TodosGetResponseObject); ok {
		if err := validResponse.VisitV1TodosGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1TodosCreate operation middleware
func (sh *strictHandler) V1TodosCreate(w http.ResponseWriter, r *http.Request) {
	var request V1TodosCreateRequestObject

	var body V1TodosCreateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1TodosCreate(ctx, request.(V1TodosCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TodosCreate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1TodosCreateResponseObject); ok {
		if err := validResponse.VisitV1TodosCreateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1TodoDelete operation middleware
func (sh *strictHandler) V1TodoDelete(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1TodoDeleteRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1TodoDelete(ctx, request.(V1TodoDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TodoDelete")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1TodoDeleteResponseObject); ok {
		if err := validResponse.VisitV1TodoDeleteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1TodoGet operation middleware
func (sh *strictHandler) V1TodoGet(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1TodoGetRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1TodoGet(ctx, request.(V1TodoGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TodoGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1TodoGetResponseObject); ok {
		if err := validResponse.VisitV1TodoGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1TodoUpdate operation middleware
func (sh *strictHandler) V1TodoUpdate(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1TodoUpdateRequestObject

	request.Id = id

	var body V1TodoUpdateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1TodoUpdate(ctx, request.(V1TodoUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TodoUpdate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1TodoUpdateResponseObject); ok {
		if err := validResponse.VisitV1TodoUpdateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1UsersGet operation middleware
func (sh *strictHandler) V1UsersGet(w http.ResponseWriter, r *http.Request, params V1UsersGetParams) {
	var request V1UsersGetRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1UsersGet(ctx, request.(V1UsersGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UsersGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1UsersGetResponseObject); ok {
		if err := validResponse.VisitV1UsersGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1UsersCreate operation middleware
func (sh *strictHandler) V1UsersCreate(w http.ResponseWriter, r *http.Request) {
	var request V1UsersCreateRequestObject

	var body V1UsersCreateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1UsersCreate(ctx, request.(V1UsersCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UsersCreate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1UsersCreateResponseObject); ok {
		if err := validResponse.VisitV1UsersCreateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1UserDelete operation middleware
func (sh *strictHandler) V1UserDelete(w http.ResponseWriter, r *http.Request, id Id, params V1UserDeleteParams) {
	var request V1UserDeleteRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1UserDelete(ctx, request.(V1UserDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UserDelete")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1UserDeleteResponseObject); ok {
		if err := validResponse.VisitV1UserDeleteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1UserGet operation middleware
func (sh *strictHandler) V1UserGet(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1UserGetRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1UserGet(ctx, request.(V1UserGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UserGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1UserGetResponseObject); ok {
		if err := validResponse.VisitV1UserGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// V1UserUpdate operation middleware
func (sh *strictHandler) V1UserUpdate(w http.ResponseWriter, r *http.Request, id Id) {
	var request V1UserUpdateRequestObject

	request.Id = id

	var body V1UserUpdateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1UserUpdate(ctx, request.(V1UserUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UserUpdate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1UserUpdateResponseObject); ok {
		if err := validResponse.VisitV1UserUpdateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
