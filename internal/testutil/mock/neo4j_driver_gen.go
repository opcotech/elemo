// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/neo4j/neo4j-go-driver/v5/neo4j (interfaces: DriverWithContext)
//
// Generated by this command:
//
//	mockgen -destination ../../testutil/mock/neo4j_driver_gen.go -package mock github.com/neo4j/neo4j-go-driver/v5/neo4j DriverWithContext
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	url "net/url"
	reflect "reflect"

	neo4j "github.com/neo4j/neo4j-go-driver/v5/neo4j"
	gomock "go.uber.org/mock/gomock"
)

// MockDriverWithContext is a mock of DriverWithContext interface.
type MockDriverWithContext struct {
	ctrl     *gomock.Controller
	recorder *MockDriverWithContextMockRecorder
	isgomock struct{}
}

// MockDriverWithContextMockRecorder is the mock recorder for MockDriverWithContext.
type MockDriverWithContextMockRecorder struct {
	mock *MockDriverWithContext
}

// NewMockDriverWithContext creates a new mock instance.
func NewMockDriverWithContext(ctrl *gomock.Controller) *MockDriverWithContext {
	mock := &MockDriverWithContext{ctrl: ctrl}
	mock.recorder = &MockDriverWithContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverWithContext) EXPECT() *MockDriverWithContextMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDriverWithContext) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDriverWithContextMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDriverWithContext)(nil).Close), ctx)
}

// ExecuteQueryBookmarkManager mocks base method.
func (m *MockDriverWithContext) ExecuteQueryBookmarkManager() neo4j.BookmarkManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteQueryBookmarkManager")
	ret0, _ := ret[0].(neo4j.BookmarkManager)
	return ret0
}

// ExecuteQueryBookmarkManager indicates an expected call of ExecuteQueryBookmarkManager.
func (mr *MockDriverWithContextMockRecorder) ExecuteQueryBookmarkManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQueryBookmarkManager", reflect.TypeOf((*MockDriverWithContext)(nil).ExecuteQueryBookmarkManager))
}

// GetServerInfo mocks base method.
func (m *MockDriverWithContext) GetServerInfo(ctx context.Context) (neo4j.ServerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerInfo", ctx)
	ret0, _ := ret[0].(neo4j.ServerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerInfo indicates an expected call of GetServerInfo.
func (mr *MockDriverWithContextMockRecorder) GetServerInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerInfo", reflect.TypeOf((*MockDriverWithContext)(nil).GetServerInfo), ctx)
}

// IsEncrypted mocks base method.
func (m *MockDriverWithContext) IsEncrypted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEncrypted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEncrypted indicates an expected call of IsEncrypted.
func (mr *MockDriverWithContextMockRecorder) IsEncrypted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEncrypted", reflect.TypeOf((*MockDriverWithContext)(nil).IsEncrypted))
}

// NewSession mocks base method.
func (m *MockDriverWithContext) NewSession(ctx context.Context, config neo4j.SessionConfig) neo4j.SessionWithContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", ctx, config)
	ret0, _ := ret[0].(neo4j.SessionWithContext)
	return ret0
}

// NewSession indicates an expected call of NewSession.
func (mr *MockDriverWithContextMockRecorder) NewSession(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockDriverWithContext)(nil).NewSession), ctx, config)
}

// Target mocks base method.
func (m *MockDriverWithContext) Target() url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(url.URL)
	return ret0
}

// Target indicates an expected call of Target.
func (mr *MockDriverWithContextMockRecorder) Target() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockDriverWithContext)(nil).Target))
}

// VerifyAuthentication mocks base method.
func (m *MockDriverWithContext) VerifyAuthentication(ctx context.Context, auth *neo4j.AuthToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAuthentication", ctx, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAuthentication indicates an expected call of VerifyAuthentication.
func (mr *MockDriverWithContextMockRecorder) VerifyAuthentication(ctx, auth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuthentication", reflect.TypeOf((*MockDriverWithContext)(nil).VerifyAuthentication), ctx, auth)
}

// VerifyConnectivity mocks base method.
func (m *MockDriverWithContext) VerifyConnectivity(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyConnectivity", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyConnectivity indicates an expected call of VerifyConnectivity.
func (mr *MockDriverWithContextMockRecorder) VerifyConnectivity(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyConnectivity", reflect.TypeOf((*MockDriverWithContext)(nil).VerifyConnectivity), ctx)
}
