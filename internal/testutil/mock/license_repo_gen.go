// Code generated by MockGen. DO NOT EDIT.
// Source: license.go
//
// Generated by this command:
//
//	mockgen -source=license.go -destination=../testutil/mock/license_repo_gen.go -package=mock -mock_names LicenseRepository=LicenseRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// LicenseRepository is a mock of LicenseRepository interface.
type LicenseRepository struct {
	ctrl     *gomock.Controller
	recorder *LicenseRepositoryMockRecorder
	isgomock struct{}
}

// LicenseRepositoryMockRecorder is the mock recorder for LicenseRepository.
type LicenseRepositoryMockRecorder struct {
	mock *LicenseRepository
}

// NewLicenseRepository creates a new mock instance.
func NewLicenseRepository(ctrl *gomock.Controller) *LicenseRepository {
	mock := &LicenseRepository{ctrl: ctrl}
	mock.recorder = &LicenseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *LicenseRepository) EXPECT() *LicenseRepositoryMockRecorder {
	return m.recorder
}

// ActiveOrganizationCount mocks base method.
func (m *LicenseRepository) ActiveOrganizationCount(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveOrganizationCount", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveOrganizationCount indicates an expected call of ActiveOrganizationCount.
func (mr *LicenseRepositoryMockRecorder) ActiveOrganizationCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveOrganizationCount", reflect.TypeOf((*LicenseRepository)(nil).ActiveOrganizationCount), ctx)
}

// ActiveUserCount mocks base method.
func (m *LicenseRepository) ActiveUserCount(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveUserCount", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveUserCount indicates an expected call of ActiveUserCount.
func (mr *LicenseRepositoryMockRecorder) ActiveUserCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveUserCount", reflect.TypeOf((*LicenseRepository)(nil).ActiveUserCount), ctx)
}

// DocumentCount mocks base method.
func (m *LicenseRepository) DocumentCount(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DocumentCount", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DocumentCount indicates an expected call of DocumentCount.
func (mr *LicenseRepositoryMockRecorder) DocumentCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DocumentCount", reflect.TypeOf((*LicenseRepository)(nil).DocumentCount), ctx)
}

// NamespaceCount mocks base method.
func (m *LicenseRepository) NamespaceCount(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceCount", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamespaceCount indicates an expected call of NamespaceCount.
func (mr *LicenseRepositoryMockRecorder) NamespaceCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceCount", reflect.TypeOf((*LicenseRepository)(nil).NamespaceCount), ctx)
}

// ProjectCount mocks base method.
func (m *LicenseRepository) ProjectCount(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectCount", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectCount indicates an expected call of ProjectCount.
func (mr *LicenseRepositoryMockRecorder) ProjectCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectCount", reflect.TypeOf((*LicenseRepository)(nil).ProjectCount), ctx)
}

// RoleCount mocks base method.
func (m *LicenseRepository) RoleCount(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleCount", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleCount indicates an expected call of RoleCount.
func (mr *LicenseRepositoryMockRecorder) RoleCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleCount", reflect.TypeOf((*LicenseRepository)(nil).RoleCount), ctx)
}
