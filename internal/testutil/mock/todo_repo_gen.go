// Code generated by MockGen. DO NOT EDIT.
// Source: todo.go
//
// Generated by this command:
//
//	mockgen -source=todo.go -destination=../testutil/mock/todo_repo_gen.go -package=mock -mock_names TodoRepository=TodoRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// TodoRepository is a mock of TodoRepository interface.
type TodoRepository struct {
	ctrl     *gomock.Controller
	recorder *TodoRepositoryMockRecorder
	isgomock struct{}
}

// TodoRepositoryMockRecorder is the mock recorder for TodoRepository.
type TodoRepositoryMockRecorder struct {
	mock *TodoRepository
}

// NewTodoRepository creates a new mock instance.
func NewTodoRepository(ctrl *gomock.Controller) *TodoRepository {
	mock := &TodoRepository{ctrl: ctrl}
	mock.recorder = &TodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *TodoRepository) EXPECT() *TodoRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *TodoRepository) Create(ctx context.Context, todo *model.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *TodoRepositoryMockRecorder) Create(ctx, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*TodoRepository)(nil).Create), ctx, todo)
}

// Delete mocks base method.
func (m *TodoRepository) Delete(ctx context.Context, id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *TodoRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*TodoRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *TodoRepository) Get(ctx context.Context, id model.ID) (*model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *TodoRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*TodoRepository)(nil).Get), ctx, id)
}

// GetByOwner mocks base method.
func (m *TodoRepository) GetByOwner(ctx context.Context, ownerID model.ID, offset, limit int, completed *bool) ([]*model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOwner", ctx, ownerID, offset, limit, completed)
	ret0, _ := ret[0].([]*model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOwner indicates an expected call of GetByOwner.
func (mr *TodoRepositoryMockRecorder) GetByOwner(ctx, ownerID, offset, limit, completed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOwner", reflect.TypeOf((*TodoRepository)(nil).GetByOwner), ctx, ownerID, offset, limit, completed)
}

// Update mocks base method.
func (m *TodoRepository) Update(ctx context.Context, id model.ID, patch map[string]any) (*model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, patch)
	ret0, _ := ret[0].(*model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *TodoRepositoryMockRecorder) Update(ctx, id, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*TodoRepository)(nil).Update), ctx, id, patch)
}
