// Code generated by MockGen. DO NOT EDIT.
// Source: email.go
//
// Generated by this command:
//
//	mockgen -source=email.go -destination=../testutil/mock/email_service_gen.go -package=mock -mock_names EmailService=EmailService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	email "github.com/opcotech/elemo/internal/email"
	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEmailSender is a mock of EmailSender interface.
type MockEmailSender struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderMockRecorder
	isgomock struct{}
}

// MockEmailSenderMockRecorder is the mock recorder for MockEmailSender.
type MockEmailSenderMockRecorder struct {
	mock *MockEmailSender
}

// NewMockEmailSender creates a new mock instance.
func NewMockEmailSender(ctrl *gomock.Controller) *MockEmailSender {
	mock := &MockEmailSender{ctrl: ctrl}
	mock.recorder = &MockEmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSender) EXPECT() *MockEmailSenderMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailSender) SendEmail(ctx context.Context, subject, to string, template *email.Template) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, subject, to, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailSenderMockRecorder) SendEmail(ctx, subject, to, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailSender)(nil).SendEmail), ctx, subject, to, template)
}

// EmailService is a mock of EmailService interface.
type EmailService struct {
	ctrl     *gomock.Controller
	recorder *EmailServiceMockRecorder
	isgomock struct{}
}

// EmailServiceMockRecorder is the mock recorder for EmailService.
type EmailServiceMockRecorder struct {
	mock *EmailService
}

// NewEmailService creates a new mock instance.
func NewEmailService(ctrl *gomock.Controller) *EmailService {
	mock := &EmailService{ctrl: ctrl}
	mock.recorder = &EmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *EmailService) EXPECT() *EmailServiceMockRecorder {
	return m.recorder
}

// SendAuthPasswordResetEmail mocks base method.
func (m *EmailService) SendAuthPasswordResetEmail(ctx context.Context, user *model.User, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAuthPasswordResetEmail", ctx, user, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAuthPasswordResetEmail indicates an expected call of SendAuthPasswordResetEmail.
func (mr *EmailServiceMockRecorder) SendAuthPasswordResetEmail(ctx, user, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAuthPasswordResetEmail", reflect.TypeOf((*EmailService)(nil).SendAuthPasswordResetEmail), ctx, user, token)
}

// SendOrganizationInvitationEmail mocks base method.
func (m *EmailService) SendOrganizationInvitationEmail(ctx context.Context, organization *model.Organization, user *model.User, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrganizationInvitationEmail", ctx, organization, user, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOrganizationInvitationEmail indicates an expected call of SendOrganizationInvitationEmail.
func (mr *EmailServiceMockRecorder) SendOrganizationInvitationEmail(ctx, organization, user, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrganizationInvitationEmail", reflect.TypeOf((*EmailService)(nil).SendOrganizationInvitationEmail), ctx, organization, user, token)
}

// SendSystemLicenseExpiryEmail mocks base method.
func (m *EmailService) SendSystemLicenseExpiryEmail(ctx context.Context, licenseID, licenseEmail, licenseOrganization string, licenseExpiresAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSystemLicenseExpiryEmail", ctx, licenseID, licenseEmail, licenseOrganization, licenseExpiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSystemLicenseExpiryEmail indicates an expected call of SendSystemLicenseExpiryEmail.
func (mr *EmailServiceMockRecorder) SendSystemLicenseExpiryEmail(ctx, licenseID, licenseEmail, licenseOrganization, licenseExpiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSystemLicenseExpiryEmail", reflect.TypeOf((*EmailService)(nil).SendSystemLicenseExpiryEmail), ctx, licenseID, licenseEmail, licenseOrganization, licenseExpiresAt)
}

// SendUserWelcomeEmail mocks base method.
func (m *EmailService) SendUserWelcomeEmail(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUserWelcomeEmail", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUserWelcomeEmail indicates an expected call of SendUserWelcomeEmail.
func (mr *EmailServiceMockRecorder) SendUserWelcomeEmail(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUserWelcomeEmail", reflect.TypeOf((*EmailService)(nil).SendUserWelcomeEmail), ctx, user)
}
