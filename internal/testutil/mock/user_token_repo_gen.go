// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go
//
// Generated by this command:
//
//	mockgen -source=auth.go -destination=../testutil/mock/user_token_repo_gen.go -package=mock -mock_names UserTokenRepository=UserTokenRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// UserTokenRepository is a mock of UserTokenRepository interface.
type UserTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *UserTokenRepositoryMockRecorder
	isgomock struct{}
}

// UserTokenRepositoryMockRecorder is the mock recorder for UserTokenRepository.
type UserTokenRepositoryMockRecorder struct {
	mock *UserTokenRepository
}

// NewUserTokenRepository creates a new mock instance.
func NewUserTokenRepository(ctrl *gomock.Controller) *UserTokenRepository {
	mock := &UserTokenRepository{ctrl: ctrl}
	mock.recorder = &UserTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UserTokenRepository) EXPECT() *UserTokenRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *UserTokenRepository) Create(ctx context.Context, token *model.UserToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *UserTokenRepositoryMockRecorder) Create(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*UserTokenRepository)(nil).Create), ctx, token)
}

// Delete mocks base method.
func (m *UserTokenRepository) Delete(ctx context.Context, userID model.ID, tokenCtx model.UserTokenContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, tokenCtx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *UserTokenRepositoryMockRecorder) Delete(ctx, userID, tokenCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*UserTokenRepository)(nil).Delete), ctx, userID, tokenCtx)
}

// Get mocks base method.
func (m *UserTokenRepository) Get(ctx context.Context, userID model.ID, tokenCtx model.UserTokenContext) (*model.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, tokenCtx)
	ret0, _ := ret[0].(*model.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *UserTokenRepositoryMockRecorder) Get(ctx, userID, tokenCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*UserTokenRepository)(nil).Get), ctx, userID, tokenCtx)
}
