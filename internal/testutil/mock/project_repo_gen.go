// Code generated by MockGen. DO NOT EDIT.
// Source: project.go
//
// Generated by this command:
//
//	mockgen -source=project.go -destination=../testutil/mock/project_repo_gen.go -package=mock -mock_names ProjectRepository=ProjectRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// ProjectRepository is a mock of ProjectRepository interface.
type ProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *ProjectRepositoryMockRecorder
	isgomock struct{}
}

// ProjectRepositoryMockRecorder is the mock recorder for ProjectRepository.
type ProjectRepositoryMockRecorder struct {
	mock *ProjectRepository
}

// NewProjectRepository creates a new mock instance.
func NewProjectRepository(ctrl *gomock.Controller) *ProjectRepository {
	mock := &ProjectRepository{ctrl: ctrl}
	mock.recorder = &ProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProjectRepository) EXPECT() *ProjectRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *ProjectRepository) Create(ctx context.Context, namespaceID model.ID, project *model.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, namespaceID, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *ProjectRepositoryMockRecorder) Create(ctx, namespaceID, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ProjectRepository)(nil).Create), ctx, namespaceID, project)
}

// Delete mocks base method.
func (m *ProjectRepository) Delete(ctx context.Context, id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *ProjectRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ProjectRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *ProjectRepository) Get(ctx context.Context, id model.ID) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *ProjectRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*ProjectRepository)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *ProjectRepository) GetAll(ctx context.Context, namespaceID model.ID, offset, limit int) ([]*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, namespaceID, offset, limit)
	ret0, _ := ret[0].([]*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *ProjectRepositoryMockRecorder) GetAll(ctx, namespaceID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*ProjectRepository)(nil).GetAll), ctx, namespaceID, offset, limit)
}

// GetByKey mocks base method.
func (m *ProjectRepository) GetByKey(ctx context.Context, key string) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", ctx, key)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey.
func (mr *ProjectRepositoryMockRecorder) GetByKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*ProjectRepository)(nil).GetByKey), ctx, key)
}

// Update mocks base method.
func (m *ProjectRepository) Update(ctx context.Context, id model.ID, patch map[string]any) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, patch)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *ProjectRepositoryMockRecorder) Update(ctx, id, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ProjectRepository)(nil).Update), ctx, id, patch)
}
