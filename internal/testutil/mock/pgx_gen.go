// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jackc/pgx/v5 (interfaces: Row,Rows)
//
// Generated by this command:
//
//	mockgen -destination=../../testutil/mock/pgx_gen.go -package=mock -mock_names Row=PGRow,Rows=PGRows github.com/jackc/pgx/v5 Row,Rows
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	gomock "go.uber.org/mock/gomock"
)

// PGRow is a mock of Row interface.
type PGRow struct {
	ctrl     *gomock.Controller
	recorder *PGRowMockRecorder
	isgomock struct{}
}

// PGRowMockRecorder is the mock recorder for PGRow.
type PGRowMockRecorder struct {
	mock *PGRow
}

// NewPGRow creates a new mock instance.
func NewPGRow(ctrl *gomock.Controller) *PGRow {
	mock := &PGRow{ctrl: ctrl}
	mock.recorder = &PGRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PGRow) EXPECT() *PGRowMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *PGRow) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *PGRowMockRecorder) Scan(dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*PGRow)(nil).Scan), dest...)
}

// PGRows is a mock of Rows interface.
type PGRows struct {
	ctrl     *gomock.Controller
	recorder *PGRowsMockRecorder
	isgomock struct{}
}

// PGRowsMockRecorder is the mock recorder for PGRows.
type PGRowsMockRecorder struct {
	mock *PGRows
}

// NewPGRows creates a new mock instance.
func NewPGRows(ctrl *gomock.Controller) *PGRows {
	mock := &PGRows{ctrl: ctrl}
	mock.recorder = &PGRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PGRows) EXPECT() *PGRowsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *PGRows) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *PGRowsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*PGRows)(nil).Close))
}

// CommandTag mocks base method.
func (m *PGRows) CommandTag() pgconn.CommandTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandTag")
	ret0, _ := ret[0].(pgconn.CommandTag)
	return ret0
}

// CommandTag indicates an expected call of CommandTag.
func (mr *PGRowsMockRecorder) CommandTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandTag", reflect.TypeOf((*PGRows)(nil).CommandTag))
}

// Conn mocks base method.
func (m *PGRows) Conn() *pgx.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(*pgx.Conn)
	return ret0
}

// Conn indicates an expected call of Conn.
func (mr *PGRowsMockRecorder) Conn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*PGRows)(nil).Conn))
}

// Err mocks base method.
func (m *PGRows) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *PGRowsMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*PGRows)(nil).Err))
}

// FieldDescriptions mocks base method.
func (m *PGRows) FieldDescriptions() []pgconn.FieldDescription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FieldDescriptions")
	ret0, _ := ret[0].([]pgconn.FieldDescription)
	return ret0
}

// FieldDescriptions indicates an expected call of FieldDescriptions.
func (mr *PGRowsMockRecorder) FieldDescriptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldDescriptions", reflect.TypeOf((*PGRows)(nil).FieldDescriptions))
}

// Next mocks base method.
func (m *PGRows) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *PGRowsMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*PGRows)(nil).Next))
}

// RawValues mocks base method.
func (m *PGRows) RawValues() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawValues")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// RawValues indicates an expected call of RawValues.
func (mr *PGRowsMockRecorder) RawValues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawValues", reflect.TypeOf((*PGRows)(nil).RawValues))
}

// Scan mocks base method.
func (m *PGRows) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *PGRowsMockRecorder) Scan(dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*PGRows)(nil).Scan), dest...)
}

// Values mocks base method.
func (m *PGRows) Values() ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Values indicates an expected call of Values.
func (mr *PGRowsMockRecorder) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*PGRows)(nil).Values))
}
