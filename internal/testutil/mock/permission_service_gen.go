// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/opcotech/elemo/internal/service (interfaces: PermissionService)
//
// Generated by this command:
//
//	mockgen -destination ../testutil/mock/permission_service_gen.go -package mock -mock_names PermissionService=PermissionService github.com/opcotech/elemo/internal/service PermissionService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// PermissionService is a mock of PermissionService interface.
type PermissionService struct {
	ctrl     *gomock.Controller
	recorder *PermissionServiceMockRecorder
	isgomock struct{}
}

// PermissionServiceMockRecorder is the mock recorder for PermissionService.
type PermissionServiceMockRecorder struct {
	mock *PermissionService
}

// NewPermissionService creates a new mock instance.
func NewPermissionService(ctrl *gomock.Controller) *PermissionService {
	mock := &PermissionService{ctrl: ctrl}
	mock.recorder = &PermissionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PermissionService) EXPECT() *PermissionServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *PermissionService) Create(ctx context.Context, perm *model.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *PermissionServiceMockRecorder) Create(ctx, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*PermissionService)(nil).Create), ctx, perm)
}

// CtxUserCreate mocks base method.
func (m *PermissionService) CtxUserCreate(ctx context.Context, perm *model.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CtxUserCreate", ctx, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// CtxUserCreate indicates an expected call of CtxUserCreate.
func (mr *PermissionServiceMockRecorder) CtxUserCreate(ctx, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CtxUserCreate", reflect.TypeOf((*PermissionService)(nil).CtxUserCreate), ctx, perm)
}

// CtxUserDelete mocks base method.
func (m *PermissionService) CtxUserDelete(ctx context.Context, id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CtxUserDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CtxUserDelete indicates an expected call of CtxUserDelete.
func (mr *PermissionServiceMockRecorder) CtxUserDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CtxUserDelete", reflect.TypeOf((*PermissionService)(nil).CtxUserDelete), ctx, id)
}

// CtxUserHasAnyRelation mocks base method.
func (m *PermissionService) CtxUserHasAnyRelation(ctx context.Context, target model.ID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CtxUserHasAnyRelation", ctx, target)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CtxUserHasAnyRelation indicates an expected call of CtxUserHasAnyRelation.
func (mr *PermissionServiceMockRecorder) CtxUserHasAnyRelation(ctx, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CtxUserHasAnyRelation", reflect.TypeOf((*PermissionService)(nil).CtxUserHasAnyRelation), ctx, target)
}

// CtxUserHasPermission mocks base method.
func (m *PermissionService) CtxUserHasPermission(ctx context.Context, target model.ID, permissions ...model.PermissionKind) bool {
	m.ctrl.T.Helper()
	varargs := []any{ctx, target}
	for _, a := range permissions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CtxUserHasPermission", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CtxUserHasPermission indicates an expected call of CtxUserHasPermission.
func (mr *PermissionServiceMockRecorder) CtxUserHasPermission(ctx, target any, permissions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, target}, permissions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CtxUserHasPermission", reflect.TypeOf((*PermissionService)(nil).CtxUserHasPermission), varargs...)
}

// CtxUserHasSystemRole mocks base method.
func (m *PermissionService) CtxUserHasSystemRole(ctx context.Context, roles ...model.SystemRole) bool {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range roles {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CtxUserHasSystemRole", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CtxUserHasSystemRole indicates an expected call of CtxUserHasSystemRole.
func (mr *PermissionServiceMockRecorder) CtxUserHasSystemRole(ctx any, roles ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, roles...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CtxUserHasSystemRole", reflect.TypeOf((*PermissionService)(nil).CtxUserHasSystemRole), varargs...)
}

// CtxUserUpdate mocks base method.
func (m *PermissionService) CtxUserUpdate(ctx context.Context, id model.ID, kind model.PermissionKind) (*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CtxUserUpdate", ctx, id, kind)
	ret0, _ := ret[0].(*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CtxUserUpdate indicates an expected call of CtxUserUpdate.
func (mr *PermissionServiceMockRecorder) CtxUserUpdate(ctx, id, kind any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CtxUserUpdate", reflect.TypeOf((*PermissionService)(nil).CtxUserUpdate), ctx, id, kind)
}

// Delete mocks base method.
func (m *PermissionService) Delete(ctx context.Context, id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *PermissionServiceMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*PermissionService)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *PermissionService) Get(ctx context.Context, id model.ID) (*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *PermissionServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*PermissionService)(nil).Get), ctx, id)
}

// GetBySubject mocks base method.
func (m *PermissionService) GetBySubject(ctx context.Context, id model.ID) ([]*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySubject", ctx, id)
	ret0, _ := ret[0].([]*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySubject indicates an expected call of GetBySubject.
func (mr *PermissionServiceMockRecorder) GetBySubject(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySubject", reflect.TypeOf((*PermissionService)(nil).GetBySubject), ctx, id)
}

// GetBySubjectAndTarget mocks base method.
func (m *PermissionService) GetBySubjectAndTarget(ctx context.Context, source, target model.ID) ([]*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySubjectAndTarget", ctx, source, target)
	ret0, _ := ret[0].([]*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySubjectAndTarget indicates an expected call of GetBySubjectAndTarget.
func (mr *PermissionServiceMockRecorder) GetBySubjectAndTarget(ctx, source, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySubjectAndTarget", reflect.TypeOf((*PermissionService)(nil).GetBySubjectAndTarget), ctx, source, target)
}

// GetByTarget mocks base method.
func (m *PermissionService) GetByTarget(ctx context.Context, id model.ID) ([]*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTarget", ctx, id)
	ret0, _ := ret[0].([]*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTarget indicates an expected call of GetByTarget.
func (mr *PermissionServiceMockRecorder) GetByTarget(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTarget", reflect.TypeOf((*PermissionService)(nil).GetByTarget), ctx, id)
}

// HasAnyRelation mocks base method.
func (m *PermissionService) HasAnyRelation(ctx context.Context, source, target model.ID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAnyRelation", ctx, source, target)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasAnyRelation indicates an expected call of HasAnyRelation.
func (mr *PermissionServiceMockRecorder) HasAnyRelation(ctx, source, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAnyRelation", reflect.TypeOf((*PermissionService)(nil).HasAnyRelation), ctx, source, target)
}

// HasPermission mocks base method.
func (m *PermissionService) HasPermission(ctx context.Context, subject, target model.ID, kinds ...model.PermissionKind) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subject, target}
	for _, a := range kinds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasPermission", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPermission indicates an expected call of HasPermission.
func (mr *PermissionServiceMockRecorder) HasPermission(ctx, subject, target any, kinds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subject, target}, kinds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*PermissionService)(nil).HasPermission), varargs...)
}

// HasSystemRole mocks base method.
func (m *PermissionService) HasSystemRole(ctx context.Context, source model.ID, roles ...model.SystemRole) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, source}
	for _, a := range roles {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasSystemRole", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSystemRole indicates an expected call of HasSystemRole.
func (mr *PermissionServiceMockRecorder) HasSystemRole(ctx, source any, roles ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, source}, roles...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSystemRole", reflect.TypeOf((*PermissionService)(nil).HasSystemRole), varargs...)
}

// Update mocks base method.
func (m *PermissionService) Update(ctx context.Context, id model.ID, kind model.PermissionKind) (*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, kind)
	ret0, _ := ret[0].(*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *PermissionServiceMockRecorder) Update(ctx, id, kind any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*PermissionService)(nil).Update), ctx, id, kind)
}
