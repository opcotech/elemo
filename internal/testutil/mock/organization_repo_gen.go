// Code generated by MockGen. DO NOT EDIT.
// Source: organization.go
//
// Generated by this command:
//
//	mockgen -source=organization.go -destination=../testutil/mock/organization_repo_gen.go -package=mock -mock_names OrganizationRepository=OrganizationRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// OrganizationRepository is a mock of OrganizationRepository interface.
type OrganizationRepository struct {
	ctrl     *gomock.Controller
	recorder *OrganizationRepositoryMockRecorder
	isgomock struct{}
}

// OrganizationRepositoryMockRecorder is the mock recorder for OrganizationRepository.
type OrganizationRepositoryMockRecorder struct {
	mock *OrganizationRepository
}

// NewOrganizationRepository creates a new mock instance.
func NewOrganizationRepository(ctrl *gomock.Controller) *OrganizationRepository {
	mock := &OrganizationRepository{ctrl: ctrl}
	mock.recorder = &OrganizationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *OrganizationRepository) EXPECT() *OrganizationRepositoryMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m *OrganizationRepository) AddMember(ctx context.Context, orgID, memberID model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", ctx, orgID, memberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *OrganizationRepositoryMockRecorder) AddMember(ctx, orgID, memberID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*OrganizationRepository)(nil).AddMember), ctx, orgID, memberID)
}

// Create mocks base method.
func (m *OrganizationRepository) Create(ctx context.Context, owner model.ID, organization *model.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, owner, organization)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *OrganizationRepositoryMockRecorder) Create(ctx, owner, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*OrganizationRepository)(nil).Create), ctx, owner, organization)
}

// Delete mocks base method.
func (m *OrganizationRepository) Delete(ctx context.Context, id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *OrganizationRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*OrganizationRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *OrganizationRepository) Get(ctx context.Context, id model.ID) (*model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *OrganizationRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*OrganizationRepository)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *OrganizationRepository) GetAll(ctx context.Context, userID model.ID, offset, limit int) ([]*model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID, offset, limit)
	ret0, _ := ret[0].([]*model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *OrganizationRepositoryMockRecorder) GetAll(ctx, userID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*OrganizationRepository)(nil).GetAll), ctx, userID, offset, limit)
}

// GetMembers mocks base method.
func (m *OrganizationRepository) GetMembers(ctx context.Context, orgID model.ID) ([]*model.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers", ctx, orgID)
	ret0, _ := ret[0].([]*model.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *OrganizationRepositoryMockRecorder) GetMembers(ctx, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*OrganizationRepository)(nil).GetMembers), ctx, orgID)
}

// RemoveMember mocks base method.
func (m *OrganizationRepository) RemoveMember(ctx context.Context, orgID, memberID model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", ctx, orgID, memberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *OrganizationRepositoryMockRecorder) RemoveMember(ctx, orgID, memberID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*OrganizationRepository)(nil).RemoveMember), ctx, orgID, memberID)
}

// Update mocks base method.
func (m *OrganizationRepository) Update(ctx context.Context, id model.ID, patch map[string]any) (*model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, patch)
	ret0, _ := ret[0].(*model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *OrganizationRepositoryMockRecorder) Update(ctx, id, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*OrganizationRepository)(nil).Update), ctx, id, patch)
}
