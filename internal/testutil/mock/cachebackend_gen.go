// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source=cache.go -destination=../../testutil/mock/cachebackend_gen.go -package=mock -mock_names CacheBackend=CacheBackend
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	cache "github.com/go-redis/cache/v9"
	gomock "go.uber.org/mock/gomock"
)

// CacheBackend is a mock of CacheBackend interface.
type CacheBackend struct {
	ctrl     *gomock.Controller
	recorder *CacheBackendMockRecorder
	isgomock struct{}
}

// CacheBackendMockRecorder is the mock recorder for CacheBackend.
type CacheBackendMockRecorder struct {
	mock *CacheBackend
}

// NewCacheBackend creates a new mock instance.
func NewCacheBackend(ctrl *gomock.Controller) *CacheBackend {
	mock := &CacheBackend{ctrl: ctrl}
	mock.recorder = &CacheBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CacheBackend) EXPECT() *CacheBackendMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *CacheBackend) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *CacheBackendMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*CacheBackend)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *CacheBackend) Get(ctx context.Context, key string, dst any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *CacheBackendMockRecorder) Get(ctx, key, dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*CacheBackend)(nil).Get), ctx, key, dst)
}

// Set mocks base method.
func (m *CacheBackend) Set(item *cache.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *CacheBackendMockRecorder) Set(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*CacheBackend)(nil).Set), item)
}
