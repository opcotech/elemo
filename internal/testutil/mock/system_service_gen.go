// Code generated by MockGen. DO NOT EDIT.
// Source: system.go
//
// Generated by this command:
//
//	mockgen -source=system.go -destination=../testutil/mock/system_service_gen.go -package=mock -mock_names Pingable=PingableResource,SystemService=SystemService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// PingableResource is a mock of Pingable interface.
type PingableResource struct {
	ctrl     *gomock.Controller
	recorder *PingableResourceMockRecorder
	isgomock struct{}
}

// PingableResourceMockRecorder is the mock recorder for PingableResource.
type PingableResourceMockRecorder struct {
	mock *PingableResource
}

// NewPingableResource creates a new mock instance.
func NewPingableResource(ctrl *gomock.Controller) *PingableResource {
	mock := &PingableResource{ctrl: ctrl}
	mock.recorder = &PingableResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PingableResource) EXPECT() *PingableResourceMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *PingableResource) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *PingableResourceMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*PingableResource)(nil).Ping), ctx)
}

// SystemService is a mock of SystemService interface.
type SystemService struct {
	ctrl     *gomock.Controller
	recorder *SystemServiceMockRecorder
	isgomock struct{}
}

// SystemServiceMockRecorder is the mock recorder for SystemService.
type SystemServiceMockRecorder struct {
	mock *SystemService
}

// NewSystemService creates a new mock instance.
func NewSystemService(ctrl *gomock.Controller) *SystemService {
	mock := &SystemService{ctrl: ctrl}
	mock.recorder = &SystemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SystemService) EXPECT() *SystemServiceMockRecorder {
	return m.recorder
}

// GetHealth mocks base method.
func (m *SystemService) GetHealth(ctx context.Context) (map[model.HealthCheckComponent]model.HealthStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealth", ctx)
	ret0, _ := ret[0].(map[model.HealthCheckComponent]model.HealthStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealth indicates an expected call of GetHealth.
func (mr *SystemServiceMockRecorder) GetHealth(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealth", reflect.TypeOf((*SystemService)(nil).GetHealth), ctx)
}

// GetHeartbeat mocks base method.
func (m *SystemService) GetHeartbeat(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeartbeat", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetHeartbeat indicates an expected call of GetHeartbeat.
func (mr *SystemServiceMockRecorder) GetHeartbeat(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeartbeat", reflect.TypeOf((*SystemService)(nil).GetHeartbeat), ctx)
}

// GetVersion mocks base method.
func (m *SystemService) GetVersion(ctx context.Context) *model.VersionInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", ctx)
	ret0, _ := ret[0].(*model.VersionInfo)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *SystemServiceMockRecorder) GetVersion(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*SystemService)(nil).GetVersion), ctx)
}
