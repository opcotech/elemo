// Code generated by MockGen. DO NOT EDIT.
// Source: label.go
//
// Generated by this command:
//
//	mockgen -source=label.go -destination=../testutil/mock/label_repo_gen.go -package=mock -mock_names LabelRepository=LabelRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// LabelRepository is a mock of LabelRepository interface.
type LabelRepository struct {
	ctrl     *gomock.Controller
	recorder *LabelRepositoryMockRecorder
	isgomock struct{}
}

// LabelRepositoryMockRecorder is the mock recorder for LabelRepository.
type LabelRepositoryMockRecorder struct {
	mock *LabelRepository
}

// NewLabelRepository creates a new mock instance.
func NewLabelRepository(ctrl *gomock.Controller) *LabelRepository {
	mock := &LabelRepository{ctrl: ctrl}
	mock.recorder = &LabelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *LabelRepository) EXPECT() *LabelRepositoryMockRecorder {
	return m.recorder
}

// AttachTo mocks base method.
func (m *LabelRepository) AttachTo(ctx context.Context, labelID, attachTo model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachTo", ctx, labelID, attachTo)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachTo indicates an expected call of AttachTo.
func (mr *LabelRepositoryMockRecorder) AttachTo(ctx, labelID, attachTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachTo", reflect.TypeOf((*LabelRepository)(nil).AttachTo), ctx, labelID, attachTo)
}

// Create mocks base method.
func (m *LabelRepository) Create(ctx context.Context, label *model.Label) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *LabelRepositoryMockRecorder) Create(ctx, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*LabelRepository)(nil).Create), ctx, label)
}

// Delete mocks base method.
func (m *LabelRepository) Delete(ctx context.Context, id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *LabelRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*LabelRepository)(nil).Delete), ctx, id)
}

// DetachFrom mocks base method.
func (m *LabelRepository) DetachFrom(ctx context.Context, labelID, detachFrom model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachFrom", ctx, labelID, detachFrom)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachFrom indicates an expected call of DetachFrom.
func (mr *LabelRepositoryMockRecorder) DetachFrom(ctx, labelID, detachFrom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachFrom", reflect.TypeOf((*LabelRepository)(nil).DetachFrom), ctx, labelID, detachFrom)
}

// Get mocks base method.
func (m *LabelRepository) Get(ctx context.Context, id model.ID) (*model.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *LabelRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*LabelRepository)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *LabelRepository) GetAll(ctx context.Context, offset, limit int) ([]*model.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, offset, limit)
	ret0, _ := ret[0].([]*model.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *LabelRepositoryMockRecorder) GetAll(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*LabelRepository)(nil).GetAll), ctx, offset, limit)
}

// Update mocks base method.
func (m *LabelRepository) Update(ctx context.Context, id model.ID, patch map[string]any) (*model.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, patch)
	ret0, _ := ret[0].(*model.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *LabelRepositoryMockRecorder) Update(ctx, id, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*LabelRepository)(nil).Update), ctx, id, patch)
}
