// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/opcotech/elemo/internal/service (interfaces: LicenseService)
//
// Generated by this command:
//
//	mockgen -destination ../testutil/mock/license_service_gen.go -package mock github.com/opcotech/elemo/internal/service LicenseService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	license "github.com/opcotech/elemo/internal/license"
	gomock "go.uber.org/mock/gomock"
)

// MockLicenseService is a mock of LicenseService interface.
type MockLicenseService struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseServiceMockRecorder
	isgomock struct{}
}

// MockLicenseServiceMockRecorder is the mock recorder for MockLicenseService.
type MockLicenseServiceMockRecorder struct {
	mock *MockLicenseService
}

// NewMockLicenseService creates a new mock instance.
func NewMockLicenseService(ctrl *gomock.Controller) *MockLicenseService {
	mock := &MockLicenseService{ctrl: ctrl}
	mock.recorder = &MockLicenseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLicenseService) EXPECT() *MockLicenseServiceMockRecorder {
	return m.recorder
}

// Expired mocks base method.
func (m *MockLicenseService) Expired(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expired", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expired indicates an expected call of Expired.
func (mr *MockLicenseServiceMockRecorder) Expired(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expired", reflect.TypeOf((*MockLicenseService)(nil).Expired), ctx)
}

// GetLicense mocks base method.
func (m *MockLicenseService) GetLicense(ctx context.Context) (license.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicense", ctx)
	ret0, _ := ret[0].(license.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicense indicates an expected call of GetLicense.
func (mr *MockLicenseServiceMockRecorder) GetLicense(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicense", reflect.TypeOf((*MockLicenseService)(nil).GetLicense), ctx)
}

// HasFeature mocks base method.
func (m *MockLicenseService) HasFeature(ctx context.Context, feature license.Feature) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasFeature", ctx, feature)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasFeature indicates an expected call of HasFeature.
func (mr *MockLicenseServiceMockRecorder) HasFeature(ctx, feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasFeature", reflect.TypeOf((*MockLicenseService)(nil).HasFeature), ctx, feature)
}

// Ping mocks base method.
func (m *MockLicenseService) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockLicenseServiceMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockLicenseService)(nil).Ping), ctx)
}

// WithinThreshold mocks base method.
func (m *MockLicenseService) WithinThreshold(ctx context.Context, name license.Quota) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithinThreshold", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithinThreshold indicates an expected call of WithinThreshold.
func (mr *MockLicenseServiceMockRecorder) WithinThreshold(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithinThreshold", reflect.TypeOf((*MockLicenseService)(nil).WithinThreshold), ctx, name)
}
