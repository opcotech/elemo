// Code generated by MockGen. DO NOT EDIT.
// Source: email.go
//
// Generated by this command:
//
//	mockgen -source=email.go -destination=../testutil/mock/email_sender_gen.go -package=mock -mock_names EmailSender=EmailSender
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	email "github.com/opcotech/elemo/internal/email"
	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// EmailSender is a mock of EmailSender interface.
type EmailSender struct {
	ctrl     *gomock.Controller
	recorder *EmailSenderMockRecorder
	isgomock struct{}
}

// EmailSenderMockRecorder is the mock recorder for EmailSender.
type EmailSenderMockRecorder struct {
	mock *EmailSender
}

// NewEmailSender creates a new mock instance.
func NewEmailSender(ctrl *gomock.Controller) *EmailSender {
	mock := &EmailSender{ctrl: ctrl}
	mock.recorder = &EmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *EmailSender) EXPECT() *EmailSenderMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *EmailSender) SendEmail(ctx context.Context, subject, to string, template *email.Template) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, subject, to, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *EmailSenderMockRecorder) SendEmail(ctx, subject, to, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*EmailSender)(nil).SendEmail), ctx, subject, to, template)
}

// MockEmailService is a mock of EmailService interface.
type MockEmailService struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceMockRecorder
	isgomock struct{}
}

// MockEmailServiceMockRecorder is the mock recorder for MockEmailService.
type MockEmailServiceMockRecorder struct {
	mock *MockEmailService
}

// NewMockEmailService creates a new mock instance.
func NewMockEmailService(ctrl *gomock.Controller) *MockEmailService {
	mock := &MockEmailService{ctrl: ctrl}
	mock.recorder = &MockEmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailService) EXPECT() *MockEmailServiceMockRecorder {
	return m.recorder
}

// SendAuthPasswordResetEmail mocks base method.
func (m *MockEmailService) SendAuthPasswordResetEmail(ctx context.Context, user *model.User, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAuthPasswordResetEmail", ctx, user, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAuthPasswordResetEmail indicates an expected call of SendAuthPasswordResetEmail.
func (mr *MockEmailServiceMockRecorder) SendAuthPasswordResetEmail(ctx, user, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAuthPasswordResetEmail", reflect.TypeOf((*MockEmailService)(nil).SendAuthPasswordResetEmail), ctx, user, token)
}

// SendOrganizationInvitationEmail mocks base method.
func (m *MockEmailService) SendOrganizationInvitationEmail(ctx context.Context, organization *model.Organization, user *model.User, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrganizationInvitationEmail", ctx, organization, user, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOrganizationInvitationEmail indicates an expected call of SendOrganizationInvitationEmail.
func (mr *MockEmailServiceMockRecorder) SendOrganizationInvitationEmail(ctx, organization, user, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrganizationInvitationEmail", reflect.TypeOf((*MockEmailService)(nil).SendOrganizationInvitationEmail), ctx, organization, user, token)
}

// SendSystemLicenseExpiryEmail mocks base method.
func (m *MockEmailService) SendSystemLicenseExpiryEmail(ctx context.Context, licenseID, licenseEmail, licenseOrganization string, licenseExpiresAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSystemLicenseExpiryEmail", ctx, licenseID, licenseEmail, licenseOrganization, licenseExpiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSystemLicenseExpiryEmail indicates an expected call of SendSystemLicenseExpiryEmail.
func (mr *MockEmailServiceMockRecorder) SendSystemLicenseExpiryEmail(ctx, licenseID, licenseEmail, licenseOrganization, licenseExpiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSystemLicenseExpiryEmail", reflect.TypeOf((*MockEmailService)(nil).SendSystemLicenseExpiryEmail), ctx, licenseID, licenseEmail, licenseOrganization, licenseExpiresAt)
}

// SendUserWelcomeEmail mocks base method.
func (m *MockEmailService) SendUserWelcomeEmail(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUserWelcomeEmail", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUserWelcomeEmail indicates an expected call of SendUserWelcomeEmail.
func (mr *MockEmailServiceMockRecorder) SendUserWelcomeEmail(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUserWelcomeEmail", reflect.TypeOf((*MockEmailService)(nil).SendUserWelcomeEmail), ctx, user)
}
