// Code generated by MockGen. DO NOT EDIT.
// Source: role.go
//
// Generated by this command:
//
//	mockgen -source=role.go -destination=../testutil/mock/role_repo_gen.go -package=mock -mock_names RoleRepository=RoleRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// RoleRepository is a mock of RoleRepository interface.
type RoleRepository struct {
	ctrl     *gomock.Controller
	recorder *RoleRepositoryMockRecorder
	isgomock struct{}
}

// RoleRepositoryMockRecorder is the mock recorder for RoleRepository.
type RoleRepositoryMockRecorder struct {
	mock *RoleRepository
}

// NewRoleRepository creates a new mock instance.
func NewRoleRepository(ctrl *gomock.Controller) *RoleRepository {
	mock := &RoleRepository{ctrl: ctrl}
	mock.recorder = &RoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RoleRepository) EXPECT() *RoleRepositoryMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m *RoleRepository) AddMember(ctx context.Context, roleID, memberID, belongsToID model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", ctx, roleID, memberID, belongsToID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *RoleRepositoryMockRecorder) AddMember(ctx, roleID, memberID, belongsToID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*RoleRepository)(nil).AddMember), ctx, roleID, memberID, belongsToID)
}

// Create mocks base method.
func (m *RoleRepository) Create(ctx context.Context, createdBy, belongsTo model.ID, role *model.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, createdBy, belongsTo, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *RoleRepositoryMockRecorder) Create(ctx, createdBy, belongsTo, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*RoleRepository)(nil).Create), ctx, createdBy, belongsTo, role)
}

// Delete mocks base method.
func (m *RoleRepository) Delete(ctx context.Context, id, belongsTo model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, belongsTo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *RoleRepositoryMockRecorder) Delete(ctx, id, belongsTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*RoleRepository)(nil).Delete), ctx, id, belongsTo)
}

// Get mocks base method.
func (m *RoleRepository) Get(ctx context.Context, id, belongsTo model.ID) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, belongsTo)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *RoleRepositoryMockRecorder) Get(ctx, id, belongsTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*RoleRepository)(nil).Get), ctx, id, belongsTo)
}

// GetAllBelongsTo mocks base method.
func (m *RoleRepository) GetAllBelongsTo(ctx context.Context, belongsTo model.ID, offset, limit int) ([]*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBelongsTo", ctx, belongsTo, offset, limit)
	ret0, _ := ret[0].([]*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBelongsTo indicates an expected call of GetAllBelongsTo.
func (mr *RoleRepositoryMockRecorder) GetAllBelongsTo(ctx, belongsTo, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBelongsTo", reflect.TypeOf((*RoleRepository)(nil).GetAllBelongsTo), ctx, belongsTo, offset, limit)
}

// RemoveMember mocks base method.
func (m *RoleRepository) RemoveMember(ctx context.Context, roleID, memberID, belongsToID model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", ctx, roleID, memberID, belongsToID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *RoleRepositoryMockRecorder) RemoveMember(ctx, roleID, memberID, belongsToID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*RoleRepository)(nil).RemoveMember), ctx, roleID, memberID, belongsToID)
}

// Update mocks base method.
func (m *RoleRepository) Update(ctx context.Context, id, belongsTo model.ID, patch map[string]any) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, belongsTo, patch)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *RoleRepositoryMockRecorder) Update(ctx, id, belongsTo, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*RoleRepository)(nil).Update), ctx, id, belongsTo, patch)
}
