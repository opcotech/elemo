// Code generated by MockGen. DO NOT EDIT.
// Source: smtp.go
//
// Generated by this command:
//
//	mockgen -source=smtp.go -destination=../../testutil/mock/smtp_gen.go -package=mock -mock_names WrappedClient=NetSMTPClient,Client=SMTPClient
//

// Package mock is a generated GoMock package.
package mock

import (
	tls "crypto/tls"
	io "io"
	smtp "net/smtp"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// NetSMTPClient is a mock of WrappedClient interface.
type NetSMTPClient struct {
	ctrl     *gomock.Controller
	recorder *NetSMTPClientMockRecorder
	isgomock struct{}
}

// NetSMTPClientMockRecorder is the mock recorder for NetSMTPClient.
type NetSMTPClientMockRecorder struct {
	mock *NetSMTPClient
}

// NewNetSMTPClient creates a new mock instance.
func NewNetSMTPClient(ctrl *gomock.Controller) *NetSMTPClient {
	mock := &NetSMTPClient{ctrl: ctrl}
	mock.recorder = &NetSMTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *NetSMTPClient) EXPECT() *NetSMTPClientMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *NetSMTPClient) Auth(a smtp.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *NetSMTPClientMockRecorder) Auth(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*NetSMTPClient)(nil).Auth), a)
}

// Close mocks base method.
func (m *NetSMTPClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *NetSMTPClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*NetSMTPClient)(nil).Close))
}

// Data mocks base method.
func (m *NetSMTPClient) Data() (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Data indicates an expected call of Data.
func (mr *NetSMTPClientMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*NetSMTPClient)(nil).Data))
}

// Extension mocks base method.
func (m *NetSMTPClient) Extension(ext string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extension", ext)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Extension indicates an expected call of Extension.
func (mr *NetSMTPClientMockRecorder) Extension(ext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extension", reflect.TypeOf((*NetSMTPClient)(nil).Extension), ext)
}

// Hello mocks base method.
func (m *NetSMTPClient) Hello(localName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", localName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Hello indicates an expected call of Hello.
func (mr *NetSMTPClientMockRecorder) Hello(localName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*NetSMTPClient)(nil).Hello), localName)
}

// Mail mocks base method.
func (m *NetSMTPClient) Mail(from string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mail", from)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mail indicates an expected call of Mail.
func (mr *NetSMTPClientMockRecorder) Mail(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mail", reflect.TypeOf((*NetSMTPClient)(nil).Mail), from)
}

// Noop mocks base method.
func (m *NetSMTPClient) Noop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Noop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Noop indicates an expected call of Noop.
func (mr *NetSMTPClientMockRecorder) Noop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Noop", reflect.TypeOf((*NetSMTPClient)(nil).Noop))
}

// Quit mocks base method.
func (m *NetSMTPClient) Quit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Quit indicates an expected call of Quit.
func (mr *NetSMTPClientMockRecorder) Quit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*NetSMTPClient)(nil).Quit))
}

// Rcpt mocks base method.
func (m *NetSMTPClient) Rcpt(to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rcpt", to)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rcpt indicates an expected call of Rcpt.
func (mr *NetSMTPClientMockRecorder) Rcpt(to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rcpt", reflect.TypeOf((*NetSMTPClient)(nil).Rcpt), to)
}

// Reset mocks base method.
func (m *NetSMTPClient) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *NetSMTPClientMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*NetSMTPClient)(nil).Reset))
}

// StartTLS mocks base method.
func (m *NetSMTPClient) StartTLS(config *tls.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTLS", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTLS indicates an expected call of StartTLS.
func (mr *NetSMTPClientMockRecorder) StartTLS(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTLS", reflect.TypeOf((*NetSMTPClient)(nil).StartTLS), config)
}

// TLSConnectionState mocks base method.
func (m *NetSMTPClient) TLSConnectionState() (tls.ConnectionState, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TLSConnectionState")
	ret0, _ := ret[0].(tls.ConnectionState)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// TLSConnectionState indicates an expected call of TLSConnectionState.
func (mr *NetSMTPClientMockRecorder) TLSConnectionState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TLSConnectionState", reflect.TypeOf((*NetSMTPClient)(nil).TLSConnectionState))
}

// Verify mocks base method.
func (m *NetSMTPClient) Verify(addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *NetSMTPClientMockRecorder) Verify(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*NetSMTPClient)(nil).Verify), addr)
}
