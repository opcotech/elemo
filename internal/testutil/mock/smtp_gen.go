// Code generated by MockGen. DO NOT EDIT.
// Source: smtp.go
//
// Generated by this command:
//
//	mockgen -source=smtp.go -destination=../../testutil/mock/smtp_gen.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomail "github.com/Shopify/gomail"
	gomock "go.uber.org/mock/gomock"
)

// MockWrappedClient is a mock of WrappedClient interface.
type MockWrappedClient struct {
	ctrl     *gomock.Controller
	recorder *MockWrappedClientMockRecorder
	isgomock struct{}
}

// MockWrappedClientMockRecorder is the mock recorder for MockWrappedClient.
type MockWrappedClientMockRecorder struct {
	mock *MockWrappedClient
}

// NewMockWrappedClient creates a new mock instance.
func NewMockWrappedClient(ctrl *gomock.Controller) *MockWrappedClient {
	mock := &MockWrappedClient{ctrl: ctrl}
	mock.recorder = &MockWrappedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWrappedClient) EXPECT() *MockWrappedClientMockRecorder {
	return m.recorder
}

// DialAndSend mocks base method.
func (m *MockWrappedClient) DialAndSend(messages ...*gomail.Message) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DialAndSend", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DialAndSend indicates an expected call of DialAndSend.
func (mr *MockWrappedClientMockRecorder) DialAndSend(messages ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialAndSend", reflect.TypeOf((*MockWrappedClient)(nil).DialAndSend), messages...)
}
