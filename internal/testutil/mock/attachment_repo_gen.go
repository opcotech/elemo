// Code generated by MockGen. DO NOT EDIT.
// Source: attachment.go
//
// Generated by this command:
//
//	mockgen -source=attachment.go -destination=../testutil/mock/attachment_repo_gen.go -package=mock -mock_names AttachmentRepository=AttachmentRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// AttachmentRepository is a mock of AttachmentRepository interface.
type AttachmentRepository struct {
	ctrl     *gomock.Controller
	recorder *AttachmentRepositoryMockRecorder
	isgomock struct{}
}

// AttachmentRepositoryMockRecorder is the mock recorder for AttachmentRepository.
type AttachmentRepositoryMockRecorder struct {
	mock *AttachmentRepository
}

// NewAttachmentRepository creates a new mock instance.
func NewAttachmentRepository(ctrl *gomock.Controller) *AttachmentRepository {
	mock := &AttachmentRepository{ctrl: ctrl}
	mock.recorder = &AttachmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AttachmentRepository) EXPECT() *AttachmentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *AttachmentRepository) Create(ctx context.Context, belongsTo model.ID, attachment *model.Attachment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, belongsTo, attachment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *AttachmentRepositoryMockRecorder) Create(ctx, belongsTo, attachment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*AttachmentRepository)(nil).Create), ctx, belongsTo, attachment)
}

// Delete mocks base method.
func (m *AttachmentRepository) Delete(ctx context.Context, id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *AttachmentRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*AttachmentRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *AttachmentRepository) Get(ctx context.Context, id model.ID) (*model.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *AttachmentRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*AttachmentRepository)(nil).Get), ctx, id)
}

// GetAllBelongsTo mocks base method.
func (m *AttachmentRepository) GetAllBelongsTo(ctx context.Context, belongsTo model.ID, offset, limit int) ([]*model.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBelongsTo", ctx, belongsTo, offset, limit)
	ret0, _ := ret[0].([]*model.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBelongsTo indicates an expected call of GetAllBelongsTo.
func (mr *AttachmentRepositoryMockRecorder) GetAllBelongsTo(ctx, belongsTo, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBelongsTo", reflect.TypeOf((*AttachmentRepository)(nil).GetAllBelongsTo), ctx, belongsTo, offset, limit)
}

// Update mocks base method.
func (m *AttachmentRepository) Update(ctx context.Context, id model.ID, name string) (*model.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name)
	ret0, _ := ret[0].(*model.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *AttachmentRepositoryMockRecorder) Update(ctx, id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*AttachmentRepository)(nil).Update), ctx, id, name)
}
