// Code generated by MockGen. DO NOT EDIT.
// Source: io (interfaces: WriteCloser)
//
// Generated by this command:
//
//	mockgen -destination=../../testutil/mock/io_gen.go -package=mock -mock_names WriteCloser=Buffer io WriteCloser
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Buffer is a mock of WriteCloser interface.
type Buffer struct {
	ctrl     *gomock.Controller
	recorder *BufferMockRecorder
	isgomock struct{}
}

// BufferMockRecorder is the mock recorder for Buffer.
type BufferMockRecorder struct {
	mock *Buffer
}

// NewBuffer creates a new mock instance.
func NewBuffer(ctrl *gomock.Controller) *Buffer {
	mock := &Buffer{ctrl: ctrl}
	mock.recorder = &BufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Buffer) EXPECT() *BufferMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Buffer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *BufferMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Buffer)(nil).Close))
}

// Write mocks base method.
func (m *Buffer) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *BufferMockRecorder) Write(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*Buffer)(nil).Write), p)
}
