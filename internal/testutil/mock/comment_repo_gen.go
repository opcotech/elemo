// Code generated by MockGen. DO NOT EDIT.
// Source: comment.go
//
// Generated by this command:
//
//	mockgen -source=comment.go -destination=../testutil/mock/comment_repo_gen.go -package=mock -mock_names CommentRepository=CommentRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// CommentRepository is a mock of CommentRepository interface.
type CommentRepository struct {
	ctrl     *gomock.Controller
	recorder *CommentRepositoryMockRecorder
	isgomock struct{}
}

// CommentRepositoryMockRecorder is the mock recorder for CommentRepository.
type CommentRepositoryMockRecorder struct {
	mock *CommentRepository
}

// NewCommentRepository creates a new mock instance.
func NewCommentRepository(ctrl *gomock.Controller) *CommentRepository {
	mock := &CommentRepository{ctrl: ctrl}
	mock.recorder = &CommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CommentRepository) EXPECT() *CommentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *CommentRepository) Create(ctx context.Context, belongsTo model.ID, comment *model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, belongsTo, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *CommentRepositoryMockRecorder) Create(ctx, belongsTo, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*CommentRepository)(nil).Create), ctx, belongsTo, comment)
}

// Delete mocks base method.
func (m *CommentRepository) Delete(ctx context.Context, id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *CommentRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*CommentRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *CommentRepository) Get(ctx context.Context, id model.ID) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *CommentRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*CommentRepository)(nil).Get), ctx, id)
}

// GetAllBelongsTo mocks base method.
func (m *CommentRepository) GetAllBelongsTo(ctx context.Context, belongsTo model.ID, offset, limit int) ([]*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBelongsTo", ctx, belongsTo, offset, limit)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBelongsTo indicates an expected call of GetAllBelongsTo.
func (mr *CommentRepositoryMockRecorder) GetAllBelongsTo(ctx, belongsTo, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBelongsTo", reflect.TypeOf((*CommentRepository)(nil).GetAllBelongsTo), ctx, belongsTo, offset, limit)
}

// Update mocks base method.
func (m *CommentRepository) Update(ctx context.Context, id model.ID, content string) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, content)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *CommentRepositoryMockRecorder) Update(ctx, id, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*CommentRepository)(nil).Update), ctx, id, content)
}
