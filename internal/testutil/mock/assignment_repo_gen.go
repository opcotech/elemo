// Code generated by MockGen. DO NOT EDIT.
// Source: assignment.go
//
// Generated by this command:
//
//	mockgen -source=assignment.go -destination=../testutil/mock/assignment_repo_gen.go -package=mock -mock_names AssignmentRepository=AssignmentRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// AssignmentRepository is a mock of AssignmentRepository interface.
type AssignmentRepository struct {
	ctrl     *gomock.Controller
	recorder *AssignmentRepositoryMockRecorder
	isgomock struct{}
}

// AssignmentRepositoryMockRecorder is the mock recorder for AssignmentRepository.
type AssignmentRepositoryMockRecorder struct {
	mock *AssignmentRepository
}

// NewAssignmentRepository creates a new mock instance.
func NewAssignmentRepository(ctrl *gomock.Controller) *AssignmentRepository {
	mock := &AssignmentRepository{ctrl: ctrl}
	mock.recorder = &AssignmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AssignmentRepository) EXPECT() *AssignmentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *AssignmentRepository) Create(ctx context.Context, assignment *model.Assignment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, assignment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *AssignmentRepositoryMockRecorder) Create(ctx, assignment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*AssignmentRepository)(nil).Create), ctx, assignment)
}

// Delete mocks base method.
func (m *AssignmentRepository) Delete(ctx context.Context, id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *AssignmentRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*AssignmentRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *AssignmentRepository) Get(ctx context.Context, id model.ID) (*model.Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *AssignmentRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*AssignmentRepository)(nil).Get), ctx, id)
}

// GetByResource mocks base method.
func (m *AssignmentRepository) GetByResource(ctx context.Context, resourceID model.ID, offset, limit int) ([]*model.Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByResource", ctx, resourceID, offset, limit)
	ret0, _ := ret[0].([]*model.Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByResource indicates an expected call of GetByResource.
func (mr *AssignmentRepositoryMockRecorder) GetByResource(ctx, resourceID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByResource", reflect.TypeOf((*AssignmentRepository)(nil).GetByResource), ctx, resourceID, offset, limit)
}

// GetByUser mocks base method.
func (m *AssignmentRepository) GetByUser(ctx context.Context, userID model.ID, offset, limit int) ([]*model.Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", ctx, userID, offset, limit)
	ret0, _ := ret[0].([]*model.Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *AssignmentRepositoryMockRecorder) GetByUser(ctx, userID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*AssignmentRepository)(nil).GetByUser), ctx, userID, offset, limit)
}
