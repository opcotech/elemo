// Code generated by MockGen. DO NOT EDIT.
// Source: issue.go
//
// Generated by this command:
//
//	mockgen -source=issue.go -destination=../testutil/mock/issue_repo_gen.go -package=mock -mock_names IssueRepository=IssueRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// IssueRepository is a mock of IssueRepository interface.
type IssueRepository struct {
	ctrl     *gomock.Controller
	recorder *IssueRepositoryMockRecorder
	isgomock struct{}
}

// IssueRepositoryMockRecorder is the mock recorder for IssueRepository.
type IssueRepositoryMockRecorder struct {
	mock *IssueRepository
}

// NewIssueRepository creates a new mock instance.
func NewIssueRepository(ctrl *gomock.Controller) *IssueRepository {
	mock := &IssueRepository{ctrl: ctrl}
	mock.recorder = &IssueRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *IssueRepository) EXPECT() *IssueRepositoryMockRecorder {
	return m.recorder
}

// AddRelation mocks base method.
func (m *IssueRepository) AddRelation(ctx context.Context, relation *model.IssueRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelation", ctx, relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRelation indicates an expected call of AddRelation.
func (mr *IssueRepositoryMockRecorder) AddRelation(ctx, relation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelation", reflect.TypeOf((*IssueRepository)(nil).AddRelation), ctx, relation)
}

// AddWatcher mocks base method.
func (m *IssueRepository) AddWatcher(ctx context.Context, issue, user model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWatcher", ctx, issue, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWatcher indicates an expected call of AddWatcher.
func (mr *IssueRepositoryMockRecorder) AddWatcher(ctx, issue, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWatcher", reflect.TypeOf((*IssueRepository)(nil).AddWatcher), ctx, issue, user)
}

// Create mocks base method.
func (m *IssueRepository) Create(ctx context.Context, project model.ID, issue *model.Issue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, project, issue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *IssueRepositoryMockRecorder) Create(ctx, project, issue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*IssueRepository)(nil).Create), ctx, project, issue)
}

// Delete mocks base method.
func (m *IssueRepository) Delete(ctx context.Context, id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *IssueRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*IssueRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *IssueRepository) Get(ctx context.Context, id model.ID) (*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *IssueRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*IssueRepository)(nil).Get), ctx, id)
}

// GetAllForIssue mocks base method.
func (m *IssueRepository) GetAllForIssue(ctx context.Context, issueID model.ID, offset, limit int) ([]*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForIssue", ctx, issueID, offset, limit)
	ret0, _ := ret[0].([]*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForIssue indicates an expected call of GetAllForIssue.
func (mr *IssueRepositoryMockRecorder) GetAllForIssue(ctx, issueID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForIssue", reflect.TypeOf((*IssueRepository)(nil).GetAllForIssue), ctx, issueID, offset, limit)
}

// GetAllForProject mocks base method.
func (m *IssueRepository) GetAllForProject(ctx context.Context, projectID model.ID, offset, limit int) ([]*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForProject", ctx, projectID, offset, limit)
	ret0, _ := ret[0].([]*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForProject indicates an expected call of GetAllForProject.
func (mr *IssueRepositoryMockRecorder) GetAllForProject(ctx, projectID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForProject", reflect.TypeOf((*IssueRepository)(nil).GetAllForProject), ctx, projectID, offset, limit)
}

// GetRelations mocks base method.
func (m *IssueRepository) GetRelations(ctx context.Context, issue model.ID) ([]*model.IssueRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelations", ctx, issue)
	ret0, _ := ret[0].([]*model.IssueRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelations indicates an expected call of GetRelations.
func (mr *IssueRepositoryMockRecorder) GetRelations(ctx, issue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelations", reflect.TypeOf((*IssueRepository)(nil).GetRelations), ctx, issue)
}

// GetWatchers mocks base method.
func (m *IssueRepository) GetWatchers(ctx context.Context, issue model.ID) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatchers", ctx, issue)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWatchers indicates an expected call of GetWatchers.
func (mr *IssueRepositoryMockRecorder) GetWatchers(ctx, issue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatchers", reflect.TypeOf((*IssueRepository)(nil).GetWatchers), ctx, issue)
}

// RemoveRelation mocks base method.
func (m *IssueRepository) RemoveRelation(ctx context.Context, source, target model.ID, kind model.IssueRelationKind) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRelation", ctx, source, target, kind)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRelation indicates an expected call of RemoveRelation.
func (mr *IssueRepositoryMockRecorder) RemoveRelation(ctx, source, target, kind any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRelation", reflect.TypeOf((*IssueRepository)(nil).RemoveRelation), ctx, source, target, kind)
}

// RemoveWatcher mocks base method.
func (m *IssueRepository) RemoveWatcher(ctx context.Context, issue, user model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWatcher", ctx, issue, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWatcher indicates an expected call of RemoveWatcher.
func (mr *IssueRepositoryMockRecorder) RemoveWatcher(ctx, issue, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWatcher", reflect.TypeOf((*IssueRepository)(nil).RemoveWatcher), ctx, issue, user)
}

// Update mocks base method.
func (m *IssueRepository) Update(ctx context.Context, id model.ID, patch map[string]any) (*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, patch)
	ret0, _ := ret[0].(*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *IssueRepositoryMockRecorder) Update(ctx, id, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*IssueRepository)(nil).Update), ctx, id, patch)
}
