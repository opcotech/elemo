// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/neo4j/neo4j-go-driver/v5/neo4j (interfaces: SessionWithContext)
//
// Generated by this command:
//
//	mockgen -destination ../../testutil/mock/neo4j_session_gen.go -package mock github.com/neo4j/neo4j-go-driver/v5/neo4j SessionWithContext
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	neo4j "github.com/neo4j/neo4j-go-driver/v5/neo4j"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionWithContext is a mock of SessionWithContext interface.
type MockSessionWithContext struct {
	ctrl     *gomock.Controller
	recorder *MockSessionWithContextMockRecorder
	isgomock struct{}
}

// MockSessionWithContextMockRecorder is the mock recorder for MockSessionWithContext.
type MockSessionWithContextMockRecorder struct {
	mock *MockSessionWithContext
}

// NewMockSessionWithContext creates a new mock instance.
func NewMockSessionWithContext(ctrl *gomock.Controller) *MockSessionWithContext {
	mock := &MockSessionWithContext{ctrl: ctrl}
	mock.recorder = &MockSessionWithContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionWithContext) EXPECT() *MockSessionWithContextMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockSessionWithContext) BeginTransaction(ctx context.Context, configurers ...func(*neo4j.TransactionConfig)) (neo4j.ExplicitTransaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range configurers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeginTransaction", varargs...)
	ret0, _ := ret[0].(neo4j.ExplicitTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockSessionWithContextMockRecorder) BeginTransaction(ctx any, configurers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, configurers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockSessionWithContext)(nil).BeginTransaction), varargs...)
}

// Close mocks base method.
func (m *MockSessionWithContext) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSessionWithContextMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSessionWithContext)(nil).Close), ctx)
}

// ExecuteRead mocks base method.
func (m *MockSessionWithContext) ExecuteRead(ctx context.Context, work neo4j.ManagedTransactionWork, configurers ...func(*neo4j.TransactionConfig)) (any, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, work}
	for _, a := range configurers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteRead", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteRead indicates an expected call of ExecuteRead.
func (mr *MockSessionWithContextMockRecorder) ExecuteRead(ctx, work any, configurers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, work}, configurers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteRead", reflect.TypeOf((*MockSessionWithContext)(nil).ExecuteRead), varargs...)
}

// ExecuteWrite mocks base method.
func (m *MockSessionWithContext) ExecuteWrite(ctx context.Context, work neo4j.ManagedTransactionWork, configurers ...func(*neo4j.TransactionConfig)) (any, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, work}
	for _, a := range configurers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteWrite", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWrite indicates an expected call of ExecuteWrite.
func (mr *MockSessionWithContextMockRecorder) ExecuteWrite(ctx, work any, configurers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, work}, configurers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWrite", reflect.TypeOf((*MockSessionWithContext)(nil).ExecuteWrite), varargs...)
}

// LastBookmarks mocks base method.
func (m *MockSessionWithContext) LastBookmarks() neo4j.Bookmarks {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastBookmarks")
	ret0, _ := ret[0].(neo4j.Bookmarks)
	return ret0
}

// LastBookmarks indicates an expected call of LastBookmarks.
func (mr *MockSessionWithContextMockRecorder) LastBookmarks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastBookmarks", reflect.TypeOf((*MockSessionWithContext)(nil).LastBookmarks))
}

// Run mocks base method.
func (m *MockSessionWithContext) Run(ctx context.Context, cypher string, params map[string]any, configurers ...func(*neo4j.TransactionConfig)) (neo4j.ResultWithContext, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, cypher, params}
	for _, a := range configurers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(neo4j.ResultWithContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockSessionWithContextMockRecorder) Run(ctx, cypher, params any, configurers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, cypher, params}, configurers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSessionWithContext)(nil).Run), varargs...)
}

// executeQueryRead mocks base method.
func (m *MockSessionWithContext) executeQueryRead(ctx context.Context, work neo4j.ManagedTransactionWork, configurers ...func(*neo4j.TransactionConfig)) (any, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, work}
	for _, a := range configurers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "executeQueryRead", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// executeQueryRead indicates an expected call of executeQueryRead.
func (mr *MockSessionWithContextMockRecorder) executeQueryRead(ctx, work any, configurers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, work}, configurers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "executeQueryRead", reflect.TypeOf((*MockSessionWithContext)(nil).executeQueryRead), varargs...)
}

// executeQueryWrite mocks base method.
func (m *MockSessionWithContext) executeQueryWrite(ctx context.Context, work neo4j.ManagedTransactionWork, configurers ...func(*neo4j.TransactionConfig)) (any, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, work}
	for _, a := range configurers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "executeQueryWrite", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// executeQueryWrite indicates an expected call of executeQueryWrite.
func (mr *MockSessionWithContextMockRecorder) executeQueryWrite(ctx, work any, configurers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, work}, configurers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "executeQueryWrite", reflect.TypeOf((*MockSessionWithContext)(nil).executeQueryWrite), varargs...)
}

// getServerInfo mocks base method.
func (m *MockSessionWithContext) getServerInfo(ctx context.Context) (neo4j.ServerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getServerInfo", ctx)
	ret0, _ := ret[0].(neo4j.ServerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getServerInfo indicates an expected call of getServerInfo.
func (mr *MockSessionWithContextMockRecorder) getServerInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getServerInfo", reflect.TypeOf((*MockSessionWithContext)(nil).getServerInfo), ctx)
}

// lastBookmark mocks base method.
func (m *MockSessionWithContext) lastBookmark() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "lastBookmark")
	ret0, _ := ret[0].(string)
	return ret0
}

// lastBookmark indicates an expected call of lastBookmark.
func (mr *MockSessionWithContextMockRecorder) lastBookmark() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "lastBookmark", reflect.TypeOf((*MockSessionWithContext)(nil).lastBookmark))
}

// legacy mocks base method.
func (m *MockSessionWithContext) legacy() neo4j.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "legacy")
	ret0, _ := ret[0].(neo4j.Session)
	return ret0
}

// legacy indicates an expected call of legacy.
func (mr *MockSessionWithContextMockRecorder) legacy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "legacy", reflect.TypeOf((*MockSessionWithContext)(nil).legacy))
}

// verifyAuthentication mocks base method.
func (m *MockSessionWithContext) verifyAuthentication(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "verifyAuthentication", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// verifyAuthentication indicates an expected call of verifyAuthentication.
func (mr *MockSessionWithContextMockRecorder) verifyAuthentication(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "verifyAuthentication", reflect.TypeOf((*MockSessionWithContext)(nil).verifyAuthentication), ctx)
}
