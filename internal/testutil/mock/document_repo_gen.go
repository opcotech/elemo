// Code generated by MockGen. DO NOT EDIT.
// Source: document.go
//
// Generated by this command:
//
//	mockgen -source=document.go -destination=../testutil/mock/document_repo_gen.go -package=mock -mock_names DocumentRepository=DocumentRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// DocumentRepository is a mock of DocumentRepository interface.
type DocumentRepository struct {
	ctrl     *gomock.Controller
	recorder *DocumentRepositoryMockRecorder
	isgomock struct{}
}

// DocumentRepositoryMockRecorder is the mock recorder for DocumentRepository.
type DocumentRepositoryMockRecorder struct {
	mock *DocumentRepository
}

// NewDocumentRepository creates a new mock instance.
func NewDocumentRepository(ctrl *gomock.Controller) *DocumentRepository {
	mock := &DocumentRepository{ctrl: ctrl}
	mock.recorder = &DocumentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DocumentRepository) EXPECT() *DocumentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *DocumentRepository) Create(ctx context.Context, belongsTo model.ID, document *model.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, belongsTo, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *DocumentRepositoryMockRecorder) Create(ctx, belongsTo, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*DocumentRepository)(nil).Create), ctx, belongsTo, document)
}

// Delete mocks base method.
func (m *DocumentRepository) Delete(ctx context.Context, id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *DocumentRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*DocumentRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *DocumentRepository) Get(ctx context.Context, id model.ID) (*model.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *DocumentRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*DocumentRepository)(nil).Get), ctx, id)
}

// GetAllBelongsTo mocks base method.
func (m *DocumentRepository) GetAllBelongsTo(ctx context.Context, belongsTo model.ID, offset, limit int) ([]*model.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBelongsTo", ctx, belongsTo, offset, limit)
	ret0, _ := ret[0].([]*model.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBelongsTo indicates an expected call of GetAllBelongsTo.
func (mr *DocumentRepositoryMockRecorder) GetAllBelongsTo(ctx, belongsTo, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBelongsTo", reflect.TypeOf((*DocumentRepository)(nil).GetAllBelongsTo), ctx, belongsTo, offset, limit)
}

// GetByCreator mocks base method.
func (m *DocumentRepository) GetByCreator(ctx context.Context, createdBy model.ID, offset, limit int) ([]*model.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCreator", ctx, createdBy, offset, limit)
	ret0, _ := ret[0].([]*model.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCreator indicates an expected call of GetByCreator.
func (mr *DocumentRepositoryMockRecorder) GetByCreator(ctx, createdBy, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCreator", reflect.TypeOf((*DocumentRepository)(nil).GetByCreator), ctx, createdBy, offset, limit)
}

// Update mocks base method.
func (m *DocumentRepository) Update(ctx context.Context, id model.ID, patch map[string]any) (*model.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, patch)
	ret0, _ := ret[0].(*model.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *DocumentRepositoryMockRecorder) Update(ctx, id, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*DocumentRepository)(nil).Update), ctx, id, patch)
}
