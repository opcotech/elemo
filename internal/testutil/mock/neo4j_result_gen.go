// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/neo4j/neo4j-go-driver/v5/neo4j (interfaces: ResultWithContext)
//
// Generated by this command:
//
//	mockgen -destination ../../testutil/mock/neo4j_result_gen.go -package mock github.com/neo4j/neo4j-go-driver/v5/neo4j ResultWithContext
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	neo4j "github.com/neo4j/neo4j-go-driver/v5/neo4j"
	gomock "go.uber.org/mock/gomock"
)

// MockResultWithContext is a mock of ResultWithContext interface.
type MockResultWithContext struct {
	ctrl     *gomock.Controller
	recorder *MockResultWithContextMockRecorder
	isgomock struct{}
}

// MockResultWithContextMockRecorder is the mock recorder for MockResultWithContext.
type MockResultWithContextMockRecorder struct {
	mock *MockResultWithContext
}

// NewMockResultWithContext creates a new mock instance.
func NewMockResultWithContext(ctrl *gomock.Controller) *MockResultWithContext {
	mock := &MockResultWithContext{ctrl: ctrl}
	mock.recorder = &MockResultWithContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultWithContext) EXPECT() *MockResultWithContextMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockResultWithContext) Collect(ctx context.Context) ([]*neo4j.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", ctx)
	ret0, _ := ret[0].([]*neo4j.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockResultWithContextMockRecorder) Collect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockResultWithContext)(nil).Collect), ctx)
}

// Consume mocks base method.
func (m *MockResultWithContext) Consume(ctx context.Context) (neo4j.ResultSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx)
	ret0, _ := ret[0].(neo4j.ResultSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockResultWithContextMockRecorder) Consume(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockResultWithContext)(nil).Consume), ctx)
}

// Err mocks base method.
func (m *MockResultWithContext) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockResultWithContextMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockResultWithContext)(nil).Err))
}

// IsOpen mocks base method.
func (m *MockResultWithContext) IsOpen() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpen indicates an expected call of IsOpen.
func (mr *MockResultWithContextMockRecorder) IsOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpen", reflect.TypeOf((*MockResultWithContext)(nil).IsOpen))
}

// Keys mocks base method.
func (m *MockResultWithContext) Keys() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys.
func (mr *MockResultWithContextMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockResultWithContext)(nil).Keys))
}

// Next mocks base method.
func (m *MockResultWithContext) Next(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockResultWithContextMockRecorder) Next(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockResultWithContext)(nil).Next), ctx)
}

// NextRecord mocks base method.
func (m *MockResultWithContext) NextRecord(ctx context.Context, record **neo4j.Record) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextRecord", ctx, record)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NextRecord indicates an expected call of NextRecord.
func (mr *MockResultWithContextMockRecorder) NextRecord(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextRecord", reflect.TypeOf((*MockResultWithContext)(nil).NextRecord), ctx, record)
}

// Peek mocks base method.
func (m *MockResultWithContext) Peek(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Peek indicates an expected call of Peek.
func (mr *MockResultWithContextMockRecorder) Peek(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockResultWithContext)(nil).Peek), ctx)
}

// PeekRecord mocks base method.
func (m *MockResultWithContext) PeekRecord(ctx context.Context, record **neo4j.Record) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeekRecord", ctx, record)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PeekRecord indicates an expected call of PeekRecord.
func (mr *MockResultWithContextMockRecorder) PeekRecord(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeekRecord", reflect.TypeOf((*MockResultWithContext)(nil).PeekRecord), ctx, record)
}

// Record mocks base method.
func (m *MockResultWithContext) Record() *neo4j.Record {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record")
	ret0, _ := ret[0].(*neo4j.Record)
	return ret0
}

// Record indicates an expected call of Record.
func (mr *MockResultWithContextMockRecorder) Record() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockResultWithContext)(nil).Record))
}

// Records mocks base method.
func (m *MockResultWithContext) Records(ctx context.Context) func(func(*neo4j.Record, error) bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Records", ctx)
	ret0, _ := ret[0].(func(func(*neo4j.Record, error) bool))
	return ret0
}

// Records indicates an expected call of Records.
func (mr *MockResultWithContextMockRecorder) Records(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Records", reflect.TypeOf((*MockResultWithContext)(nil).Records), ctx)
}

// Single mocks base method.
func (m *MockResultWithContext) Single(ctx context.Context) (*neo4j.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Single", ctx)
	ret0, _ := ret[0].(*neo4j.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Single indicates an expected call of Single.
func (mr *MockResultWithContextMockRecorder) Single(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Single", reflect.TypeOf((*MockResultWithContext)(nil).Single), ctx)
}

// buffer mocks base method.
func (m *MockResultWithContext) buffer(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "buffer", ctx)
}

// buffer indicates an expected call of buffer.
func (mr *MockResultWithContextMockRecorder) buffer(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "buffer", reflect.TypeOf((*MockResultWithContext)(nil).buffer), ctx)
}

// errorHandler mocks base method.
func (m *MockResultWithContext) errorHandler(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "errorHandler", err)
}

// errorHandler indicates an expected call of errorHandler.
func (mr *MockResultWithContextMockRecorder) errorHandler(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "errorHandler", reflect.TypeOf((*MockResultWithContext)(nil).errorHandler), err)
}

// legacy mocks base method.
func (m *MockResultWithContext) legacy() neo4j.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "legacy")
	ret0, _ := ret[0].(neo4j.Result)
	return ret0
}

// legacy indicates an expected call of legacy.
func (mr *MockResultWithContextMockRecorder) legacy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "legacy", reflect.TypeOf((*MockResultWithContext)(nil).legacy))
}
