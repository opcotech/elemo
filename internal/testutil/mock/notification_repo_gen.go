// Code generated by MockGen. DO NOT EDIT.
// Source: notification.go
//
// Generated by this command:
//
//	mockgen -source=notification.go -destination=../testutil/mock/notification_repo_gen.go -package=mock -mock_names NotificationRepository=NotificationRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// NotificationRepository is a mock of NotificationRepository interface.
type NotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *NotificationRepositoryMockRecorder
	isgomock struct{}
}

// NotificationRepositoryMockRecorder is the mock recorder for NotificationRepository.
type NotificationRepositoryMockRecorder struct {
	mock *NotificationRepository
}

// NewNotificationRepository creates a new mock instance.
func NewNotificationRepository(ctrl *gomock.Controller) *NotificationRepository {
	mock := &NotificationRepository{ctrl: ctrl}
	mock.recorder = &NotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *NotificationRepository) EXPECT() *NotificationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *NotificationRepository) Create(ctx context.Context, notification *model.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *NotificationRepositoryMockRecorder) Create(ctx, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*NotificationRepository)(nil).Create), ctx, notification)
}

// Delete mocks base method.
func (m *NotificationRepository) Delete(ctx context.Context, id, recipient model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, recipient)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *NotificationRepositoryMockRecorder) Delete(ctx, id, recipient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*NotificationRepository)(nil).Delete), ctx, id, recipient)
}

// Get mocks base method.
func (m *NotificationRepository) Get(ctx context.Context, id, recipient model.ID) (*model.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, recipient)
	ret0, _ := ret[0].(*model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *NotificationRepositoryMockRecorder) Get(ctx, id, recipient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*NotificationRepository)(nil).Get), ctx, id, recipient)
}

// GetAllByRecipient mocks base method.
func (m *NotificationRepository) GetAllByRecipient(ctx context.Context, recipient model.ID, offset, limit int) ([]*model.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByRecipient", ctx, recipient, offset, limit)
	ret0, _ := ret[0].([]*model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByRecipient indicates an expected call of GetAllByRecipient.
func (mr *NotificationRepositoryMockRecorder) GetAllByRecipient(ctx, recipient, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByRecipient", reflect.TypeOf((*NotificationRepository)(nil).GetAllByRecipient), ctx, recipient, offset, limit)
}

// Update mocks base method.
func (m *NotificationRepository) Update(ctx context.Context, id, recipient model.ID, read bool) (*model.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, recipient, read)
	ret0, _ := ret[0].(*model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *NotificationRepositoryMockRecorder) Update(ctx, id, recipient, read any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*NotificationRepository)(nil).Update), ctx, id, recipient, read)
}
