// Code generated by MockGen. DO NOT EDIT.
// Source: permission.go
//
// Generated by this command:
//
//	mockgen -source=permission.go -destination=../testutil/mock/permission_repo_gen.go -package=mock -mock_names PermissionRepository=PermissionRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/opcotech/elemo/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// PermissionRepository is a mock of PermissionRepository interface.
type PermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *PermissionRepositoryMockRecorder
	isgomock struct{}
}

// PermissionRepositoryMockRecorder is the mock recorder for PermissionRepository.
type PermissionRepositoryMockRecorder struct {
	mock *PermissionRepository
}

// NewPermissionRepository creates a new mock instance.
func NewPermissionRepository(ctrl *gomock.Controller) *PermissionRepository {
	mock := &PermissionRepository{ctrl: ctrl}
	mock.recorder = &PermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PermissionRepository) EXPECT() *PermissionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *PermissionRepository) Create(ctx context.Context, perm *model.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *PermissionRepositoryMockRecorder) Create(ctx, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*PermissionRepository)(nil).Create), ctx, perm)
}

// Delete mocks base method.
func (m *PermissionRepository) Delete(ctx context.Context, id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *PermissionRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*PermissionRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *PermissionRepository) Get(ctx context.Context, id model.ID) (*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *PermissionRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*PermissionRepository)(nil).Get), ctx, id)
}

// GetBySubject mocks base method.
func (m *PermissionRepository) GetBySubject(ctx context.Context, id model.ID) ([]*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySubject", ctx, id)
	ret0, _ := ret[0].([]*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySubject indicates an expected call of GetBySubject.
func (mr *PermissionRepositoryMockRecorder) GetBySubject(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySubject", reflect.TypeOf((*PermissionRepository)(nil).GetBySubject), ctx, id)
}

// GetBySubjectAndTarget mocks base method.
func (m *PermissionRepository) GetBySubjectAndTarget(ctx context.Context, source, target model.ID) ([]*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySubjectAndTarget", ctx, source, target)
	ret0, _ := ret[0].([]*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySubjectAndTarget indicates an expected call of GetBySubjectAndTarget.
func (mr *PermissionRepositoryMockRecorder) GetBySubjectAndTarget(ctx, source, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySubjectAndTarget", reflect.TypeOf((*PermissionRepository)(nil).GetBySubjectAndTarget), ctx, source, target)
}

// GetByTarget mocks base method.
func (m *PermissionRepository) GetByTarget(ctx context.Context, id model.ID) ([]*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTarget", ctx, id)
	ret0, _ := ret[0].([]*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTarget indicates an expected call of GetByTarget.
func (mr *PermissionRepositoryMockRecorder) GetByTarget(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTarget", reflect.TypeOf((*PermissionRepository)(nil).GetByTarget), ctx, id)
}

// HasAnyRelation mocks base method.
func (m *PermissionRepository) HasAnyRelation(ctx context.Context, source, target model.ID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAnyRelation", ctx, source, target)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasAnyRelation indicates an expected call of HasAnyRelation.
func (mr *PermissionRepositoryMockRecorder) HasAnyRelation(ctx, source, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAnyRelation", reflect.TypeOf((*PermissionRepository)(nil).HasAnyRelation), ctx, source, target)
}

// HasPermission mocks base method.
func (m *PermissionRepository) HasPermission(ctx context.Context, subject, target model.ID, kinds ...model.PermissionKind) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subject, target}
	for _, a := range kinds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasPermission", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPermission indicates an expected call of HasPermission.
func (mr *PermissionRepositoryMockRecorder) HasPermission(ctx, subject, target any, kinds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subject, target}, kinds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*PermissionRepository)(nil).HasPermission), varargs...)
}

// HasSystemRole mocks base method.
func (m *PermissionRepository) HasSystemRole(ctx context.Context, source model.ID, roles ...model.SystemRole) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, source}
	for _, a := range roles {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasSystemRole", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSystemRole indicates an expected call of HasSystemRole.
func (mr *PermissionRepositoryMockRecorder) HasSystemRole(ctx, source any, roles ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, source}, roles...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSystemRole", reflect.TypeOf((*PermissionRepository)(nil).HasSystemRole), varargs...)
}

// Update mocks base method.
func (m *PermissionRepository) Update(ctx context.Context, id model.ID, kind model.PermissionKind) (*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, kind)
	ret0, _ := ret[0].(*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *PermissionRepositoryMockRecorder) Update(ctx, id, kind any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*PermissionRepository)(nil).Update), ctx, id, kind)
}
