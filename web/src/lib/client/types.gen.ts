// This file is auto-generated by @hey-api/openapi-ts

/**
 * User
 * A user in the system.
 */
export type User = {
  /**
   * Unique identifier of the user.
   */
  id: string;
  /**
   * The unique username of the user.
   */
  username: string;
  /**
   * First name of the user.
   */
  first_name: string | null;
  /**
   * Last name of the user.
   */
  last_name: string | null;
  /**
   * Email address of the user.
   */
  email: string;
  /**
   * Profile picture of the user.
   */
  picture: string | null;
  /**
   * Work title of the user.
   */
  title: string | null;
  /**
   * Self description of the user.
   */
  bio: string | null;
  /**
   * Working address of the user.
   */
  address: string | null;
  /**
   * Phone number of the user.
   */
  phone: string | null;
  /**
   * Links to show on profile page.
   */
  links: Array<string> | null;
  /**
   * Languages of the user.
   */
  languages: Array<Language>;
  status: UserStatus;
  /**
   * Date when the user was created.
   */
  created_at: string;
  /**
   * Date when the user was updated.
   */
  updated_at: string | null;
};

/**
 * UserStatus
 * Status of the user.
 */
export type UserStatus = "active" | "pending" | "inactive" | "deleted";

/**
 * Organization
 * An organization in the system.
 */
export type Organization = {
  /**
   * Unique identifier of the organization.
   */
  id: string;
  /**
   * Name of the organization.
   */
  name: string;
  /**
   * Email address of the organization.
   */
  email: string;
  /**
   * Logo of the organization.
   */
  logo: string | null;
  /**
   * Work title of the user.
   */
  website: string | null;
  status: OrganizationStatus;
  /**
   * IDs of the users in the organization.
   */
  members: Array<string>;
  /**
   * IDs of the teams in the organization.
   */
  teams: Array<string>;
  /**
   * IDs of the namespaces in the organization.
   */
  namespaces: Array<string>;
  /**
   * Date when the organization was created.
   */
  created_at: string;
  /**
   * Date when the organization was updated.
   */
  updated_at: string | null;
};

/**
 * OrganizationStatus
 * Status of the organization.
 */
export type OrganizationStatus = "active" | "deleted";

/**
 * Todo
 * A todo item belonging to a user.
 */
export type Todo = {
  /**
   * Unique identifier of the todo.
   */
  id: string;
  /**
   * Title of the todo item.
   */
  title: string;
  /**
   * Description of the todo item.
   */
  description: string;
  priority: TodoPriority;
  /**
   * Status of the todo item.
   */
  completed: boolean;
  /**
   * ID of the user who owns the todo item.
   */
  owned_by: string;
  /**
   * ID of the user who created the todo item.
   */
  created_by: string;
  /**
   * Completion due date of the todo item.
   */
  due_date: string | null;
  /**
   * Date when the todo item was created.
   */
  created_at: string;
  /**
   * Date when the todo item was updated.
   */
  updated_at: string | null;
};

/**
 * Priority of the todo item.
 */
export type TodoPriority = "normal" | "important" | "urgent" | "critical";

/**
 * Notification
 * An in-app notification sent to the user.
 */
export type Notification = {
  /**
   * Unique identifier of the in-app notification.
   */
  id: string;
  /**
   * Title of the in-app notification.
   */
  title: string;
  /**
   * Description of the in-app notification.
   */
  description: string;
  /**
   * ID of the user who got notified.
   */
  recipient: string;
  /**
   * Whether the notification was read by the user.
   */
  read: boolean;
  /**
   * Date when the todo item was created.
   */
  created_at: string;
  /**
   * Date when the in-app notification was updated.
   */
  updated_at: string | null;
};

/**
 * SystemHealth
 */
export type SystemHealth = {
  /**
   * Health of the cache database.
   */
  cache_database: "healthy" | "unhealthy" | "unknown";
  /**
   * Health of the graph database.
   */
  graph_database: "healthy" | "unhealthy" | "unknown";
  /**
   * Health of the relational database.
   */
  relational_database: "healthy" | "unhealthy" | "unknown";
  /**
   * Health of the license.
   */
  license: "healthy" | "unhealthy" | "unknown";
  /**
   * Health of the message queue.
   */
  message_queue: "healthy" | "unhealthy" | "unknown";
};

/**
 * SystemVersion
 */
export type SystemVersion = {
  /**
   * Version of the application.
   */
  version: string;
  /**
   * Commit hash of the build.
   */
  commit: string;
  /**
   * Build date and time of the application.
   */
  date: string;
  /**
   * Go version used to build the application.
   */
  go_version: string;
};

/**
 * SystemLicense
 */
export type SystemLicense = {
  /**
   * Unique ID identifying the license.
   */
  id: string;
  /**
   * Name of the organization the license belongs to.
   */
  organization: string;
  /**
   * Email address of the licensee.
   */
  email: string;
  /**
   * Quotas available for the license.
   */
  quotas: {
    /**
     * Number of documents can exist in the system.
     */
    documents: number;
    /**
     * Number of namespaces can exist in the system.
     */
    namespaces: number;
    /**
     * Number of organizations active can exist in the system.
     */
    organizations: number;
    /**
     * Number of projects can exist in the system.
     */
    projects: number;
    /**
     * Number of roles can exist in the system.
     */
    roles: number;
    /**
     * Number of active or pending users can exist in the system.
     */
    users: number;
  };
  /**
   * Features enabled by the license.
   */
  features: Array<
    | "components"
    | "custom_statuses"
    | "custom_fields"
    | "multiple_assignees"
    | "releases"
  >;
  /**
   * Date and time when the license expires.
   */
  expires_at: string;
};

/**
 * HTTPError
 * HTTP error description.
 */
export type HttpError = {
  /**
   * Description of the error.
   */
  message: string;
};

/**
 * Two-letter ISO language code.
 */
export type Language =
  | "aa"
  | "ab"
  | "ae"
  | "af"
  | "ak"
  | "am"
  | "an"
  | "ar"
  | "as"
  | "av"
  | "ay"
  | "az"
  | "ba"
  | "be"
  | "bg"
  | "bh"
  | "bi"
  | "bm"
  | "bn"
  | "bo"
  | "br"
  | "bs"
  | "ca"
  | "ce"
  | "ch"
  | "co"
  | "cr"
  | "cs"
  | "cu"
  | "cv"
  | "cy"
  | "da"
  | "de"
  | "dv"
  | "dz"
  | "ee"
  | "el"
  | "en"
  | "eo"
  | "es"
  | "et"
  | "eu"
  | "fa"
  | "ff"
  | "fi"
  | "fj"
  | "fo"
  | "fr"
  | "fy"
  | "ga"
  | "gd"
  | "gl"
  | "gn"
  | "gu"
  | "gv"
  | "ha"
  | "he"
  | "hi"
  | "ho"
  | "hr"
  | "ht"
  | "hu"
  | "hy"
  | "hz"
  | "ia"
  | "id"
  | "ie"
  | "ig"
  | "ii"
  | "ik"
  | "io"
  | "is"
  | "it"
  | "iu"
  | "ja"
  | "jv"
  | "ka"
  | "kg"
  | "ki"
  | "kj"
  | "kk"
  | "kl"
  | "km"
  | "kn"
  | "ko"
  | "kr"
  | "ks"
  | "ku"
  | "kv"
  | "kw"
  | "ky"
  | "la"
  | "lb"
  | "lg"
  | "li"
  | "ln"
  | "lo"
  | "lt"
  | "lu"
  | "lv"
  | "mg"
  | "mh"
  | "mi"
  | "mk"
  | "ml"
  | "mn"
  | "mr"
  | "ms"
  | "mt"
  | "my"
  | "na"
  | "nb"
  | "nd"
  | "ne"
  | "ng"
  | "nl"
  | "nn"
  | "no"
  | "nr"
  | "nv"
  | "ny"
  | "oc"
  | "oj"
  | "om"
  | "or"
  | "os"
  | "pa"
  | "pi"
  | "pl"
  | "ps"
  | "pt"
  | "qu"
  | "rm"
  | "rn"
  | "ro"
  | "ru"
  | "rw"
  | "sa"
  | "sc"
  | "sd"
  | "se"
  | "sg"
  | "si"
  | "sk"
  | "sl"
  | "sm"
  | "sn"
  | "so"
  | "sq"
  | "sr"
  | "ss"
  | "st"
  | "su"
  | "sv"
  | "sw"
  | "ta"
  | "te"
  | "tg"
  | "th"
  | "ti"
  | "tk"
  | "tl"
  | "tn"
  | "to"
  | "tr"
  | "ts"
  | "tt"
  | "tw"
  | "ty"
  | "ug"
  | "uk"
  | "ur"
  | "uz"
  | "ve"
  | "vi"
  | "vo"
  | "wa"
  | "wo"
  | "xh"
  | "yi"
  | "yo"
  | "za"
  | "zh"
  | "zu";

/**
 * Permission
 * A permission in the system.
 */
export type Permission = {
  /**
   * Unique identifier of the user.
   */
  id: string;
  kind: PermissionKind;
  subject: string;
  target: string;
  /**
   * Date when the user was created.
   */
  created_at: string;
  /**
   * Date when the user was updated.
   */
  updated_at: string | null;
};

/**
 * PermissionKind
 * Kind of a permission.
 */
export type PermissionKind = "*" | "create" | "write" | "read" | "delete";

/**
 * Role
 * A role in the system.
 */
export type Role = {
  /**
   * Unique identifier of the role.
   */
  id: string;
  /**
   * Name of the role.
   */
  name: string;
  /**
   * Description of the role.
   */
  description?: string | null;
  /**
   * IDs of the users assigned to the role.
   */
  members: Array<string>;
  /**
   * IDs of the permissions assigned to the role.
   */
  permissions: Array<string>;
  /**
   * Date when the organization was created.
   */
  created_at: string;
  /**
   * Date when the organization was updated.
   */
  updated_at: string | null;
};

/**
 * ResourceType
 */
export type ResourceType =
  | "Assignment"
  | "Attachment"
  | "Comment"
  | "Document"
  | "Issue"
  | "IssueRelation"
  | "Label"
  | "Namespace"
  | "Organization"
  | "Permission"
  | "Project"
  | "ResourceType"
  | "Role"
  | "Todo"
  | "User";

/**
 * Number of resources to skip.
 */
export type Offset = number;

/**
 * Number of resources to return.
 */
export type Limit = number;

/**
 * ID of the resource.
 */
export type Id = string;

/**
 * ID of the resource combined with its resource type.
 */
export type ResourceId = string;

/**
 * Irreversibly delete the user.
 */
export type Force = boolean;

/**
 * ID of a role.
 */
export type Roles = Array<"Owner" | "Admin" | "Support">;

export type UserPatch = {
  /**
   * The unique username of the user.
   */
  username?: string;
  /**
   * First name of the user.
   */
  first_name?: string | null;
  /**
   * Last name of the user.
   */
  last_name?: string | null;
  /**
   * Email address of the user.
   */
  email?: string;
  /**
   * Password of the user. Required together with the new_password field.
   */
  password?: string;
  /**
   * New password of the user.
   */
  new_password?: string;
  /**
   * Profile picture of the user.
   */
  picture?: string | null;
  /**
   * Work title of the user.
   */
  title?: string | null;
  /**
   * Self description of the user.
   */
  bio?: string | null;
  /**
   * Working address of the user.
   */
  address?: string | null;
  /**
   * Phone number of the user.
   */
  phone?: string | null;
  /**
   * Links to show on profile page.
   */
  links?: Array<string>;
  /**
   * Languages of the user.
   */
  languages?: Array<Language>;
  status?: UserStatus;
};

export type UserCreate = {
  /**
   * The unique username of the user.
   */
  username: string;
  /**
   * First name of the user.
   */
  first_name?: string | null;
  /**
   * Last name of the user.
   */
  last_name?: string | null;
  /**
   * Email address of the user.
   */
  email: string;
  /**
   * Password of the user.
   */
  password: string;
  /**
   * Profile picture of the user.
   */
  picture?: string | null;
  /**
   * Work title of the user.
   */
  title?: string | null;
  /**
   * Self description of the user.
   */
  bio?: string | null;
  /**
   * Working address of the user.
   */
  address?: string | null;
  /**
   * Phone number of the user.
   */
  phone?: string | null;
  /**
   * Links to show on profile page.
   */
  links?: Array<string> | null;
  /**
   * Languages of the user.
   */
  languages?: Array<Language> | null;
};

export type TodoCreate = {
  /**
   * Title of the todo item.
   */
  title: string;
  /**
   * Description of the todo item.
   */
  description?: string | null;
  priority: TodoPriority;
  /**
   * ID of the user who owns the todo item.
   */
  owned_by: string;
  /**
   * Completion due date of the todo item.
   */
  due_date?: string | null;
};

export type TodoPatch = {
  /**
   * Title of the todo item.
   */
  title?: string;
  /**
   * Description of the todo item.
   */
  description?: string | null;
  priority?: TodoPriority;
  /**
   * Completion status of the todo item.
   */
  completed?: boolean;
  /**
   * ID of the user who owns the todo item.
   */
  owned_by?: string;
  /**
   * Completion due date of the todo item.
   */
  due_date?: string | null;
};

export type NotificationPatch = {
  /**
   * Whether the notification was read by the user.
   */
  read: boolean;
};

export type OrganizationCreate = {
  /**
   * Name of the organization.
   */
  name: string;
  /**
   * Email address of the organization.
   */
  email: string;
  /**
   * Logo of the organization.
   */
  logo?: string;
  /**
   * Work title of the user.
   */
  website?: string;
};

export type OrganizationPatch = {
  /**
   * Name of the organization.
   */
  name?: string;
  /**
   * Email address of the organization.
   */
  email?: string;
  /**
   * Logo of the organization.
   */
  logo?: string;
  /**
   * Work title of the user.
   */
  website?: string;
  status?: OrganizationStatus;
};

export type PermissionCreate = {
  kind: PermissionKind;
  subject: {
    resourceType: ResourceType;
    id: string;
  };
  target: {
    resourceType: ResourceType;
    id: string;
  };
};

export type PermissionPatch = {
  kind: PermissionKind;
};

export type RoleCreate = {
  /**
   * Name of the role.
   */
  name: string;
  /**
   * Description of the role.
   */
  description?: string;
};

export type RolePatch = {
  /**
   * Name of the role.
   */
  name?: string;
  /**
   * Description of the role.
   */
  description?: string;
};

export type V1UsersGetData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Number of resources to skip.
     */
    offset?: number;
    /**
     * Number of resources to return.
     */
    limit?: number;
  };
  url: "/v1/users";
};

export type V1UsersGetErrors = {
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1UsersGetError = V1UsersGetErrors[keyof V1UsersGetErrors];

export type V1UsersGetResponses = {
  /**
   * OK
   */
  200: Array<User>;
};

export type V1UsersGetResponse = V1UsersGetResponses[keyof V1UsersGetResponses];

export type V1UsersCreateData = {
  body?: UserCreate;
  path?: never;
  query?: never;
  url: "/v1/users";
};

export type V1UsersCreateErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1UsersCreateError = V1UsersCreateErrors[keyof V1UsersCreateErrors];

export type V1UsersCreateResponses = {
  /**
   * Example response
   */
  201: {
    /**
     * ID of the newly created resource.
     */
    id: string;
  };
};

export type V1UsersCreateResponse =
  V1UsersCreateResponses[keyof V1UsersCreateResponses];

export type V1UserDeleteData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: {
    /**
     * Irreversibly delete the user.
     */
    force?: boolean;
  };
  url: "/v1/users/{id}";
};

export type V1UserDeleteErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1UserDeleteError = V1UserDeleteErrors[keyof V1UserDeleteErrors];

export type V1UserDeleteResponses = {
  /**
   * No Content
   */
  204: void;
};

export type V1UserDeleteResponse =
  V1UserDeleteResponses[keyof V1UserDeleteResponses];

export type V1UserGetData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/users/{id}";
};

export type V1UserGetErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1UserGetError = V1UserGetErrors[keyof V1UserGetErrors];

export type V1UserGetResponses = {
  /**
   * OK
   */
  200: User;
};

export type V1UserGetResponse = V1UserGetResponses[keyof V1UserGetResponses];

export type V1UserUpdateData = {
  body?: UserPatch;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/users/{id}";
};

export type V1UserUpdateErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1UserUpdateError = V1UserUpdateErrors[keyof V1UserUpdateErrors];

export type V1UserUpdateResponses = {
  /**
   * OK
   */
  200: User;
};

export type V1UserUpdateResponse =
  V1UserUpdateResponses[keyof V1UserUpdateResponses];

export type V1TodosGetData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Number of resources to skip.
     */
    offset?: number;
    /**
     * Number of resources to return.
     */
    limit?: number;
    /**
     * Completion status of the items.
     */
    completed?: boolean;
  };
  url: "/v1/todos";
};

export type V1TodosGetErrors = {
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1TodosGetError = V1TodosGetErrors[keyof V1TodosGetErrors];

export type V1TodosGetResponses = {
  /**
   * OK
   */
  200: Array<Todo>;
};

export type V1TodosGetResponse = V1TodosGetResponses[keyof V1TodosGetResponses];

export type V1TodosCreateData = {
  body?: TodoCreate;
  path?: never;
  query?: never;
  url: "/v1/todos";
};

export type V1TodosCreateErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1TodosCreateError = V1TodosCreateErrors[keyof V1TodosCreateErrors];

export type V1TodosCreateResponses = {
  /**
   * Example response
   */
  201: {
    /**
     * ID of the newly created resource.
     */
    id: string;
  };
};

export type V1TodosCreateResponse =
  V1TodosCreateResponses[keyof V1TodosCreateResponses];

export type V1TodoDeleteData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/todos/{id}";
};

export type V1TodoDeleteErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1TodoDeleteError = V1TodoDeleteErrors[keyof V1TodoDeleteErrors];

export type V1TodoDeleteResponses = {
  /**
   * No Content
   */
  204: void;
};

export type V1TodoDeleteResponse =
  V1TodoDeleteResponses[keyof V1TodoDeleteResponses];

export type V1TodoGetData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/todos/{id}";
};

export type V1TodoGetErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1TodoGetError = V1TodoGetErrors[keyof V1TodoGetErrors];

export type V1TodoGetResponses = {
  /**
   * OK
   */
  200: Todo;
};

export type V1TodoGetResponse = V1TodoGetResponses[keyof V1TodoGetResponses];

export type V1TodoUpdateData = {
  body?: TodoPatch;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/todos/{id}";
};

export type V1TodoUpdateErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1TodoUpdateError = V1TodoUpdateErrors[keyof V1TodoUpdateErrors];

export type V1TodoUpdateResponses = {
  /**
   * OK
   */
  200: Todo;
};

export type V1TodoUpdateResponse =
  V1TodoUpdateResponses[keyof V1TodoUpdateResponses];

export type V1NotificationsGetData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Number of resources to skip.
     */
    offset?: number;
    /**
     * Number of resources to return.
     */
    limit?: number;
  };
  url: "/v1/notifications";
};

export type V1NotificationsGetErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1NotificationsGetError =
  V1NotificationsGetErrors[keyof V1NotificationsGetErrors];

export type V1NotificationsGetResponses = {
  /**
   * OK
   */
  200: Array<Notification>;
};

export type V1NotificationsGetResponse =
  V1NotificationsGetResponses[keyof V1NotificationsGetResponses];

export type V1NotificationDeleteData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/notifications/{id}";
};

export type V1NotificationDeleteErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1NotificationDeleteError =
  V1NotificationDeleteErrors[keyof V1NotificationDeleteErrors];

export type V1NotificationDeleteResponses = {
  /**
   * No Content
   */
  204: void;
};

export type V1NotificationDeleteResponse =
  V1NotificationDeleteResponses[keyof V1NotificationDeleteResponses];

export type V1NotificationGetData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/notifications/{id}";
};

export type V1NotificationGetErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1NotificationGetError =
  V1NotificationGetErrors[keyof V1NotificationGetErrors];

export type V1NotificationGetResponses = {
  /**
   * OK
   */
  200: Notification;
};

export type V1NotificationGetResponse =
  V1NotificationGetResponses[keyof V1NotificationGetResponses];

export type V1NotificationUpdateData = {
  body?: NotificationPatch;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/notifications/{id}";
};

export type V1NotificationUpdateErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1NotificationUpdateError =
  V1NotificationUpdateErrors[keyof V1NotificationUpdateErrors];

export type V1NotificationUpdateResponses = {
  /**
   * OK
   */
  200: Notification;
};

export type V1NotificationUpdateResponse =
  V1NotificationUpdateResponses[keyof V1NotificationUpdateResponses];

export type V1OrganizationsGetData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Number of resources to skip.
     */
    offset?: number;
    /**
     * Number of resources to return.
     */
    limit?: number;
  };
  url: "/v1/organizations";
};

export type V1OrganizationsGetErrors = {
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationsGetError =
  V1OrganizationsGetErrors[keyof V1OrganizationsGetErrors];

export type V1OrganizationsGetResponses = {
  /**
   * OK
   */
  200: Array<Organization>;
};

export type V1OrganizationsGetResponse =
  V1OrganizationsGetResponses[keyof V1OrganizationsGetResponses];

export type V1OrganizationsCreateData = {
  body?: OrganizationCreate;
  path?: never;
  query?: never;
  url: "/v1/organizations";
};

export type V1OrganizationsCreateErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationsCreateError =
  V1OrganizationsCreateErrors[keyof V1OrganizationsCreateErrors];

export type V1OrganizationsCreateResponses = {
  /**
   * Example response
   */
  201: {
    /**
     * ID of the newly created resource.
     */
    id: string;
  };
};

export type V1OrganizationsCreateResponse =
  V1OrganizationsCreateResponses[keyof V1OrganizationsCreateResponses];

export type V1OrganizationDeleteData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: {
    /**
     * Irreversibly delete the user.
     */
    force?: boolean;
  };
  url: "/v1/organizations/{id}";
};

export type V1OrganizationDeleteErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationDeleteError =
  V1OrganizationDeleteErrors[keyof V1OrganizationDeleteErrors];

export type V1OrganizationDeleteResponses = {
  /**
   * No Content
   */
  204: void;
};

export type V1OrganizationDeleteResponse =
  V1OrganizationDeleteResponses[keyof V1OrganizationDeleteResponses];

export type V1OrganizationGetData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/organizations/{id}";
};

export type V1OrganizationGetErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationGetError =
  V1OrganizationGetErrors[keyof V1OrganizationGetErrors];

export type V1OrganizationGetResponses = {
  /**
   * OK
   */
  200: Organization;
};

export type V1OrganizationGetResponse =
  V1OrganizationGetResponses[keyof V1OrganizationGetResponses];

export type V1OrganizationUpdateData = {
  body?: OrganizationPatch;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/organizations/{id}";
};

export type V1OrganizationUpdateErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationUpdateError =
  V1OrganizationUpdateErrors[keyof V1OrganizationUpdateErrors];

export type V1OrganizationUpdateResponses = {
  /**
   * OK
   */
  200: Organization;
};

export type V1OrganizationUpdateResponse =
  V1OrganizationUpdateResponses[keyof V1OrganizationUpdateResponses];

export type V1OrganizationMembersGetData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/organizations/{id}/members";
};

export type V1OrganizationMembersGetErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationMembersGetError =
  V1OrganizationMembersGetErrors[keyof V1OrganizationMembersGetErrors];

export type V1OrganizationMembersGetResponses = {
  /**
   * OK
   */
  200: Array<User>;
};

export type V1OrganizationMembersGetResponse =
  V1OrganizationMembersGetResponses[keyof V1OrganizationMembersGetResponses];

export type V1OrganizationMembersAddData = {
  body?: {
    /**
     * ID of the user to add.
     */
    user_id: string;
  };
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/organizations/{id}/members";
};

export type V1OrganizationMembersAddErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationMembersAddError =
  V1OrganizationMembersAddErrors[keyof V1OrganizationMembersAddErrors];

export type V1OrganizationMembersAddResponses = {
  /**
   * Example response
   */
  201: {
    /**
     * ID of the newly created resource.
     */
    id: string;
  };
};

export type V1OrganizationMembersAddResponse =
  V1OrganizationMembersAddResponses[keyof V1OrganizationMembersAddResponses];

export type V1OrganizationMemberRemoveData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
    /**
     * ID of the user.
     */
    user_id: string;
  };
  query?: never;
  url: "/v1/organizations/{id}/members/{user_id}";
};

export type V1OrganizationMemberRemoveErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationMemberRemoveError =
  V1OrganizationMemberRemoveErrors[keyof V1OrganizationMemberRemoveErrors];

export type V1OrganizationMemberRemoveResponses = {
  /**
   * No Content
   */
  204: void;
};

export type V1OrganizationMemberRemoveResponse =
  V1OrganizationMemberRemoveResponses[keyof V1OrganizationMemberRemoveResponses];

export type V1OrganizationRolesGetData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: {
    /**
     * Number of resources to skip.
     */
    offset?: number;
    /**
     * Number of resources to return.
     */
    limit?: number;
  };
  url: "/v1/organizations/${id}/roles";
};

export type V1OrganizationRolesGetErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationRolesGetError =
  V1OrganizationRolesGetErrors[keyof V1OrganizationRolesGetErrors];

export type V1OrganizationRolesGetResponses = {
  /**
   * OK
   */
  200: Array<Role>;
};

export type V1OrganizationRolesGetResponse =
  V1OrganizationRolesGetResponses[keyof V1OrganizationRolesGetResponses];

export type V1OrganizationRolesCreateData = {
  body?: RoleCreate;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/organizations/${id}/roles";
};

export type V1OrganizationRolesCreateErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationRolesCreateError =
  V1OrganizationRolesCreateErrors[keyof V1OrganizationRolesCreateErrors];

export type V1OrganizationRolesCreateResponses = {
  /**
   * Example response
   */
  201: {
    /**
     * ID of the newly created resource.
     */
    id: string;
  };
};

export type V1OrganizationRolesCreateResponse =
  V1OrganizationRolesCreateResponses[keyof V1OrganizationRolesCreateResponses];

export type V1OrganizationRoleDeleteData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
    /**
     * ID of the role.
     */
    role_id: string;
  };
  query?: never;
  url: "/v1/organizations/${id}/roles/{role_id}";
};

export type V1OrganizationRoleDeleteErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationRoleDeleteError =
  V1OrganizationRoleDeleteErrors[keyof V1OrganizationRoleDeleteErrors];

export type V1OrganizationRoleDeleteResponses = {
  /**
   * No Content
   */
  204: void;
};

export type V1OrganizationRoleDeleteResponse =
  V1OrganizationRoleDeleteResponses[keyof V1OrganizationRoleDeleteResponses];

export type V1OrganizationRoleGetData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
    /**
     * ID of the role.
     */
    role_id: string;
  };
  query?: never;
  url: "/v1/organizations/${id}/roles/{role_id}";
};

export type V1OrganizationRoleGetErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationRoleGetError =
  V1OrganizationRoleGetErrors[keyof V1OrganizationRoleGetErrors];

export type V1OrganizationRoleGetResponses = {
  /**
   * OK
   */
  200: Role;
};

export type V1OrganizationRoleGetResponse =
  V1OrganizationRoleGetResponses[keyof V1OrganizationRoleGetResponses];

export type V1OrganizationRoleUpdateData = {
  body?: RolePatch;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
    /**
     * ID of the role.
     */
    role_id: string;
  };
  query?: never;
  url: "/v1/organizations/${id}/roles/{role_id}";
};

export type V1OrganizationRoleUpdateErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationRoleUpdateError =
  V1OrganizationRoleUpdateErrors[keyof V1OrganizationRoleUpdateErrors];

export type V1OrganizationRoleUpdateResponses = {
  /**
   * OK
   */
  200: Role;
};

export type V1OrganizationRoleUpdateResponse =
  V1OrganizationRoleUpdateResponses[keyof V1OrganizationRoleUpdateResponses];

export type V1OrganizationRoleMembersGetData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
    /**
     * ID of the role.
     */
    role_id: string;
  };
  query?: never;
  url: "/v1/organizations/{id}/roles/{role_id}/members";
};

export type V1OrganizationRoleMembersGetErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationRoleMembersGetError =
  V1OrganizationRoleMembersGetErrors[keyof V1OrganizationRoleMembersGetErrors];

export type V1OrganizationRoleMembersGetResponses = {
  /**
   * OK
   */
  200: Array<User>;
};

export type V1OrganizationRoleMembersGetResponse =
  V1OrganizationRoleMembersGetResponses[keyof V1OrganizationRoleMembersGetResponses];

export type V1OrganizationRoleMembersAddData = {
  body?: {
    /**
     * ID of the user to add.
     */
    user_id: string;
  };
  path: {
    /**
     * ID of the resource.
     */
    id: string;
    /**
     * ID of the role.
     */
    role_id: string;
  };
  query?: never;
  url: "/v1/organizations/{id}/roles/{role_id}/members";
};

export type V1OrganizationRoleMembersAddErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationRoleMembersAddError =
  V1OrganizationRoleMembersAddErrors[keyof V1OrganizationRoleMembersAddErrors];

export type V1OrganizationRoleMembersAddResponses = {
  /**
   * Example response
   */
  201: {
    /**
     * ID of the newly created resource.
     */
    id: string;
  };
};

export type V1OrganizationRoleMembersAddResponse =
  V1OrganizationRoleMembersAddResponses[keyof V1OrganizationRoleMembersAddResponses];

export type V1OrganizationRoleMemberRemoveData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
    /**
     * ID of the role.
     */
    role_id: string;
    /**
     * ID of the user.
     */
    user_id: string;
  };
  query?: never;
  url: "/v1/organizations/{id}/roles/{role_id}/members/{user_id}";
};

export type V1OrganizationRoleMemberRemoveErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1OrganizationRoleMemberRemoveError =
  V1OrganizationRoleMemberRemoveErrors[keyof V1OrganizationRoleMemberRemoveErrors];

export type V1OrganizationRoleMemberRemoveResponses = {
  /**
   * No Content
   */
  204: void;
};

export type V1OrganizationRoleMemberRemoveResponse =
  V1OrganizationRoleMemberRemoveResponses[keyof V1OrganizationRoleMemberRemoveResponses];

export type V1PermissionsCreateData = {
  body?: PermissionCreate;
  path?: never;
  query?: never;
  url: "/v1/permissions";
};

export type V1PermissionsCreateErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1PermissionsCreateError =
  V1PermissionsCreateErrors[keyof V1PermissionsCreateErrors];

export type V1PermissionsCreateResponses = {
  /**
   * Example response
   */
  201: {
    /**
     * ID of the newly created resource.
     */
    id: string;
  };
};

export type V1PermissionsCreateResponse =
  V1PermissionsCreateResponses[keyof V1PermissionsCreateResponses];

export type V1PermissionDeleteData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/permissions/{id}";
};

export type V1PermissionDeleteErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1PermissionDeleteError =
  V1PermissionDeleteErrors[keyof V1PermissionDeleteErrors];

export type V1PermissionDeleteResponses = {
  /**
   * No Content
   */
  204: void;
};

export type V1PermissionDeleteResponse =
  V1PermissionDeleteResponses[keyof V1PermissionDeleteResponses];

export type V1PermissionGetData = {
  body?: never;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/permissions/{id}";
};

export type V1PermissionGetErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1PermissionGetError =
  V1PermissionGetErrors[keyof V1PermissionGetErrors];

export type V1PermissionGetResponses = {
  /**
   * OK
   */
  200: Permission;
};

export type V1PermissionGetResponse =
  V1PermissionGetResponses[keyof V1PermissionGetResponses];

export type V1PermissionUpdateData = {
  body?: PermissionPatch;
  path: {
    /**
     * ID of the resource.
     */
    id: string;
  };
  query?: never;
  url: "/v1/permissions/{id}";
};

export type V1PermissionUpdateErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1PermissionUpdateError =
  V1PermissionUpdateErrors[keyof V1PermissionUpdateErrors];

export type V1PermissionUpdateResponses = {
  /**
   * OK
   */
  200: Permission;
};

export type V1PermissionUpdateResponse =
  V1PermissionUpdateResponses[keyof V1PermissionUpdateResponses];

export type V1PermissionResourceGetData = {
  body?: never;
  path: {
    /**
     * ID of the resource combined with its resource type.
     */
    resourceId: string;
  };
  query?: never;
  url: "/v1/permissions/resources/{resourceId}";
};

export type V1PermissionResourceGetErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1PermissionResourceGetError =
  V1PermissionResourceGetErrors[keyof V1PermissionResourceGetErrors];

export type V1PermissionResourceGetResponses = {
  /**
   * OK
   */
  200: Array<Permission>;
};

export type V1PermissionResourceGetResponse =
  V1PermissionResourceGetResponses[keyof V1PermissionResourceGetResponses];

export type V1PermissionHasRelationsData = {
  body?: never;
  path: {
    /**
     * ID of the resource combined with its resource type.
     */
    resourceId: string;
  };
  query?: never;
  url: "/v1/permissions/has-relations/{resourceId}";
};

export type V1PermissionHasRelationsErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * The requested resource not found
   */
  404: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1PermissionHasRelationsError =
  V1PermissionHasRelationsErrors[keyof V1PermissionHasRelationsErrors];

export type V1PermissionHasRelationsResponses = {
  /**
   * OK
   */
  200: boolean;
};

export type V1PermissionHasRelationsResponse =
  V1PermissionHasRelationsResponses[keyof V1PermissionHasRelationsResponses];

export type V1PermissionHasSystemRoleData = {
  body?: never;
  path?: never;
  query: {
    /**
     * ID of a role.
     */
    roles: Array<"Owner" | "Admin" | "Support">;
  };
  url: "/v1/permissions/has-system-role";
};

export type V1PermissionHasSystemRoleErrors = {
  /**
   * Bad request
   */
  400: HttpError;
  /**
   * Unauthorized request
   */
  401: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1PermissionHasSystemRoleError =
  V1PermissionHasSystemRoleErrors[keyof V1PermissionHasSystemRoleErrors];

export type V1PermissionHasSystemRoleResponses = {
  /**
   * OK
   */
  200: boolean;
};

export type V1PermissionHasSystemRoleResponse =
  V1PermissionHasSystemRoleResponses[keyof V1PermissionHasSystemRoleResponses];

export type V1SystemHealthData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v1/system/health";
};

export type V1SystemHealthErrors = {
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1SystemHealthError =
  V1SystemHealthErrors[keyof V1SystemHealthErrors];

export type V1SystemHealthResponses = {
  /**
   * OK
   */
  200: SystemHealth;
};

export type V1SystemHealthResponse =
  V1SystemHealthResponses[keyof V1SystemHealthResponses];

export type V1SystemHeartbeatData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v1/system/heartbeat";
};

export type V1SystemHeartbeatErrors = {
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1SystemHeartbeatError =
  V1SystemHeartbeatErrors[keyof V1SystemHeartbeatErrors];

export type V1SystemHeartbeatResponses = {
  /**
   * OK
   */
  200: "OK";
};

export type V1SystemHeartbeatResponse =
  V1SystemHeartbeatResponses[keyof V1SystemHeartbeatResponses];

export type V1SystemLicenseData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v1/system/license";
};

export type V1SystemLicenseErrors = {
  /**
   * Forbidden
   */
  403: HttpError;
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1SystemLicenseError =
  V1SystemLicenseErrors[keyof V1SystemLicenseErrors];

export type V1SystemLicenseResponses = {
  /**
   * OK
   */
  200: SystemLicense;
};

export type V1SystemLicenseResponse =
  V1SystemLicenseResponses[keyof V1SystemLicenseResponses];

export type V1SystemVersionData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v1/system/version";
};

export type V1SystemVersionErrors = {
  /**
   * Internal Server Error
   */
  500: HttpError;
};

export type V1SystemVersionError =
  V1SystemVersionErrors[keyof V1SystemVersionErrors];

export type V1SystemVersionResponses = {
  /**
   * OK
   */
  200: SystemVersion;
};

export type V1SystemVersionResponse =
  V1SystemVersionResponses[keyof V1SystemVersionResponses];

export type ClientOptions = {
  baseUrl: "https://{domain}/api" | (string & {});
};
