// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  V1UsersGetData,
  V1UsersGetResponses,
  V1UsersGetErrors,
  V1UsersCreateData,
  V1UsersCreateResponses,
  V1UsersCreateErrors,
  V1UserDeleteData,
  V1UserDeleteResponses,
  V1UserDeleteErrors,
  V1UserGetData,
  V1UserGetResponses,
  V1UserGetErrors,
  V1UserUpdateData,
  V1UserUpdateResponses,
  V1UserUpdateErrors,
  V1TodosGetData,
  V1TodosGetResponses,
  V1TodosGetErrors,
  V1TodosCreateData,
  V1TodosCreateResponses,
  V1TodosCreateErrors,
  V1TodoDeleteData,
  V1TodoDeleteResponses,
  V1TodoDeleteErrors,
  V1TodoGetData,
  V1TodoGetResponses,
  V1TodoGetErrors,
  V1TodoUpdateData,
  V1TodoUpdateResponses,
  V1TodoUpdateErrors,
  V1NotificationsGetData,
  V1NotificationsGetResponses,
  V1NotificationsGetErrors,
  V1NotificationDeleteData,
  V1NotificationDeleteResponses,
  V1NotificationDeleteErrors,
  V1NotificationGetData,
  V1NotificationGetResponses,
  V1NotificationGetErrors,
  V1NotificationUpdateData,
  V1NotificationUpdateResponses,
  V1NotificationUpdateErrors,
  V1OrganizationsGetData,
  V1OrganizationsGetResponses,
  V1OrganizationsGetErrors,
  V1OrganizationsCreateData,
  V1OrganizationsCreateResponses,
  V1OrganizationsCreateErrors,
  V1OrganizationDeleteData,
  V1OrganizationDeleteResponses,
  V1OrganizationDeleteErrors,
  V1OrganizationGetData,
  V1OrganizationGetResponses,
  V1OrganizationGetErrors,
  V1OrganizationUpdateData,
  V1OrganizationUpdateResponses,
  V1OrganizationUpdateErrors,
  V1OrganizationMembersGetData,
  V1OrganizationMembersGetResponses,
  V1OrganizationMembersGetErrors,
  V1OrganizationMembersAddData,
  V1OrganizationMembersAddResponses,
  V1OrganizationMembersAddErrors,
  V1OrganizationMemberRemoveData,
  V1OrganizationMemberRemoveResponses,
  V1OrganizationMemberRemoveErrors,
  V1OrganizationRolesGetData,
  V1OrganizationRolesGetResponses,
  V1OrganizationRolesGetErrors,
  V1OrganizationRolesCreateData,
  V1OrganizationRolesCreateResponses,
  V1OrganizationRolesCreateErrors,
  V1OrganizationRoleDeleteData,
  V1OrganizationRoleDeleteResponses,
  V1OrganizationRoleDeleteErrors,
  V1OrganizationRoleGetData,
  V1OrganizationRoleGetResponses,
  V1OrganizationRoleGetErrors,
  V1OrganizationRoleUpdateData,
  V1OrganizationRoleUpdateResponses,
  V1OrganizationRoleUpdateErrors,
  V1OrganizationRoleMembersGetData,
  V1OrganizationRoleMembersGetResponses,
  V1OrganizationRoleMembersGetErrors,
  V1OrganizationRoleMembersAddData,
  V1OrganizationRoleMembersAddResponses,
  V1OrganizationRoleMembersAddErrors,
  V1OrganizationRoleMemberRemoveData,
  V1OrganizationRoleMemberRemoveResponses,
  V1OrganizationRoleMemberRemoveErrors,
  V1PermissionsCreateData,
  V1PermissionsCreateResponses,
  V1PermissionsCreateErrors,
  V1PermissionDeleteData,
  V1PermissionDeleteResponses,
  V1PermissionDeleteErrors,
  V1PermissionGetData,
  V1PermissionGetResponses,
  V1PermissionGetErrors,
  V1PermissionUpdateData,
  V1PermissionUpdateResponses,
  V1PermissionUpdateErrors,
  V1PermissionResourceGetData,
  V1PermissionResourceGetResponses,
  V1PermissionResourceGetErrors,
  V1PermissionHasRelationsData,
  V1PermissionHasRelationsResponses,
  V1PermissionHasRelationsErrors,
  V1PermissionHasSystemRoleData,
  V1PermissionHasSystemRoleResponses,
  V1PermissionHasSystemRoleErrors,
  V1SystemHealthData,
  V1SystemHealthResponses,
  V1SystemHealthErrors,
  V1SystemHeartbeatData,
  V1SystemHeartbeatResponses,
  V1SystemHeartbeatErrors,
  V1SystemLicenseData,
  V1SystemLicenseResponses,
  V1SystemLicenseErrors,
  V1SystemVersionData,
  V1SystemVersionResponses,
  V1SystemVersionErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get all users
 * Returns the paginated list of users
 */
export const v1UsersGet = <ThrowOnError extends boolean = false>(
  options?: Options<V1UsersGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    V1UsersGetResponses,
    V1UsersGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/users",
    ...options,
  });
};

/**
 * Create new user
 * Create a new user.
 */
export const v1UsersCreate = <ThrowOnError extends boolean = false>(
  options?: Options<V1UsersCreateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    V1UsersCreateResponses,
    V1UsersCreateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete the user with the given ID.
 * Delete a user by its ID. The user is not deleted irreversibly until the "force" parameter is set to true.
 */
export const v1UserDelete = <ThrowOnError extends boolean = false>(
  options: Options<V1UserDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    V1UserDeleteResponses,
    V1UserDeleteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/users/{id}",
    ...options,
  });
};

/**
 * Get user
 * Return the requested user by its ID.
 */
export const v1UserGet = <ThrowOnError extends boolean = false>(
  options: Options<V1UserGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    V1UserGetResponses,
    V1UserGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/users/{id}",
    ...options,
  });
};

/**
 * Update user
 * Update the given user.
 */
export const v1UserUpdate = <ThrowOnError extends boolean = false>(
  options: Options<V1UserUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    V1UserUpdateResponses,
    V1UserUpdateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/users/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get todo item
 * Returns all todo items belonging to the current user.
 */
export const v1TodosGet = <ThrowOnError extends boolean = false>(
  options?: Options<V1TodosGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    V1TodosGetResponses,
    V1TodosGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/todos",
    ...options,
  });
};

/**
 * Create todo item
 * Create a new todo item.
 */
export const v1TodosCreate = <ThrowOnError extends boolean = false>(
  options?: Options<V1TodosCreateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    V1TodosCreateResponses,
    V1TodosCreateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/todos",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete todo item
 * Delete todo by its ID.
 */
export const v1TodoDelete = <ThrowOnError extends boolean = false>(
  options: Options<V1TodoDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    V1TodoDeleteResponses,
    V1TodoDeleteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/todos/{id}",
    ...options,
  });
};

/**
 * Get todo item
 * Return a todo item based on the todo id belonging to the current user.
 */
export const v1TodoGet = <ThrowOnError extends boolean = false>(
  options: Options<V1TodoGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    V1TodoGetResponses,
    V1TodoGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/todos/{id}",
    ...options,
  });
};

/**
 * Update todo
 * Update the given todo
 */
export const v1TodoUpdate = <ThrowOnError extends boolean = false>(
  options: Options<V1TodoUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    V1TodoUpdateResponses,
    V1TodoUpdateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/todos/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get all in-app notification of the requesting user.
 * Returns the paginated list of in-app notifications
 */
export const v1NotificationsGet = <ThrowOnError extends boolean = false>(
  options?: Options<V1NotificationsGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    V1NotificationsGetResponses,
    V1NotificationsGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/notifications",
    ...options,
  });
};

/**
 * Delete the notification with the given ID.
 * Delete a notification by its ID.
 */
export const v1NotificationDelete = <ThrowOnError extends boolean = false>(
  options: Options<V1NotificationDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    V1NotificationDeleteResponses,
    V1NotificationDeleteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/notifications/{id}",
    ...options,
  });
};

/**
 * Get an in-app notification
 * Return the requested notification by its ID.
 */
export const v1NotificationGet = <ThrowOnError extends boolean = false>(
  options: Options<V1NotificationGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    V1NotificationGetResponses,
    V1NotificationGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/notifications/{id}",
    ...options,
  });
};

/**
 * Update an in-app notification
 * Update the given user.
 */
export const v1NotificationUpdate = <ThrowOnError extends boolean = false>(
  options: Options<V1NotificationUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    V1NotificationUpdateResponses,
    V1NotificationUpdateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/notifications/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get organizations
 * Returns the list of organizations in the system.
 */
export const v1OrganizationsGet = <ThrowOnError extends boolean = false>(
  options?: Options<V1OrganizationsGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    V1OrganizationsGetResponses,
    V1OrganizationsGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations",
    ...options,
  });
};

/**
 * Create organization
 * Create a new organization.
 */
export const v1OrganizationsCreate = <ThrowOnError extends boolean = false>(
  options?: Options<V1OrganizationsCreateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    V1OrganizationsCreateResponses,
    V1OrganizationsCreateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete organization
 * Delete the organization by its ID.
 */
export const v1OrganizationDelete = <ThrowOnError extends boolean = false>(
  options: Options<V1OrganizationDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    V1OrganizationDeleteResponses,
    V1OrganizationDeleteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations/{id}",
    ...options,
  });
};

/**
 * Get organization
 * Returns the given organization by its ID.
 */
export const v1OrganizationGet = <ThrowOnError extends boolean = false>(
  options: Options<V1OrganizationGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    V1OrganizationGetResponses,
    V1OrganizationGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations/{id}",
    ...options,
  });
};

/**
 * Update organization
 * Update the organization by its ID.
 */
export const v1OrganizationUpdate = <ThrowOnError extends boolean = false>(
  options: Options<V1OrganizationUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    V1OrganizationUpdateResponses,
    V1OrganizationUpdateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get organization members
 * Return the users that are members of the organization.
 */
export const v1OrganizationMembersGet = <ThrowOnError extends boolean = false>(
  options: Options<V1OrganizationMembersGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    V1OrganizationMembersGetResponses,
    V1OrganizationMembersGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations/{id}/members",
    ...options,
  });
};

/**
 * Add organization member
 * Add an existing user to an organization.
 */
export const v1OrganizationMembersAdd = <ThrowOnError extends boolean = false>(
  options: Options<V1OrganizationMembersAddData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    V1OrganizationMembersAddResponses,
    V1OrganizationMembersAddErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations/{id}/members",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Remove organization member
 * Removes a member from the organization
 */
export const v1OrganizationMemberRemove = <
  ThrowOnError extends boolean = false,
>(
  options: Options<V1OrganizationMemberRemoveData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    V1OrganizationMemberRemoveResponses,
    V1OrganizationMemberRemoveErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations/{id}/members/{user_id}",
    ...options,
  });
};

/**
 * Get organization roles
 * Return the roles that are assigned to the organization.
 */
export const v1OrganizationRolesGet = <ThrowOnError extends boolean = false>(
  options: Options<V1OrganizationRolesGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    V1OrganizationRolesGetResponses,
    V1OrganizationRolesGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations/${id}/roles",
    ...options,
  });
};

/**
 * Create a new role in the organization
 * Create a new role and assign it to the organization.
 */
export const v1OrganizationRolesCreate = <ThrowOnError extends boolean = false>(
  options: Options<V1OrganizationRolesCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    V1OrganizationRolesCreateResponses,
    V1OrganizationRolesCreateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations/${id}/roles",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete organization role
 * Deletes a role that is assigned to the organization.
 */
export const v1OrganizationRoleDelete = <ThrowOnError extends boolean = false>(
  options: Options<V1OrganizationRoleDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    V1OrganizationRoleDeleteResponses,
    V1OrganizationRoleDeleteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations/${id}/roles/{role_id}",
    ...options,
  });
};

/**
 * Get organization role
 * Returns the given organization by its ID.
 */
export const v1OrganizationRoleGet = <ThrowOnError extends boolean = false>(
  options: Options<V1OrganizationRoleGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    V1OrganizationRoleGetResponses,
    V1OrganizationRoleGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations/${id}/roles/{role_id}",
    ...options,
  });
};

/**
 * Update organization role
 * Update the organization role by its ID.
 */
export const v1OrganizationRoleUpdate = <ThrowOnError extends boolean = false>(
  options: Options<V1OrganizationRoleUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    V1OrganizationRoleUpdateResponses,
    V1OrganizationRoleUpdateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations/${id}/roles/{role_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get organization role members
 * Return the users that are members of the organization's role.
 */
export const v1OrganizationRoleMembersGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<V1OrganizationRoleMembersGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    V1OrganizationRoleMembersGetResponses,
    V1OrganizationRoleMembersGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations/{id}/roles/{role_id}/members",
    ...options,
  });
};

/**
 * Add organization role member
 * Add an existing user to an organization's role.
 */
export const v1OrganizationRoleMembersAdd = <
  ThrowOnError extends boolean = false,
>(
  options: Options<V1OrganizationRoleMembersAddData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    V1OrganizationRoleMembersAddResponses,
    V1OrganizationRoleMembersAddErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations/{id}/roles/{role_id}/members",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Remove organization role member
 * Removes a member from the organization's role
 */
export const v1OrganizationRoleMemberRemove = <
  ThrowOnError extends boolean = false,
>(
  options: Options<V1OrganizationRoleMemberRemoveData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    V1OrganizationRoleMemberRemoveResponses,
    V1OrganizationRoleMemberRemoveErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/organizations/{id}/roles/{role_id}/members/{user_id}",
    ...options,
  });
};

/**
 * Create permission
 * Create a new permission for a subject to the given target.
 */
export const v1PermissionsCreate = <ThrowOnError extends boolean = false>(
  options?: Options<V1PermissionsCreateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    V1PermissionsCreateResponses,
    V1PermissionsCreateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/permissions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete permission
 * Delete a permission by its ID.
 */
export const v1PermissionDelete = <ThrowOnError extends boolean = false>(
  options: Options<V1PermissionDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    V1PermissionDeleteResponses,
    V1PermissionDeleteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/permissions/{id}",
    ...options,
  });
};

/**
 * Get permission
 * Get a permission by its ID.
 */
export const v1PermissionGet = <ThrowOnError extends boolean = false>(
  options: Options<V1PermissionGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    V1PermissionGetResponses,
    V1PermissionGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/permissions/{id}",
    ...options,
  });
};

/**
 * Update permission
 * Update a permission.
 */
export const v1PermissionUpdate = <ThrowOnError extends boolean = false>(
  options: Options<V1PermissionUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    V1PermissionUpdateResponses,
    V1PermissionUpdateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/permissions/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get permissions for a resource
 * Get all permissions the caller have for a given resource.
 */
export const v1PermissionResourceGet = <ThrowOnError extends boolean = false>(
  options: Options<V1PermissionResourceGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    V1PermissionResourceGetResponses,
    V1PermissionResourceGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/permissions/resources/{resourceId}",
    ...options,
  });
};

/**
 * Check relations to resource
 * Check if the caller has any relations to a given resource.
 */
export const v1PermissionHasRelations = <ThrowOnError extends boolean = false>(
  options: Options<V1PermissionHasRelationsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    V1PermissionHasRelationsResponses,
    V1PermissionHasRelationsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/permissions/has-relations/{resourceId}",
    ...options,
  });
};

/**
 * Check system role assignment
 * Check if the user is member of one or more system roles.
 */
export const v1PermissionHasSystemRole = <ThrowOnError extends boolean = false>(
  options: Options<V1PermissionHasSystemRoleData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    V1PermissionHasSystemRoleResponses,
    V1PermissionHasSystemRoleErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/permissions/has-system-role",
    ...options,
  });
};

/**
 * Get system health
 * Returns the health of registered components.
 */
export const v1SystemHealth = <ThrowOnError extends boolean = false>(
  options?: Options<V1SystemHealthData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    V1SystemHealthResponses,
    V1SystemHealthErrors,
    ThrowOnError
  >({
    url: "/v1/system/health",
    ...options,
  });
};

/**
 * Get heartbeat
 * Returns 200 OK if the service is reachable.
 */
export const v1SystemHeartbeat = <ThrowOnError extends boolean = false>(
  options?: Options<V1SystemHeartbeatData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    V1SystemHeartbeatResponses,
    V1SystemHeartbeatErrors,
    ThrowOnError
  >({
    url: "/v1/system/heartbeat",
    ...options,
  });
};

/**
 * Get license info
 * Return the license information. The license information is only available to entitled users.
 */
export const v1SystemLicense = <ThrowOnError extends boolean = false>(
  options?: Options<V1SystemLicenseData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    V1SystemLicenseResponses,
    V1SystemLicenseErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/system/license",
    ...options,
  });
};

/**
 * Get system version
 * Returns the version information of the system.
 */
export const v1SystemVersion = <ThrowOnError extends boolean = false>(
  options?: Options<V1SystemVersionData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    V1SystemVersionResponses,
    V1SystemVersionErrors,
    ThrowOnError
  >({
    url: "/v1/system/version",
    ...options,
  });
};
