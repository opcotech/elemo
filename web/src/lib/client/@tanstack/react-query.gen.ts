// This file is auto-generated by @hey-api/openapi-ts

import {
  type InfiniteData,
  infiniteQueryOptions,
  queryOptions,
  type UseMutationOptions,
} from "@tanstack/react-query";

import { client } from "../client.gen";
import {
  type Options,
  v1NotificationDelete,
  v1NotificationGet,
  v1NotificationsGet,
  v1NotificationUpdate,
  v1OrganizationDelete,
  v1OrganizationGet,
  v1OrganizationMemberRemove,
  v1OrganizationMembersAdd,
  v1OrganizationMembersGet,
  v1OrganizationRoleDelete,
  v1OrganizationRoleGet,
  v1OrganizationRoleMemberRemove,
  v1OrganizationRoleMembersAdd,
  v1OrganizationRoleMembersGet,
  v1OrganizationRolesCreate,
  v1OrganizationRolesGet,
  v1OrganizationRoleUpdate,
  v1OrganizationsCreate,
  v1OrganizationsGet,
  v1OrganizationUpdate,
  v1PermissionDelete,
  v1PermissionGet,
  v1PermissionHasRelations,
  v1PermissionHasSystemRole,
  v1PermissionResourceGet,
  v1PermissionsCreate,
  v1PermissionUpdate,
  v1SystemHealth,
  v1SystemHeartbeat,
  v1SystemLicense,
  v1SystemVersion,
  v1TodoDelete,
  v1TodoGet,
  v1TodosCreate,
  v1TodosGet,
  v1TodoUpdate,
  v1UserDelete,
  v1UserGet,
  v1UserRequestPasswordReset,
  v1UserResetPassword,
  v1UsersCreate,
  v1UsersGet,
  v1UserUpdate,
} from "../sdk.gen";
import type {
  V1NotificationDeleteData,
  V1NotificationDeleteError,
  V1NotificationDeleteResponse,
  V1NotificationGetData,
  V1NotificationsGetData,
  V1NotificationsGetError,
  V1NotificationsGetResponse,
  V1NotificationUpdateData,
  V1NotificationUpdateError,
  V1NotificationUpdateResponse,
  V1OrganizationDeleteData,
  V1OrganizationDeleteError,
  V1OrganizationDeleteResponse,
  V1OrganizationGetData,
  V1OrganizationMemberRemoveData,
  V1OrganizationMemberRemoveError,
  V1OrganizationMemberRemoveResponse,
  V1OrganizationMembersAddData,
  V1OrganizationMembersAddError,
  V1OrganizationMembersAddResponse,
  V1OrganizationMembersGetData,
  V1OrganizationRoleDeleteData,
  V1OrganizationRoleDeleteError,
  V1OrganizationRoleDeleteResponse,
  V1OrganizationRoleGetData,
  V1OrganizationRoleMemberRemoveData,
  V1OrganizationRoleMemberRemoveError,
  V1OrganizationRoleMemberRemoveResponse,
  V1OrganizationRoleMembersAddData,
  V1OrganizationRoleMembersAddError,
  V1OrganizationRoleMembersAddResponse,
  V1OrganizationRoleMembersGetData,
  V1OrganizationRolesCreateData,
  V1OrganizationRolesCreateError,
  V1OrganizationRolesCreateResponse,
  V1OrganizationRolesGetData,
  V1OrganizationRolesGetError,
  V1OrganizationRolesGetResponse,
  V1OrganizationRoleUpdateData,
  V1OrganizationRoleUpdateError,
  V1OrganizationRoleUpdateResponse,
  V1OrganizationsCreateData,
  V1OrganizationsCreateError,
  V1OrganizationsCreateResponse,
  V1OrganizationsGetData,
  V1OrganizationsGetError,
  V1OrganizationsGetResponse,
  V1OrganizationUpdateData,
  V1OrganizationUpdateError,
  V1OrganizationUpdateResponse,
  V1PermissionDeleteData,
  V1PermissionDeleteError,
  V1PermissionDeleteResponse,
  V1PermissionGetData,
  V1PermissionHasRelationsData,
  V1PermissionHasSystemRoleData,
  V1PermissionResourceGetData,
  V1PermissionsCreateData,
  V1PermissionsCreateError,
  V1PermissionsCreateResponse,
  V1PermissionUpdateData,
  V1PermissionUpdateError,
  V1PermissionUpdateResponse,
  V1SystemHealthData,
  V1SystemHeartbeatData,
  V1SystemLicenseData,
  V1SystemVersionData,
  V1TodoDeleteData,
  V1TodoDeleteError,
  V1TodoDeleteResponse,
  V1TodoGetData,
  V1TodosCreateData,
  V1TodosCreateError,
  V1TodosCreateResponse,
  V1TodosGetData,
  V1TodosGetError,
  V1TodosGetResponse,
  V1TodoUpdateData,
  V1TodoUpdateError,
  V1TodoUpdateResponse,
  V1UserDeleteData,
  V1UserDeleteError,
  V1UserDeleteResponse,
  V1UserGetData,
  V1UserRequestPasswordResetData,
  V1UserResetPasswordData,
  V1UserResetPasswordError,
  V1UserResetPasswordResponse,
  V1UsersCreateData,
  V1UsersCreateError,
  V1UsersCreateResponse,
  V1UsersGetData,
  V1UsersGetError,
  V1UsersGetResponse,
  V1UserUpdateData,
  V1UserUpdateError,
  V1UserUpdateResponse,
} from "../types.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const v1UsersGetQueryKey = (options?: Options<V1UsersGetData>) =>
  createQueryKey("v1UsersGet", options);

/**
 * Get all users
 *
 * Returns the paginated list of users
 */
export const v1UsersGetOptions = (options?: Options<V1UsersGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1UsersGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1UsersGetQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">,
>(
  queryKey: QueryKey<Options>,
  page: K
) => {
  const params = {
    ...queryKey[0],
  };
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    };
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    };
  }
  return params as unknown as typeof page;
};

export const v1UsersGetInfiniteQueryKey = (
  options?: Options<V1UsersGetData>
): QueryKey<Options<V1UsersGetData>> =>
  createQueryKey("v1UsersGet", options, true);

/**
 * Get all users
 *
 * Returns the paginated list of users
 */
export const v1UsersGetInfiniteOptions = (
  options?: Options<V1UsersGetData>
) => {
  return infiniteQueryOptions<
    V1UsersGetResponse,
    V1UsersGetError,
    InfiniteData<V1UsersGetResponse>,
    QueryKey<Options<V1UsersGetData>>,
    | number
    | Pick<
        QueryKey<Options<V1UsersGetData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<V1UsersGetData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await v1UsersGet({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: v1UsersGetInfiniteQueryKey(options),
    }
  );
};

/**
 * Create new user
 *
 * Create a new user.
 */
export const v1UsersCreateMutation = (
  options?: Partial<Options<V1UsersCreateData>>
): UseMutationOptions<
  V1UsersCreateResponse,
  V1UsersCreateError,
  Options<V1UsersCreateData>
> => {
  const mutationOptions: UseMutationOptions<
    V1UsersCreateResponse,
    V1UsersCreateError,
    Options<V1UsersCreateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1UsersCreate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const v1UserRequestPasswordResetQueryKey = (
  options: Options<V1UserRequestPasswordResetData>
) => createQueryKey("v1UserRequestPasswordReset", options);

/**
 * Initiate password reset
 *
 * Initiate password reset flow.
 */
export const v1UserRequestPasswordResetOptions = (
  options: Options<V1UserRequestPasswordResetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1UserRequestPasswordReset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1UserRequestPasswordResetQueryKey(options),
  });
};

/**
 * Reset user password
 *
 * Reset the user password.
 */
export const v1UserResetPasswordMutation = (
  options?: Partial<Options<V1UserResetPasswordData>>
): UseMutationOptions<
  V1UserResetPasswordResponse,
  V1UserResetPasswordError,
  Options<V1UserResetPasswordData>
> => {
  const mutationOptions: UseMutationOptions<
    V1UserResetPasswordResponse,
    V1UserResetPasswordError,
    Options<V1UserResetPasswordData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1UserResetPassword({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete the user with the given ID.
 *
 * Delete a user by its ID. The user is not deleted irreversibly until the "force" parameter is set to true.
 */
export const v1UserDeleteMutation = (
  options?: Partial<Options<V1UserDeleteData>>
): UseMutationOptions<
  V1UserDeleteResponse,
  V1UserDeleteError,
  Options<V1UserDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    V1UserDeleteResponse,
    V1UserDeleteError,
    Options<V1UserDeleteData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1UserDelete({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const v1UserGetQueryKey = (options: Options<V1UserGetData>) =>
  createQueryKey("v1UserGet", options);

/**
 * Get user
 *
 * Return the requested user by its ID.
 */
export const v1UserGetOptions = (options: Options<V1UserGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1UserGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1UserGetQueryKey(options),
  });
};

/**
 * Update user
 *
 * Update the given user.
 */
export const v1UserUpdateMutation = (
  options?: Partial<Options<V1UserUpdateData>>
): UseMutationOptions<
  V1UserUpdateResponse,
  V1UserUpdateError,
  Options<V1UserUpdateData>
> => {
  const mutationOptions: UseMutationOptions<
    V1UserUpdateResponse,
    V1UserUpdateError,
    Options<V1UserUpdateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1UserUpdate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const v1TodosGetQueryKey = (options?: Options<V1TodosGetData>) =>
  createQueryKey("v1TodosGet", options);

/**
 * Get todo item
 *
 * Returns all todo items belonging to the current user.
 */
export const v1TodosGetOptions = (options?: Options<V1TodosGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1TodosGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1TodosGetQueryKey(options),
  });
};

export const v1TodosGetInfiniteQueryKey = (
  options?: Options<V1TodosGetData>
): QueryKey<Options<V1TodosGetData>> =>
  createQueryKey("v1TodosGet", options, true);

/**
 * Get todo item
 *
 * Returns all todo items belonging to the current user.
 */
export const v1TodosGetInfiniteOptions = (
  options?: Options<V1TodosGetData>
) => {
  return infiniteQueryOptions<
    V1TodosGetResponse,
    V1TodosGetError,
    InfiniteData<V1TodosGetResponse>,
    QueryKey<Options<V1TodosGetData>>,
    | number
    | Pick<
        QueryKey<Options<V1TodosGetData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<V1TodosGetData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await v1TodosGet({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: v1TodosGetInfiniteQueryKey(options),
    }
  );
};

/**
 * Create todo item
 *
 * Create a new todo item.
 */
export const v1TodosCreateMutation = (
  options?: Partial<Options<V1TodosCreateData>>
): UseMutationOptions<
  V1TodosCreateResponse,
  V1TodosCreateError,
  Options<V1TodosCreateData>
> => {
  const mutationOptions: UseMutationOptions<
    V1TodosCreateResponse,
    V1TodosCreateError,
    Options<V1TodosCreateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1TodosCreate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete todo item
 *
 * Delete todo by its ID.
 */
export const v1TodoDeleteMutation = (
  options?: Partial<Options<V1TodoDeleteData>>
): UseMutationOptions<
  V1TodoDeleteResponse,
  V1TodoDeleteError,
  Options<V1TodoDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    V1TodoDeleteResponse,
    V1TodoDeleteError,
    Options<V1TodoDeleteData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1TodoDelete({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const v1TodoGetQueryKey = (options: Options<V1TodoGetData>) =>
  createQueryKey("v1TodoGet", options);

/**
 * Get todo item
 *
 * Return a todo item based on the todo id belonging to the current user.
 */
export const v1TodoGetOptions = (options: Options<V1TodoGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1TodoGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1TodoGetQueryKey(options),
  });
};

/**
 * Update todo
 *
 * Update the given todo
 */
export const v1TodoUpdateMutation = (
  options?: Partial<Options<V1TodoUpdateData>>
): UseMutationOptions<
  V1TodoUpdateResponse,
  V1TodoUpdateError,
  Options<V1TodoUpdateData>
> => {
  const mutationOptions: UseMutationOptions<
    V1TodoUpdateResponse,
    V1TodoUpdateError,
    Options<V1TodoUpdateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1TodoUpdate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const v1NotificationsGetQueryKey = (
  options?: Options<V1NotificationsGetData>
) => createQueryKey("v1NotificationsGet", options);

/**
 * Get all in-app notification of the requesting user.
 *
 * Returns the paginated list of in-app notifications
 */
export const v1NotificationsGetOptions = (
  options?: Options<V1NotificationsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1NotificationsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1NotificationsGetQueryKey(options),
  });
};

export const v1NotificationsGetInfiniteQueryKey = (
  options?: Options<V1NotificationsGetData>
): QueryKey<Options<V1NotificationsGetData>> =>
  createQueryKey("v1NotificationsGet", options, true);

/**
 * Get all in-app notification of the requesting user.
 *
 * Returns the paginated list of in-app notifications
 */
export const v1NotificationsGetInfiniteOptions = (
  options?: Options<V1NotificationsGetData>
) => {
  return infiniteQueryOptions<
    V1NotificationsGetResponse,
    V1NotificationsGetError,
    InfiniteData<V1NotificationsGetResponse>,
    QueryKey<Options<V1NotificationsGetData>>,
    | number
    | Pick<
        QueryKey<Options<V1NotificationsGetData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<V1NotificationsGetData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await v1NotificationsGet({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: v1NotificationsGetInfiniteQueryKey(options),
    }
  );
};

/**
 * Delete the notification with the given ID.
 *
 * Delete a notification by its ID.
 */
export const v1NotificationDeleteMutation = (
  options?: Partial<Options<V1NotificationDeleteData>>
): UseMutationOptions<
  V1NotificationDeleteResponse,
  V1NotificationDeleteError,
  Options<V1NotificationDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    V1NotificationDeleteResponse,
    V1NotificationDeleteError,
    Options<V1NotificationDeleteData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1NotificationDelete({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const v1NotificationGetQueryKey = (
  options: Options<V1NotificationGetData>
) => createQueryKey("v1NotificationGet", options);

/**
 * Get an in-app notification
 *
 * Return the requested notification by its ID.
 */
export const v1NotificationGetOptions = (
  options: Options<V1NotificationGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1NotificationGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1NotificationGetQueryKey(options),
  });
};

/**
 * Update an in-app notification
 *
 * Update the given user.
 */
export const v1NotificationUpdateMutation = (
  options?: Partial<Options<V1NotificationUpdateData>>
): UseMutationOptions<
  V1NotificationUpdateResponse,
  V1NotificationUpdateError,
  Options<V1NotificationUpdateData>
> => {
  const mutationOptions: UseMutationOptions<
    V1NotificationUpdateResponse,
    V1NotificationUpdateError,
    Options<V1NotificationUpdateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1NotificationUpdate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const v1OrganizationsGetQueryKey = (
  options?: Options<V1OrganizationsGetData>
) => createQueryKey("v1OrganizationsGet", options);

/**
 * Get organizations
 *
 * Returns the list of organizations in the system.
 */
export const v1OrganizationsGetOptions = (
  options?: Options<V1OrganizationsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1OrganizationsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1OrganizationsGetQueryKey(options),
  });
};

export const v1OrganizationsGetInfiniteQueryKey = (
  options?: Options<V1OrganizationsGetData>
): QueryKey<Options<V1OrganizationsGetData>> =>
  createQueryKey("v1OrganizationsGet", options, true);

/**
 * Get organizations
 *
 * Returns the list of organizations in the system.
 */
export const v1OrganizationsGetInfiniteOptions = (
  options?: Options<V1OrganizationsGetData>
) => {
  return infiniteQueryOptions<
    V1OrganizationsGetResponse,
    V1OrganizationsGetError,
    InfiniteData<V1OrganizationsGetResponse>,
    QueryKey<Options<V1OrganizationsGetData>>,
    | number
    | Pick<
        QueryKey<Options<V1OrganizationsGetData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<V1OrganizationsGetData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await v1OrganizationsGet({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: v1OrganizationsGetInfiniteQueryKey(options),
    }
  );
};

/**
 * Create organization
 *
 * Create a new organization.
 */
export const v1OrganizationsCreateMutation = (
  options?: Partial<Options<V1OrganizationsCreateData>>
): UseMutationOptions<
  V1OrganizationsCreateResponse,
  V1OrganizationsCreateError,
  Options<V1OrganizationsCreateData>
> => {
  const mutationOptions: UseMutationOptions<
    V1OrganizationsCreateResponse,
    V1OrganizationsCreateError,
    Options<V1OrganizationsCreateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1OrganizationsCreate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete organization
 *
 * Delete the organization by its ID.
 */
export const v1OrganizationDeleteMutation = (
  options?: Partial<Options<V1OrganizationDeleteData>>
): UseMutationOptions<
  V1OrganizationDeleteResponse,
  V1OrganizationDeleteError,
  Options<V1OrganizationDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    V1OrganizationDeleteResponse,
    V1OrganizationDeleteError,
    Options<V1OrganizationDeleteData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1OrganizationDelete({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const v1OrganizationGetQueryKey = (
  options: Options<V1OrganizationGetData>
) => createQueryKey("v1OrganizationGet", options);

/**
 * Get organization
 *
 * Returns the given organization by its ID.
 */
export const v1OrganizationGetOptions = (
  options: Options<V1OrganizationGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1OrganizationGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1OrganizationGetQueryKey(options),
  });
};

/**
 * Update organization
 *
 * Update the organization by its ID.
 */
export const v1OrganizationUpdateMutation = (
  options?: Partial<Options<V1OrganizationUpdateData>>
): UseMutationOptions<
  V1OrganizationUpdateResponse,
  V1OrganizationUpdateError,
  Options<V1OrganizationUpdateData>
> => {
  const mutationOptions: UseMutationOptions<
    V1OrganizationUpdateResponse,
    V1OrganizationUpdateError,
    Options<V1OrganizationUpdateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1OrganizationUpdate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const v1OrganizationMembersGetQueryKey = (
  options: Options<V1OrganizationMembersGetData>
) => createQueryKey("v1OrganizationMembersGet", options);

/**
 * Get organization members
 *
 * Return the users that are members of the organization.
 */
export const v1OrganizationMembersGetOptions = (
  options: Options<V1OrganizationMembersGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1OrganizationMembersGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1OrganizationMembersGetQueryKey(options),
  });
};

/**
 * Add organization member
 *
 * Add an existing user to an organization.
 */
export const v1OrganizationMembersAddMutation = (
  options?: Partial<Options<V1OrganizationMembersAddData>>
): UseMutationOptions<
  V1OrganizationMembersAddResponse,
  V1OrganizationMembersAddError,
  Options<V1OrganizationMembersAddData>
> => {
  const mutationOptions: UseMutationOptions<
    V1OrganizationMembersAddResponse,
    V1OrganizationMembersAddError,
    Options<V1OrganizationMembersAddData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1OrganizationMembersAdd({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Remove organization member
 *
 * Removes a member from the organization
 */
export const v1OrganizationMemberRemoveMutation = (
  options?: Partial<Options<V1OrganizationMemberRemoveData>>
): UseMutationOptions<
  V1OrganizationMemberRemoveResponse,
  V1OrganizationMemberRemoveError,
  Options<V1OrganizationMemberRemoveData>
> => {
  const mutationOptions: UseMutationOptions<
    V1OrganizationMemberRemoveResponse,
    V1OrganizationMemberRemoveError,
    Options<V1OrganizationMemberRemoveData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1OrganizationMemberRemove({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const v1OrganizationRolesGetQueryKey = (
  options: Options<V1OrganizationRolesGetData>
) => createQueryKey("v1OrganizationRolesGet", options);

/**
 * Get organization roles
 *
 * Return the roles that are assigned to the organization.
 */
export const v1OrganizationRolesGetOptions = (
  options: Options<V1OrganizationRolesGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1OrganizationRolesGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1OrganizationRolesGetQueryKey(options),
  });
};

export const v1OrganizationRolesGetInfiniteQueryKey = (
  options: Options<V1OrganizationRolesGetData>
): QueryKey<Options<V1OrganizationRolesGetData>> =>
  createQueryKey("v1OrganizationRolesGet", options, true);

/**
 * Get organization roles
 *
 * Return the roles that are assigned to the organization.
 */
export const v1OrganizationRolesGetInfiniteOptions = (
  options: Options<V1OrganizationRolesGetData>
) => {
  return infiniteQueryOptions<
    V1OrganizationRolesGetResponse,
    V1OrganizationRolesGetError,
    InfiniteData<V1OrganizationRolesGetResponse>,
    QueryKey<Options<V1OrganizationRolesGetData>>,
    | number
    | Pick<
        QueryKey<Options<V1OrganizationRolesGetData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<V1OrganizationRolesGetData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await v1OrganizationRolesGet({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: v1OrganizationRolesGetInfiniteQueryKey(options),
    }
  );
};

/**
 * Create a new role in the organization
 *
 * Create a new role and assign it to the organization.
 */
export const v1OrganizationRolesCreateMutation = (
  options?: Partial<Options<V1OrganizationRolesCreateData>>
): UseMutationOptions<
  V1OrganizationRolesCreateResponse,
  V1OrganizationRolesCreateError,
  Options<V1OrganizationRolesCreateData>
> => {
  const mutationOptions: UseMutationOptions<
    V1OrganizationRolesCreateResponse,
    V1OrganizationRolesCreateError,
    Options<V1OrganizationRolesCreateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1OrganizationRolesCreate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete organization role
 *
 * Deletes a role that is assigned to the organization.
 */
export const v1OrganizationRoleDeleteMutation = (
  options?: Partial<Options<V1OrganizationRoleDeleteData>>
): UseMutationOptions<
  V1OrganizationRoleDeleteResponse,
  V1OrganizationRoleDeleteError,
  Options<V1OrganizationRoleDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    V1OrganizationRoleDeleteResponse,
    V1OrganizationRoleDeleteError,
    Options<V1OrganizationRoleDeleteData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1OrganizationRoleDelete({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const v1OrganizationRoleGetQueryKey = (
  options: Options<V1OrganizationRoleGetData>
) => createQueryKey("v1OrganizationRoleGet", options);

/**
 * Get organization role
 *
 * Returns the given organization by its ID.
 */
export const v1OrganizationRoleGetOptions = (
  options: Options<V1OrganizationRoleGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1OrganizationRoleGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1OrganizationRoleGetQueryKey(options),
  });
};

/**
 * Update organization role
 *
 * Update the organization role by its ID.
 */
export const v1OrganizationRoleUpdateMutation = (
  options?: Partial<Options<V1OrganizationRoleUpdateData>>
): UseMutationOptions<
  V1OrganizationRoleUpdateResponse,
  V1OrganizationRoleUpdateError,
  Options<V1OrganizationRoleUpdateData>
> => {
  const mutationOptions: UseMutationOptions<
    V1OrganizationRoleUpdateResponse,
    V1OrganizationRoleUpdateError,
    Options<V1OrganizationRoleUpdateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1OrganizationRoleUpdate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const v1OrganizationRoleMembersGetQueryKey = (
  options: Options<V1OrganizationRoleMembersGetData>
) => createQueryKey("v1OrganizationRoleMembersGet", options);

/**
 * Get organization role members
 *
 * Return the users that are members of the organization's role.
 */
export const v1OrganizationRoleMembersGetOptions = (
  options: Options<V1OrganizationRoleMembersGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1OrganizationRoleMembersGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1OrganizationRoleMembersGetQueryKey(options),
  });
};

/**
 * Add organization role member
 *
 * Add an existing user to an organization's role.
 */
export const v1OrganizationRoleMembersAddMutation = (
  options?: Partial<Options<V1OrganizationRoleMembersAddData>>
): UseMutationOptions<
  V1OrganizationRoleMembersAddResponse,
  V1OrganizationRoleMembersAddError,
  Options<V1OrganizationRoleMembersAddData>
> => {
  const mutationOptions: UseMutationOptions<
    V1OrganizationRoleMembersAddResponse,
    V1OrganizationRoleMembersAddError,
    Options<V1OrganizationRoleMembersAddData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1OrganizationRoleMembersAdd({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Remove organization role member
 *
 * Removes a member from the organization's role
 */
export const v1OrganizationRoleMemberRemoveMutation = (
  options?: Partial<Options<V1OrganizationRoleMemberRemoveData>>
): UseMutationOptions<
  V1OrganizationRoleMemberRemoveResponse,
  V1OrganizationRoleMemberRemoveError,
  Options<V1OrganizationRoleMemberRemoveData>
> => {
  const mutationOptions: UseMutationOptions<
    V1OrganizationRoleMemberRemoveResponse,
    V1OrganizationRoleMemberRemoveError,
    Options<V1OrganizationRoleMemberRemoveData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1OrganizationRoleMemberRemove({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Create permission
 *
 * Create a new permission for a subject to the given target.
 */
export const v1PermissionsCreateMutation = (
  options?: Partial<Options<V1PermissionsCreateData>>
): UseMutationOptions<
  V1PermissionsCreateResponse,
  V1PermissionsCreateError,
  Options<V1PermissionsCreateData>
> => {
  const mutationOptions: UseMutationOptions<
    V1PermissionsCreateResponse,
    V1PermissionsCreateError,
    Options<V1PermissionsCreateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1PermissionsCreate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete permission
 *
 * Delete a permission by its ID.
 */
export const v1PermissionDeleteMutation = (
  options?: Partial<Options<V1PermissionDeleteData>>
): UseMutationOptions<
  V1PermissionDeleteResponse,
  V1PermissionDeleteError,
  Options<V1PermissionDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    V1PermissionDeleteResponse,
    V1PermissionDeleteError,
    Options<V1PermissionDeleteData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1PermissionDelete({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const v1PermissionGetQueryKey = (
  options: Options<V1PermissionGetData>
) => createQueryKey("v1PermissionGet", options);

/**
 * Get permission
 *
 * Get a permission by its ID.
 */
export const v1PermissionGetOptions = (
  options: Options<V1PermissionGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1PermissionGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1PermissionGetQueryKey(options),
  });
};

/**
 * Update permission
 *
 * Update a permission.
 */
export const v1PermissionUpdateMutation = (
  options?: Partial<Options<V1PermissionUpdateData>>
): UseMutationOptions<
  V1PermissionUpdateResponse,
  V1PermissionUpdateError,
  Options<V1PermissionUpdateData>
> => {
  const mutationOptions: UseMutationOptions<
    V1PermissionUpdateResponse,
    V1PermissionUpdateError,
    Options<V1PermissionUpdateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await v1PermissionUpdate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const v1PermissionResourceGetQueryKey = (
  options: Options<V1PermissionResourceGetData>
) => createQueryKey("v1PermissionResourceGet", options);

/**
 * Get permissions for a resource
 *
 * Get all permissions the caller have for a given resource.
 */
export const v1PermissionResourceGetOptions = (
  options: Options<V1PermissionResourceGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1PermissionResourceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1PermissionResourceGetQueryKey(options),
  });
};

export const v1PermissionHasRelationsQueryKey = (
  options: Options<V1PermissionHasRelationsData>
) => createQueryKey("v1PermissionHasRelations", options);

/**
 * Check relations to resource
 *
 * Check if the caller has any relations to a given resource.
 */
export const v1PermissionHasRelationsOptions = (
  options: Options<V1PermissionHasRelationsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1PermissionHasRelations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1PermissionHasRelationsQueryKey(options),
  });
};

export const v1PermissionHasSystemRoleQueryKey = (
  options: Options<V1PermissionHasSystemRoleData>
) => createQueryKey("v1PermissionHasSystemRole", options);

/**
 * Check system role assignment
 *
 * Check if the user is member of one or more system roles.
 */
export const v1PermissionHasSystemRoleOptions = (
  options: Options<V1PermissionHasSystemRoleData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1PermissionHasSystemRole({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1PermissionHasSystemRoleQueryKey(options),
  });
};

export const v1SystemHealthQueryKey = (options?: Options<V1SystemHealthData>) =>
  createQueryKey("v1SystemHealth", options);

/**
 * Get system health
 *
 * Returns the health of registered components.
 */
export const v1SystemHealthOptions = (
  options?: Options<V1SystemHealthData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1SystemHealth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1SystemHealthQueryKey(options),
  });
};

export const v1SystemHeartbeatQueryKey = (
  options?: Options<V1SystemHeartbeatData>
) => createQueryKey("v1SystemHeartbeat", options);

/**
 * Get heartbeat
 *
 * Returns 200 OK if the service is reachable.
 */
export const v1SystemHeartbeatOptions = (
  options?: Options<V1SystemHeartbeatData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1SystemHeartbeat({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1SystemHeartbeatQueryKey(options),
  });
};

export const v1SystemLicenseQueryKey = (
  options?: Options<V1SystemLicenseData>
) => createQueryKey("v1SystemLicense", options);

/**
 * Get license info
 *
 * Return the license information. The license information is only available to entitled users.
 */
export const v1SystemLicenseOptions = (
  options?: Options<V1SystemLicenseData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1SystemLicense({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1SystemLicenseQueryKey(options),
  });
};

export const v1SystemVersionQueryKey = (
  options?: Options<V1SystemVersionData>
) => createQueryKey("v1SystemVersion", options);

/**
 * Get system version
 *
 * Returns the version information of the system.
 */
export const v1SystemVersionOptions = (
  options?: Options<V1SystemVersionData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await v1SystemVersion({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: v1SystemVersionQueryKey(options),
  });
};
