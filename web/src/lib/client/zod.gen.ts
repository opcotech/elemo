// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

/**
 * Two-letter ISO language code.
 */
export const zLanguage = z.enum([
  "aa",
  "ab",
  "ae",
  "af",
  "ak",
  "am",
  "an",
  "ar",
  "as",
  "av",
  "ay",
  "az",
  "ba",
  "be",
  "bg",
  "bh",
  "bi",
  "bm",
  "bn",
  "bo",
  "br",
  "bs",
  "ca",
  "ce",
  "ch",
  "co",
  "cr",
  "cs",
  "cu",
  "cv",
  "cy",
  "da",
  "de",
  "dv",
  "dz",
  "ee",
  "el",
  "en",
  "eo",
  "es",
  "et",
  "eu",
  "fa",
  "ff",
  "fi",
  "fj",
  "fo",
  "fr",
  "fy",
  "ga",
  "gd",
  "gl",
  "gn",
  "gu",
  "gv",
  "ha",
  "he",
  "hi",
  "ho",
  "hr",
  "ht",
  "hu",
  "hy",
  "hz",
  "ia",
  "id",
  "ie",
  "ig",
  "ii",
  "ik",
  "io",
  "is",
  "it",
  "iu",
  "ja",
  "jv",
  "ka",
  "kg",
  "ki",
  "kj",
  "kk",
  "kl",
  "km",
  "kn",
  "ko",
  "kr",
  "ks",
  "ku",
  "kv",
  "kw",
  "ky",
  "la",
  "lb",
  "lg",
  "li",
  "ln",
  "lo",
  "lt",
  "lu",
  "lv",
  "mg",
  "mh",
  "mi",
  "mk",
  "ml",
  "mn",
  "mr",
  "ms",
  "mt",
  "my",
  "na",
  "nb",
  "nd",
  "ne",
  "ng",
  "nl",
  "nn",
  "no",
  "nr",
  "nv",
  "ny",
  "oc",
  "oj",
  "om",
  "or",
  "os",
  "pa",
  "pi",
  "pl",
  "ps",
  "pt",
  "qu",
  "rm",
  "rn",
  "ro",
  "ru",
  "rw",
  "sa",
  "sc",
  "sd",
  "se",
  "sg",
  "si",
  "sk",
  "sl",
  "sm",
  "sn",
  "so",
  "sq",
  "sr",
  "ss",
  "st",
  "su",
  "sv",
  "sw",
  "ta",
  "te",
  "tg",
  "th",
  "ti",
  "tk",
  "tl",
  "tn",
  "to",
  "tr",
  "ts",
  "tt",
  "tw",
  "ty",
  "ug",
  "uk",
  "ur",
  "uz",
  "ve",
  "vi",
  "vo",
  "wa",
  "wo",
  "xh",
  "yi",
  "yo",
  "za",
  "zh",
  "zu",
]);

/**
 * UserStatus
 * Status of the user.
 */
export const zUserStatus = z.enum(["active", "pending", "inactive", "deleted"]);

/**
 * User
 * A user in the system.
 */
export const zUser = z.object({
  id: z.string(),
  username: z
    .string()
    .min(3)
    .max(50)
    .regex(/^[a-z0-9-_]{3,50}$/),
  first_name: z.union([z.string().min(1).max(50), z.null()]),
  last_name: z.union([z.string().min(1).max(50), z.null()]),
  email: z.email().min(6).max(254),
  picture: z.union([z.url().max(2000), z.null()]),
  title: z.union([z.string().min(3).max(50), z.null()]),
  bio: z.union([z.string().max(500), z.null()]),
  address: z.union([z.string().min(3).max(500), z.null()]),
  phone: z.union([z.string().min(7).max(16), z.null()]),
  links: z.union([z.array(z.url().max(2000)), z.null()]),
  languages: z.array(zLanguage),
  status: zUserStatus,
  created_at: z.iso.datetime(),
  updated_at: z.union([z.iso.datetime(), z.null()]),
});

/**
 * OrganizationStatus
 * Status of the organization.
 */
export const zOrganizationStatus = z.enum(["active", "deleted"]);

/**
 * Organization
 * An organization in the system.
 */
export const zOrganization = z.object({
  id: z.string(),
  name: z.string().min(1).max(120),
  email: z.email().min(6).max(254),
  logo: z.union([z.url().max(2000), z.null()]),
  website: z.union([z.url().max(2000), z.null()]),
  status: zOrganizationStatus,
  members: z.array(z.string()),
  teams: z.array(z.string()),
  namespaces: z.array(z.string()),
  created_at: z.iso.datetime(),
  updated_at: z.union([z.iso.datetime(), z.null()]),
});

/**
 * Priority of the todo item.
 */
export const zTodoPriority = z.enum([
  "normal",
  "important",
  "urgent",
  "critical",
]);

/**
 * Todo
 * A todo item belonging to a user.
 */
export const zTodo = z.object({
  id: z.string(),
  title: z.string().min(3).max(250),
  description: z.string().min(10).max(500),
  priority: zTodoPriority,
  completed: z.boolean().default(true),
  owned_by: z.string(),
  created_by: z.string(),
  due_date: z.union([z.iso.datetime(), z.null()]),
  created_at: z.iso.datetime(),
  updated_at: z.union([z.iso.datetime(), z.null()]),
});

/**
 * Notification
 * An in-app notification sent to the user.
 */
export const zNotification = z.object({
  id: z.string(),
  title: z.string().min(3).max(120),
  description: z.string().min(5).max(500),
  recipient: z.string(),
  read: z.boolean().default(false),
  created_at: z.iso.datetime(),
  updated_at: z.union([z.iso.datetime(), z.null()]),
});

/**
 * SystemHealth
 */
export const zSystemHealth = z.object({
  cache_database: z.enum(["healthy", "unhealthy", "unknown"]),
  graph_database: z.enum(["healthy", "unhealthy", "unknown"]),
  relational_database: z.enum(["healthy", "unhealthy", "unknown"]),
  license: z.enum(["healthy", "unhealthy", "unknown"]),
  message_queue: z.enum(["healthy", "unhealthy", "unknown"]),
});

/**
 * SystemVersion
 */
export const zSystemVersion = z.object({
  version: z
    .string()
    .regex(
      /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
    ),
  commit: z.string().regex(/^[0-9a-f]{5,40}$/),
  date: z.iso.datetime(),
  go_version: z
    .string()
    .regex(
      /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
    ),
});

/**
 * SystemLicense
 */
export const zSystemLicense = z.object({
  id: z.string(),
  organization: z.string(),
  email: z.email().min(6).max(254),
  quotas: z.object({
    documents: z.int().gte(1),
    namespaces: z.int().gte(1),
    organizations: z.int().gte(1),
    projects: z.int().gte(1),
    roles: z.int().gte(1),
    users: z.int().gte(1),
  }),
  features: z.array(
    z.enum([
      "components",
      "custom_statuses",
      "custom_fields",
      "multiple_assignees",
      "releases",
    ])
  ),
  expires_at: z.iso.datetime(),
});

/**
 * HTTPError
 * HTTP error description.
 */
export const zHttpError = z.object({
  message: z.string(),
});

/**
 * PermissionKind
 * Kind of a permission.
 */
export const zPermissionKind = z.enum([
  "*",
  "create",
  "write",
  "read",
  "delete",
]);

/**
 * Permission
 * A permission in the system.
 */
export const zPermission = z.object({
  id: z.string(),
  kind: zPermissionKind,
  subject: z.string(),
  target: z.string(),
  created_at: z.iso.datetime(),
  updated_at: z.union([z.iso.datetime(), z.null()]),
});

/**
 * Role
 * A role in the system.
 */
export const zRole = z.object({
  id: z.string(),
  name: z.string().min(3).max(120),
  description: z.optional(z.union([z.string().min(5).max(500), z.null()])),
  members: z.array(z.string()),
  permissions: z.array(z.string()),
  created_at: z.iso.datetime(),
  updated_at: z.union([z.iso.datetime(), z.null()]),
});

/**
 * ResourceType
 */
export const zResourceType = z.enum([
  "Assignment",
  "Attachment",
  "Comment",
  "Document",
  "Issue",
  "IssueRelation",
  "Label",
  "Namespace",
  "Organization",
  "Permission",
  "Project",
  "ResourceType",
  "Role",
  "Todo",
  "User",
]);

/**
 * Number of resources to skip.
 */
export const zOffset = z.int().gte(0).default(0);

/**
 * Number of resources to return.
 */
export const zLimit = z.int().gte(1).lte(1000).default(100);

/**
 * ID of the resource.
 */
export const zId = z.string();

/**
 * ID of the resource combined with its resource type.
 */
export const zResourceId = z.string();

/**
 * Irreversibly delete the user.
 */
export const zForce = z.boolean();

/**
 * ID of a role.
 */
export const zRoles = z.array(z.enum(["Owner", "Admin", "Support"]));

export const zUserPatch = z.object({
  username: z.optional(
    z
      .string()
      .min(3)
      .max(50)
      .regex(/^[a-z0-9-_]{3,50}$/)
  ),
  first_name: z.optional(z.union([z.string().min(1).max(50), z.null()])),
  last_name: z.optional(z.union([z.string().min(1).max(50), z.null()])),
  email: z.optional(z.email().min(6).max(254)),
  password: z.optional(z.string().min(8).max(64)),
  new_password: z.optional(z.string().min(8).max(64)),
  picture: z.optional(z.union([z.url().max(2000), z.null()])),
  title: z.optional(z.union([z.string().min(3).max(50), z.null()])),
  bio: z.optional(z.union([z.string().max(500), z.null()])),
  address: z.optional(z.union([z.string().min(3).max(500), z.null()])),
  phone: z.optional(z.union([z.string().min(7).max(16), z.null()])),
  links: z.optional(z.array(z.url().max(2000))),
  languages: z.optional(z.array(zLanguage)),
  status: z.optional(zUserStatus),
});

export const zUserCreate = z.object({
  username: z
    .string()
    .min(3)
    .max(50)
    .regex(/^[a-z0-9-_]{3,50}$/),
  first_name: z.optional(z.union([z.string().min(1).max(50), z.null()])),
  last_name: z.optional(z.union([z.string().min(1).max(50), z.null()])),
  email: z.email().min(6).max(254),
  password: z.string().min(8).max(64),
  picture: z.optional(z.union([z.url().max(2000), z.null()])),
  title: z.optional(z.union([z.string().min(3).max(50), z.null()])),
  bio: z.optional(z.union([z.string().max(500), z.null()])),
  address: z.optional(z.union([z.string().min(3).max(500), z.null()])),
  phone: z.optional(z.union([z.string().min(7).max(16), z.null()])),
  links: z.optional(z.union([z.array(z.url().max(2000)), z.null()])),
  languages: z.optional(z.union([z.array(zLanguage), z.null()])),
});

export const zTodoCreate = z.object({
  title: z.string().min(3).max(250),
  description: z.optional(z.union([z.string().min(10).max(500), z.null()])),
  priority: zTodoPriority,
  owned_by: z.string(),
  due_date: z.optional(z.union([z.iso.datetime(), z.null()])),
});

export const zTodoPatch = z.object({
  title: z.optional(z.string().min(3).max(250)),
  description: z.optional(z.union([z.string().min(10).max(500), z.null()])),
  priority: z.optional(zTodoPriority),
  completed: z.optional(z.boolean()),
  owned_by: z.optional(z.string()),
  due_date: z.optional(z.union([z.iso.datetime(), z.null()])),
});

export const zNotificationPatch = z.object({
  read: z.boolean(),
});

export const zOrganizationCreate = z.object({
  name: z.string().min(1).max(120),
  email: z.email().min(6).max(254),
  logo: z.optional(z.url().max(2000)),
  website: z.optional(z.url().max(2000)),
});

export const zOrganizationPatch = z.object({
  name: z.optional(z.string().min(1).max(120)),
  email: z.optional(z.email().min(6).max(254)),
  logo: z.optional(z.url().max(2000)),
  website: z.optional(z.url().max(2000)),
  status: z.optional(zOrganizationStatus),
});

export const zPermissionCreate = z.object({
  kind: zPermissionKind,
  subject: z.object({
    resourceType: zResourceType,
    id: z.string(),
  }),
  target: z.object({
    resourceType: zResourceType,
    id: z.string(),
  }),
});

export const zPermissionPatch = z.object({
  kind: zPermissionKind,
});

export const zRoleCreate = z.object({
  name: z.string().min(3).max(120),
  description: z.optional(z.string().min(5).max(500)),
});

export const zRolePatch = z.object({
  name: z.optional(z.string().min(3).max(120)),
  description: z.optional(z.string().min(5).max(500)),
});

export const zV1UsersGetData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      offset: z.optional(z.int().gte(0)).default(0),
      limit: z.optional(z.int().gte(1).lte(1000)).default(100),
    })
  ),
});

/**
 * OK
 */
export const zV1UsersGetResponse = z.array(zUser);

export const zV1UsersCreateData = z.object({
  body: z.optional(zUserCreate),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Example response
 */
export const zV1UsersCreateResponse = z.object({
  id: z.string(),
});

export const zV1UserDeleteData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(
    z.object({
      force: z.optional(z.boolean()),
    })
  ),
});

/**
 * No Content
 */
export const zV1UserDeleteResponse = z.void();

export const zV1UserGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1UserGetResponse = zUser;

export const zV1UserUpdateData = z.object({
  body: z.optional(zUserPatch),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1UserUpdateResponse = zUser;

export const zV1TodosGetData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      offset: z.optional(z.int().gte(0)).default(0),
      limit: z.optional(z.int().gte(1).lte(1000)).default(100),
      completed: z.optional(z.boolean()),
    })
  ),
});

/**
 * OK
 */
export const zV1TodosGetResponse = z.array(zTodo);

export const zV1TodosCreateData = z.object({
  body: z.optional(zTodoCreate),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Example response
 */
export const zV1TodosCreateResponse = z.object({
  id: z.string(),
});

export const zV1TodoDeleteData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zV1TodoDeleteResponse = z.void();

export const zV1TodoGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1TodoGetResponse = zTodo;

export const zV1TodoUpdateData = z.object({
  body: z.optional(zTodoPatch),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1TodoUpdateResponse = zTodo;

export const zV1NotificationsGetData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      offset: z.optional(z.int().gte(0)).default(0),
      limit: z.optional(z.int().gte(1).lte(1000)).default(100),
    })
  ),
});

/**
 * OK
 */
export const zV1NotificationsGetResponse = z.array(zNotification);

export const zV1NotificationDeleteData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zV1NotificationDeleteResponse = z.void();

export const zV1NotificationGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1NotificationGetResponse = zNotification;

export const zV1NotificationUpdateData = z.object({
  body: z.optional(zNotificationPatch),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1NotificationUpdateResponse = zNotification;

export const zV1OrganizationsGetData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      offset: z.optional(z.int().gte(0)).default(0),
      limit: z.optional(z.int().gte(1).lte(1000)).default(100),
    })
  ),
});

/**
 * OK
 */
export const zV1OrganizationsGetResponse = z.array(zOrganization);

export const zV1OrganizationsCreateData = z.object({
  body: z.optional(zOrganizationCreate),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Example response
 */
export const zV1OrganizationsCreateResponse = z.object({
  id: z.string(),
});

export const zV1OrganizationDeleteData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(
    z.object({
      force: z.optional(z.boolean()),
    })
  ),
});

/**
 * No Content
 */
export const zV1OrganizationDeleteResponse = z.void();

export const zV1OrganizationGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1OrganizationGetResponse = zOrganization;

export const zV1OrganizationUpdateData = z.object({
  body: z.optional(zOrganizationPatch),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1OrganizationUpdateResponse = zOrganization;

export const zV1OrganizationMembersGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1OrganizationMembersGetResponse = z.array(zUser);

export const zV1OrganizationMembersAddData = z.object({
  body: z.optional(
    z.object({
      user_id: z.string(),
    })
  ),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * Example response
 */
export const zV1OrganizationMembersAddResponse = z.object({
  id: z.string(),
});

export const zV1OrganizationMemberRemoveData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
    user_id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zV1OrganizationMemberRemoveResponse = z.void();

export const zV1OrganizationRolesGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(
    z.object({
      offset: z.optional(z.int().gte(0)).default(0),
      limit: z.optional(z.int().gte(1).lte(1000)).default(100),
    })
  ),
});

/**
 * OK
 */
export const zV1OrganizationRolesGetResponse = z.array(zRole);

export const zV1OrganizationRolesCreateData = z.object({
  body: z.optional(zRoleCreate),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * Example response
 */
export const zV1OrganizationRolesCreateResponse = z.object({
  id: z.string(),
});

export const zV1OrganizationRoleDeleteData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
    role_id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zV1OrganizationRoleDeleteResponse = z.void();

export const zV1OrganizationRoleGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
    role_id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1OrganizationRoleGetResponse = zRole;

export const zV1OrganizationRoleUpdateData = z.object({
  body: z.optional(zRolePatch),
  path: z.object({
    id: z.string(),
    role_id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1OrganizationRoleUpdateResponse = zRole;

export const zV1OrganizationRoleMembersGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
    role_id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1OrganizationRoleMembersGetResponse = z.array(zUser);

export const zV1OrganizationRoleMembersAddData = z.object({
  body: z.optional(
    z.object({
      user_id: z.string(),
    })
  ),
  path: z.object({
    id: z.string(),
    role_id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * Example response
 */
export const zV1OrganizationRoleMembersAddResponse = z.object({
  id: z.string(),
});

export const zV1OrganizationRoleMemberRemoveData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
    role_id: z.string(),
    user_id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zV1OrganizationRoleMemberRemoveResponse = z.void();

export const zV1PermissionsCreateData = z.object({
  body: z.optional(zPermissionCreate),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Example response
 */
export const zV1PermissionsCreateResponse = z.object({
  id: z.string(),
});

export const zV1PermissionDeleteData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zV1PermissionDeleteResponse = z.void();

export const zV1PermissionGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1PermissionGetResponse = zPermission;

export const zV1PermissionUpdateData = z.object({
  body: z.optional(zPermissionPatch),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1PermissionUpdateResponse = zPermission;

export const zV1PermissionResourceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    resourceId: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1PermissionResourceGetResponse = z.array(zPermission);

export const zV1PermissionHasRelationsData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    resourceId: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1PermissionHasRelationsResponse = z.boolean();

export const zV1PermissionHasSystemRoleData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    roles: z.array(z.enum(["Owner", "Admin", "Support"])),
  }),
});

/**
 * OK
 */
export const zV1PermissionHasSystemRoleResponse = z.boolean();

export const zV1SystemHealthData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1SystemHealthResponse = zSystemHealth;

export const zV1SystemHeartbeatData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1SystemHeartbeatResponse = z.enum(["OK"]);

export const zV1SystemLicenseData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1SystemLicenseResponse = zSystemLicense;

export const zV1SystemVersionData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zV1SystemVersionResponse = zSystemVersion;
